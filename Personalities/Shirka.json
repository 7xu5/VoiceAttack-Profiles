{
  "name": "Shirka",
  "description": null,
  "scripts": {
    "AFMU repairs": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{event.item} \r\n{if event.repairedfully:\r\n    completamente reparado\r\n|else:\r\n    parcialmente reparado \r\n    {Occasionally(2, cat(\r\n        OneOf(\"al \", \"en un \"),\r\n        Humanise(event.health * 100),\r\n        \" por ciento de funcionalidad\"\r\n    ))}\r\n}\r\n\r\n{Occasionally(2, \r\n    cat(OneOf(\", \", \"y\"), \" listo para reactivación\")\r\n)}.",
      "default": false,
      "name": "AFMU repairs",
      "description": "Activado al reparar módulos utilizando la Unidad de automantenimiento (AFMU)"
    },
    "Altair commodities": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{if lcase (state.altair_commodity) = \"explosives\":\r\n   explosivos\r\n|elif lcase (state.altair_commodity) = \"hydrogen fuel\":\r\n   combustible de hidrógeno\r\n|elif lcase (state.altair_commodity) = \"mineral oil\":\r\n   aceite mineral\r\n|elif lcase (state.altair_commodity) = \"pesticides\":\r\n   pesticidas\r\n|elif lcase (state.altair_commodity) = \"clothing\":\r\n   ropa\r\n|elif lcase (state.altair_commodity) = \"consumer technology\":\r\n   tecnología de consumo\r\n|elif lcase (state.altair_commodity) = \"domestic appliances\":\r\n   electrodomésticos\r\n|elif lcase (state.altair_commodity) = \"beer\":\r\n   cerveza\r\n|elif lcase (state.altair_commodity) = \"liquor\":\r\n   licor\r\n|elif lcase (state.altair_commodity) = \"narcotics\":\r\n   narcóticos\r\n|elif lcase (state.altair_commodity) = \"tobacco\":\r\n   tabaco\r\n|elif lcase (state.altair_commodity) = \"wine\":\r\n   vino\r\n|elif lcase (state.altair_commodity) = \"algae\":\r\n   algas\r\n|elif lcase (state.altair_commodity) = \"animal meat\":\r\n   carne animal\r\n|elif lcase (state.altair_commodity) = \"coffee\":\r\n   café\r\n|elif lcase (state.altair_commodity) = \"fish\":\r\n   pescado\r\n|elif lcase (state.altair_commodity) = \"food cartridges\":\r\n   cartuchos de alimentos\r\n|elif lcase (state.altair_commodity) = \"fruit and vegetables\":\r\n   frutas y verduras\r\n|elif lcase (state.altair_commodity) = \"grain\":\r\n   grano\r\n|elif lcase (state.altair_commodity) = \"synthetic meat\":\r\n   carne sintética\r\n|elif lcase (state.altair_commodity) = \"tea\":\r\n   té\r\n|elif lcase (state.altair_commodity) = \"polymers\":\r\n   polímeros\r\n|elif lcase (state.altair_commodity) = \"semiconductors\":\r\n   semiconductores\r\n|elif lcase (state.altair_commodity) = \"superconductors\":\r\n   superconductores\r\n|elif lcase (state.altair_commodity) = \"atmospheric processors\":\r\n   procesadores atmosféricos\r\n|elif lcase (state.altair_commodity) = \"crop harvesters\":\r\n   cosechadoras de cultivos\r\n|elif lcase (state.altair_commodity) = \"marine equipment\":\r\n   equipamiento marino\r\n|elif lcase (state.altair_commodity) = \"microbial furnaces\":\r\n   hornos microbianos\r\n|elif lcase (state.altair_commodity) = \"mineral extractors\":\r\n   extractores minerales\r\n|elif lcase (state.altair_commodity) = \"power generators\":\r\n   generadores de energía\r\n|elif lcase (state.altair_commodity) = \"water purifiers\":\r\n   purificadores de agua\r\n|elif lcase (state.altair_commodity) = \"agri-medicines\":\r\n   medicinas agrícolas\r\n|elif lcase (state.altair_commodity) = \"basic medicines\":\r\n   medicinas básicas\r\n|elif lcase (state.altair_commodity) = \"combat stabilisers\":\r\n   estabilizadores de combate\r\n|elif lcase (state.altair_commodity) = \"performance enhancers\":\r\n   potenciadores de rendimiento\r\n|elif lcase (state.altair_commodity) = \"progenitor cells\":\r\n   células madre\r\n|elif lcase (state.altair_commodity) = \"aluminium\":\r\n   aluminio\r\n|elif lcase (state.altair_commodity) = \"beryllium\":\r\n   berílio\r\n|elif lcase (state.altair_commodity) = \"cobalt\":\r\n   cobalto\r\n|elif lcase (state.altair_commodity) = \"copper\":\r\n   cobre\r\n|elif lcase (state.altair_commodity) = \"gallium\":\r\n   galio\r\n|elif lcase (state.altair_commodity) = \"gold\":\r\n   oro\r\n|elif lcase (state.altair_commodity) = \"indium\":\r\n   indio\r\n|elif lcase (state.altair_commodity) = \"lithium\":\r\n   litio\r\n|elif lcase (state.altair_commodity) = \"palladium\":\r\n   paladio\r\n|elif lcase (state.altair_commodity) = \"platinum\":\r\n   platino\r\n|elif lcase (state.altair_commodity) = \"silver\":\r\n   plata\r\n|elif lcase (state.altair_commodity) = \"tantalum\":\r\n   tantalio\r\n|elif lcase (state.altair_commodity) = \"uranium\":\r\n   uranio\r\n|elif lcase (state.altair_commodity) = \"bauxite\":\r\n   bauxita\r\n|elif lcase (state.altair_commodity) = \"bertrandite\":\r\n   betrandita\r\n|elif lcase (state.altair_commodity) = \"coltan\":\r\n  coltan\r\n|elif lcase (state.altair_commodity) = \"gallite\":\r\n   galita\r\n|elif lcase (state.altair_commodity) = \"indite\":\r\n   indita\r\n|elif lcase (state.altair_commodity) = \"lepidolite\":\r\n   lepidolita\r\n|elif lcase (state.altair_commodity) = \"rutile\":\r\n   rutilo\r\n|elif lcase (state.altair_commodity) = \"uraninite\":\r\n   uraninita\r\n|elif lcase (state.altair_commodity) = \"imperial slaves\":\r\n   esclavos imperiales\r\n|elif lcase (state.altair_commodity) = \"slaves\":\r\n   esclavos\r\n|elif lcase (state.altair_commodity) = \"advanced catalysers\":\r\n   catalizadores avanzados\r\n|elif lcase (state.altair_commodity) = \"animal monitors\":\r\n   monitores de animales\r\n|elif lcase (state.altair_commodity) = \"aquaponic systems\":\r\n   sistemas de hidroponia\r\n|elif lcase (state.altair_commodity) = \"auto-fabricators\":\r\n   autofabricantes\r\n|elif lcase (state.altair_commodity) = \"biorreducing lichen\":\r\n   líquenes biorreductores\r\n|elif lcase (state.altair_commodity) = \"computer components\":\r\n   componentes informáticos\r\n|elif lcase (state.altair_commodity) = \"h.e. suits\":\r\n   trajes de protección\r\n|elif lcase (state.altair_commodity) = \"land enrichment systems\":\r\n   sistemas de enriquecimiento de terrenos\r\n|elif lcase (state.altair_commodity) = \"resonating separators\":\r\n   separadores resonantes\r\n|elif lcase (state.altair_commodity) = \"robotics\":\r\n   robótica\r\n|elif lcase (state.altair_commodity) = \"leather\":\r\n   cuero\r\n|elif lcase (state.altair_commodity) = \"natural fabrics\":\r\n   tejidos naturales\r\n|elif lcase (state.altair_commodity) = \"synthetic fabrics\":\r\n   tejidos sintéticos\r\n|elif lcase (state.altair_commodity) = \"biowaste\":\r\n   resíduos biológicos\r\n|elif lcase (state.altair_commodity) = \"chemical waste\":\r\n   resíduos químicos\r\n|elif lcase (state.altair_commodity) = \"scrap\":\r\n   chatarra\r\n|elif lcase (state.altair_commodity) = \"non-lethal weapons\":\r\n   armas no letales\r\n|elif lcase (state.altair_commodity) = \"personal weapons\":\r\n   armas personales\r\n|elif lcase (state.altair_commodity) = \"reactive armour\":\r\n   blindaje reactivo\r\n|elif lcase (state.altair_commodity) = \"battle weapons\":\r\n   armas de guerra\r\n|elif lcase (state.altair_commodity) = \"toxic waste\":\r\n   resíduos tóxicos\r\n|elif lcase (state.altair_commodity) = \"painite\":\r\n   painita\r\n|elif lcase (state.altair_commodity) = \"limpet\":\r\n   dron\r\n|elif lcase (state.altair_commodity) = \"eranin pearl whiskey\":\r\n   whisky perlado de éranim\r\n|elif lcase (state.altair_commodity) = \"kamorin historic weapons\":\r\n   armas históricas de kamorin\r\n|elif lcase (state.altair_commodity) = \"lucan onion head\":\r\n   cebollazo de lucan\r\n|elif lcase (state.altair_commodity) = \"motrona experience jelly\":\r\n   gelatina de experiencia de dea motrona\r\n|elif lcase (state.altair_commodity) = \"onion head\":\r\n   cebollazo\r\n|elif lcase (state.altair_commodity) = \"rusani old smokey\":\r\n   old smoky de rusani\r\n|elif lcase (state.altair_commodity) = \"tarach spice\":\r\n   especia de tarach tor\r\n|elif lcase (state.altair_commodity) = \"terra mater blood bores\":\r\n   potenciadores sanguíneos de terra mater\r\n|elif lcase (state.altair_commodity) = \"wolf fesh\":\r\n   jadeo de lobo\r\n|elif lcase (state.altair_commodity) = \"wuthielo ku froth\":\r\n   espuma de wutielo ku\r\n|elif lcase (state.altair_commodity) = \"ai relics\":\r\n   reliquias de ia\r\n|elif lcase (state.altair_commodity) = \"antiquities\":\r\n   antigüedades\r\n|elif lcase (state.altair_commodity) = \"osmium\":\r\n   osmio\r\n|elif lcase (state.altair_commodity) = \"sap 8 core container\":\r\n   núcleos sap 8\r\n|elif lcase (state.altair_commodity) = \"trinkets of hidden fortune\":\r\n   baratijas de fortuna oculta\r\n|elif lcase (state.altair_commodity) = \"trade data\":\r\n   datos de comercio\r\n|elif lcase (state.altair_commodity) = \"thermal cooling units\":\r\n   unidades de enfriamiento térmico\r\n|elif lcase (state.altair_commodity) = \"skimmer components\":\r\n   componentes de deslizador\r\n|elif lcase (state.altair_commodity) = \"geological equipment\":\r\n   equipamiento geológico\r\n|elif lcase (state.altair_commodity) = \"structural regulators\":\r\n   reguladores estructurales\r\n|elif lcase (state.altair_commodity) = \"pyrophyllite\":\r\n   pirofilita\r\n|elif lcase (state.altair_commodity) = \"moissanite\":\r\n   moissanita\r\n|elif lcase (state.altair_commodity) = \"goslarite\":\r\n   goslarita\r\n|elif lcase (state.altair_commodity) = \"cryolite\":\r\n   criolita\r\n|elif lcase (state.altair_commodity) = \"thorium\":\r\n   torio\r\n|elif lcase (state.altair_commodity) = \"thallium\":\r\n   talio\r\n|elif lcase (state.altair_commodity) = \"lanthanum\":\r\n   lantano\r\n|elif lcase (state.altair_commodity) = \"bismuth\":\r\n   bismuto\r\n|elif lcase (state.altair_commodity) = \"bootleg liquor\":\r\n   licor de caña\r\n|elif lcase (state.altair_commodity) = \"meta-alloys\":\r\n   meta aleaciones\r\n|elif lcase (state.altair_commodity) = \"ceramic composites\":\r\n   compuestos cerámicos\r\n|elif lcase (state.altair_commodity) = \"evacuation shelter\":\r\n   refugio de evacuación\r\n|elif lcase (state.altair_commodity) = \"synthetic reagents\":\r\n   reagentes sintéticos\r\n|elif lcase (state.altair_commodity) = \"surface stabilisers\":\r\n   estabilizadores de superficie\r\n|elif lcase (state.altair_commodity) = \"building fabricators\":\r\n   constructores\r\n|elif lcase (state.altair_commodity) = \"landmines\":\r\n   minas terrestres\r\n|elif lcase (state.altair_commodity) = \"nerve agents\":\r\n   agentes nerviosos\r\n|elif lcase (state.altair_commodity) = \"occupied cryopod\":\r\n   cápsulas de escape ocupadas\r\n|elif lcase (state.altair_commodity) = \"muon imager\":\r\n   escáner muónico\r\n|elif lcase (state.altair_commodity) = \"lavian brandy\":\r\n   brandy laviano\r\n|elif lcase (state.altair_commodity) = \"black box\":\r\n   cajas negras\r\n|elif lcase (state.altair_commodity) = \"military plans\":\r\n   planos militares\r\n|elif lcase (state.altair_commodity) = \"ancient artefact\":\r\n   artefactos antiguos\r\n|elif lcase (state.altair_commodity) = \"rare artwork\":\r\n   arte poco común\r\n|elif lcase (state.altair_commodity) = \"experimental chemicals\":\r\n   químicos experimentales\r\n|elif lcase (state.altair_commodity) = \"prototype tech\":\r\n   prototipos tecnológicos\r\n|elif lcase (state.altair_commodity) = \"rebel transmissions\":\r\n   transmisiones rebeldes\r\n|elif lcase (state.altair_commodity) = \"technical blueprints\":\r\n   planos técnicos\r\n|elif lcase (state.altair_commodity) = \"hip 10175 bush meat\":\r\n   carne herbácea de hip 10175\r\n|elif lcase (state.altair_commodity) = \"albino quechua mammoth\":\r\n   carne de mamut albino quéchua\r\n|elif lcase (state.altair_commodity) = \"utgaroar millennial eggs\":\r\n   huevos milenarios de utgaroar\r\n|elif lcase (state.altair_commodity) = \"witchhaul kobe beef\":\r\n   carne de buey kobe de witchhaul\r\n|elif lcase (state.altair_commodity) = \"karsuki locusts\":\r\n   langostas de karsuki ti\r\n|elif lcase (state.altair_commodity) = \"giant irukama snails\":\r\n   caracoles gigantes de ikurama\r\n|elif lcase (state.altair_commodity) = \"baltah sime vacuum krill\":\r\n   krill del vacío de balta sine\r\n|elif lcase (state.altair_commodity) = \"ceti rabbits\":\r\n   conejos de ceti\r\n|elif lcase (state.altair_commodity) = \"kachirigin filter leeches\":\r\n   sanguijuelas filtradoras de kachigirin\r\n|elif lcase (state.altair_commodity) = \"lyrae weed\":\r\n   mala hierba de lyrae\r\n|elif lcase (state.altair_commodity) = \"borasetani pathogenetics\":\r\n   patógenos de borasetani\r\n|elif lcase (state.altair_commodity) = \"hip 118311 swarm\":\r\n   suarm de hip 118311\r\n|elif lcase (state.altair_commodity) = \"kongga ale\":\r\n   cerveza de konga\r\n|elif lcase (state.altair_commodity) = \"alacarakmo skin art\":\r\n   tatuajes de alacarakmo\r\n|elif lcase (state.altair_commodity) = \"eleu thermals\":\r\n   tejidos térmicos de eleu\r\n|elif lcase (state.altair_commodity) = \"eshu umbrellas\":\r\n   paráguas de esu\r\n|elif lcase (state.altair_commodity) = \"karetii couture\":\r\n   alta costura de karetii\r\n|elif lcase (state.altair_commodity) = \"njangari saddles\":\r\n   sillas de montar de niangari\r\n|elif lcase (state.altair_commodity) = \"any na coffee\":\r\n   café de any na\r\n|elif lcase (state.altair_commodity) = \"cd-75 kitten brand coffee\":\r\n   café marca kitten de cd-75\r\n|elif lcase (state.altair_commodity) = \"cafe yaupon de goman\":\r\n   café yaupon de gomán\r\n|elif lcase (state.altair_commodity) = \"volkhab bee drones\":\r\n   abejas mecánicas de volkhab\r\n|elif lcase (state.altair_commodity) = \"kinago violins\":\r\n   violines de kinago\r\n|elif lcase (state.altair_commodity) = \"nguna modern antiques\":\r\n   antiguedades modernas de enguna\r\n|elif lcase (state.altair_commodity) = \"rajukru multi-stoves\":\r\n   multi estufas de rajucru\r\n|elif lcase (state.altair_commodity) = \"tiolce waste2paste units\":\r\n   pastaplasta de tiolce\r\n|elif lcase (state.altair_commodity) = \"chi eridani marine paste\":\r\n   pasta marina de chi eridani\r\n|elif lcase (state.altair_commodity) = \"esuseku caviar\":\r\n   caviar de esuseku\r\n|elif lcase (state.altair_commodity) = \"live hecate sea worms\":\r\n   gusanos marinos de hécate\r\n|elif lcase (state.altair_commodity) = \"helvetitj pearls\":\r\n   perlas de helvetiti\r\n|elif lcase (state.altair_commodity) = \"hip proto-squid\":\r\n   protocalamar de hip 41181\r\n|elif lcase (state.altair_commodity) = \"coquim spongiform victuals\":\r\n   víveres espongiformes de coquim\r\n|elif lcase (state.altair_commodity) = \"eden apples of aerial\":\r\n   manzanas del edén de aerial\r\n|elif lcase (state.altair_commodity) = \"neritus berries\":\r\n   bayas de neritus\r\n|elif lcase (state.altair_commodity) = \"ochoeng chillies\":\r\n   chiles de ochoeng\r\n|elif lcase (state.altair_commodity) = \"deuringas truffles\":\r\n   trúfas de deuringas\r\n|elif lcase (state.altair_commodity) = \"hr 7221 wheat\":\r\n   trigo de hr 7221\r\n|elif lcase (state.altair_commodity) = \"jaroua rice\":\r\n   arroz de jaroua\r\n|elif lcase (state.altair_commodity) = \"belalans ray leather\":\r\n   cuero de raya de belaláns\r\n|elif lcase (state.altair_commodity) = \"damna carapaces\":\r\n   caparazones de damna\r\n|elif lcase (state.altair_commodity) = \"rapa bao snake skins\":\r\n   pieles de serpiente de rapa bao\r\n|elif lcase (state.altair_commodity) = \"vanayequi ceratomorpha fur\":\r\n   piel de ceratomorfo d vanayequi\r\n|elif lcase (state.altair_commodity) = \"bast snake gin\":\r\n   elixír de serpiende de bast\r\n|elif lcase (state.altair_commodity) = \"thrutis cream\":\r\n   crema de zrutis\r\n|elif lcase (state.altair_commodity) = \"wulpa hyperbore systems\":\r\n   sistema de hipertaladros de wulpa\r\n|elif lcase (state.altair_commodity) = \"aganippe rush\":\r\n   incrementador de aganippe\r\n|elif lcase (state.altair_commodity) = \"holva duelling blades\":\r\n   espadas de duelo de holva\r\n|elif lcase (state.altair_commodity) = \"gilya signature weapons\":\r\n   armas personalizables de yilia\r\n|elif lcase (state.altair_commodity) = \"delta phoenicis palms\":\r\n   palmeras de delta phoenicis\r\n|elif lcase (state.altair_commodity) = \"toxandji virocide\":\r\n   virocida de toxandyi\r\n|elif lcase (state.altair_commodity) = \"xihe biomorphic companions\":\r\n   mascotas biomórficas de xihe\r\n|elif lcase (state.altair_commodity) = \"sanuma decorative meat\":\r\n   carne artística de sanuma\r\n|elif lcase (state.altair_commodity) = \"ethgreze tea buds\":\r\n   brotes de té de ethgreze\r\n|elif lcase (state.altair_commodity) = \"ceremonial heike tea\":\r\n   té ceremonial de heike\r\n|elif lcase (state.altair_commodity) = \"tanmark tranquil tea\":\r\n   té relajante de tanmark\r\n|elif lcase (state.altair_commodity) = \"az cancri formula 42\":\r\n   fórmula 42 de az cancri\r\n|elif lcase (state.altair_commodity) = \"kamitra cigars\":\r\n   puros de kamitra\r\n|elif lcase (state.altair_commodity) = \"yaso kondi leaf\":\r\n   hojas de yaso kondi\r\n|elif lcase (state.altair_commodity) = \"chateau de aegaeon\":\r\n   sható de aegaeon\r\n|elif lcase (state.altair_commodity) = \"waters of shintara\":\r\n   aguas de shinrarta desra\r\n|elif lcase (state.altair_commodity) = \"ophiuch exino artefacts\":\r\n   artefactos de los ófiuch exino\r\n|elif lcase (state.altair_commodity) = \"aepyornis egg\":\r\n   huevo de aepyornis\r\n|elif lcase (state.altair_commodity) = \"saxon wine\":\r\n   vino sajón\r\n|elif lcase (state.altair_commodity) = \"centauri mega gin\":\r\n   ginebra mega de alfa centauri\r\n|elif lcase (state.altair_commodity) = \"anduliga fire works\":\r\n   fuegos artificiales de anduliga\r\n|elif lcase (state.altair_commodity) = \"banki amphibious leather\":\r\n   cuero anfíbio de banki\r\n|elif lcase (state.altair_commodity) = \"cherbones blood crystals\":\r\n   cristales de sangre de cherbones\r\n|elif lcase (state.altair_commodity) = \"geawen dance dust\":\r\n    polvo de baile de yiawen\r\n|elif lcase (state.altair_commodity) = \"gerasian gueuze beer\":\r\n    cerveza gerasiana gueuze\r\n|elif lcase (state.altair_commodity) = \"haidne black brew\":\r\n    infusión negra de haidne\r\n|elif lcase (state.altair_commodity) = \"havasupai dream catcher\":\r\n    atrapasueños de havasupai\r\n|elif lcase (state.altair_commodity) = \"burnham bile distillate\":\r\n    licor bilioso de barnjam\r\n|elif lcase (state.altair_commodity) = \"hip organophosphates\":\r\n    organofosfatos de hip 80364\r\n|elif lcase (state.altair_commodity) = \"jaradharre puzzle box\":\r\n    rompecabezas de yaradjarre\r\n|elif lcase (state.altair_commodity) = \"koro kung pellets\":\r\n    gránulos de koro kung\r\n|elif lcase (state.altair_commodity) = \"void extract coffee\":\r\n    extracto de café al vacío\r\n|elif lcase (state.altair_commodity) = \"honesty pills\":\r\n    píldoras de la honestidad\r\n|elif lcase (state.altair_commodity) = \"non euclidian exotanks\":\r\n    exotánques no euclídeos\r\n|elif lcase (state.altair_commodity) = \"ltt hypersweet\":\r\n    hiperdulce ltt\r\n|elif lcase (state.altair_commodity) = \"mechucos high tea\":\r\n    alto té de mechucos\r\n|elif lcase (state.altair_commodity) = \"medb starlube\":\r\n    lubricante de medb\r\n|elif lcase (state.altair_commodity) = \"mokojing beast feast\":\r\n    banquete bestial de mojoyín\r\n|elif lcase (state.altair_commodity) = \"mukusubii chitin-os\":\r\n    quitiaros de mukusubii\r\n|elif lcase (state.altair_commodity) = \"mulachi giant fungus\":\r\n    hongo gigante de mulachi\r\n|elif lcase (state.altair_commodity) = \"ngadandari fire opals\":\r\n    ópalos ígneos de engandari\r\n|elif lcase (state.altair_commodity) = \"tiegfries synth silk\":\r\n    seda sintética de tiegfries\r\n|elif lcase (state.altair_commodity) = \"uzomoku low-g wings\":\r\n    alas de baja gravedad de uzomoku\r\n|elif lcase (state.altair_commodity) = \"v herculis body rub\":\r\n    exfoliantes de v1090 herculis\r\n|elif lcase (state.altair_commodity) = \"wheemete wheat cakes\":\r\n    pasteles de trigo de Wiimete\r\n|elif lcase (state.altair_commodity) = \"vega slimweed\":\r\n    planta parásita de vega\r\n|elif lcase (state.altair_commodity) = \"altairian skin\":\r\n    piel altairiana\r\n|elif lcase (state.altair_commodity) = \"pavonis ear grubs\":\r\n    larvorejas de pavonis\r\n|elif lcase (state.altair_commodity) = \"jotun mookah\":\r\n    muka de jotún\r\n|elif lcase (state.altair_commodity) = \"giant verrix\":\r\n    verrix gigante\r\n|elif lcase (state.altair_commodity) = \"indi bourbon\":\r\n    bourbon de épsilon indi\r\n|elif lcase (state.altair_commodity) = \"arouca conventual sweets\":\r\n    dulces conventuales de arouca\r\n|elif lcase (state.altair_commodity) = \"tauri chimes\":\r\n    carillones de 39 tauri\r\n|elif lcase (state.altair_commodity) = \"zeessze ant grub glue\":\r\n    pegamento de larvas de hormiga de siisxe\r\n|elif lcase (state.altair_commodity) = \"pantaa prayer sticks\":\r\n    palos ceremoniales de los pantaa\r\n|elif lcase (state.altair_commodity) = \"fujin tea\":\r\n    té de fuyín\r\n|elif lcase (state.altair_commodity) = \"chameleon cloth\":\r\n    ropa mimética\r\n|elif lcase (state.altair_commodity) = \"orrerian vicious brew\":\r\n    fermento vicioso orreriano\r\n|elif lcase (state.altair_commodity) = \"uszaian tree grub\":\r\n    larva de árbol uszaiana\r\n|elif lcase (state.altair_commodity) = \"momus bog spaniel\":\r\n    spaniel de pantano de momus rich\r\n|elif lcase (state.altair_commodity) = \"diso ma corn\":\r\n    maíz ma de diso\r\n|elif lcase (state.altair_commodity) = \"leestian evil juice\":\r\n    zumo diabólico leestiano\r\n|elif lcase (state.altair_commodity) = \"azure milk\":\r\n    leche de azure\r\n|elif lcase (state.altair_commodity) = \"leathery eggs\":\r\n    huevos de lécery\r\n|elif lcase (state.altair_commodity) = \"alya body soap\":\r\n    jabón corporal de alya\r\n|elif lcase (state.altair_commodity) = \"vidavantian lace\":\r\n    cordón vidavantino\r\n|elif lcase (state.altair_commodity) = \"jackes quinentian still\":\r\n    alambique yaks quinentian\r\n|elif lcase (state.altair_commodity) = \"soontill relics\":\r\n    reliquia de los soontill\r\n|elif lcase (state.altair_commodity) = \"unknown artefact\":\r\n    artefacto desconocido\r\n|elif lcase (state.altair_commodity) = \"hafnium 178\":\r\n    hafnio 178\r\n|elif lcase (state.altair_commodity) = \"military intelligence\":\r\n    inteligencia militar\r\n|elif lcase (state.altair_commodity) = \"the hutton mug\":\r\n    taza de játon\r\n|elif lcase (state.altair_commodity) = \"sothis crystalline gold\":\r\n    oro cristalino de sothis\r\n|elif lcase (state.altair_commodity) = \"salvageable wreckage\":\r\n    restos de accidentes\r\n|elif lcase (state.altair_commodity) = \"encrypted data storage\":\r\n    almacén de datos encriptado\r\n|elif lcase (state.altair_commodity) = \"personal effects\":\r\n    efectos personales\r\n|elif lcase (state.altair_commodity) = \"commercial samples\":\r\n    muestras comerciales\r\n|elif lcase (state.altair_commodity) = \"tactical data\":\r\n    datos tácticos\r\n|elif lcase (state.altair_commodity) = \"assault plans\":\r\n    planes de asalto\r\n|elif lcase (state.altair_commodity) = \"encrypted correspondence\":\r\n    correspondencia encriptada\r\n|elif lcase (state.altair_commodity) = \"dyplomatic bag\":\r\n    valija diplomática\r\n|elif lcase (state.altair_commodity) = \"scientific research\":\r\n    investigaciones científicas\r\n|elif lcase (state.altair_commodity) = \"scientific samples\":\r\n    muestras científicas\r\n|elif lcase (state.altair_commodity) = \"political prisoner\":\r\n    prisioneros políticos\r\n|elif lcase (state.altair_commodity) = \"hostage\":\r\n    rehenes\r\n|elif lcase (state.altair_commodity) = \"geological samples\":\r\n    equipamiento geológico\r\n|elif lcase (state.altair_commodity) = \"master chefs\":\r\n    maestros de cocina\r\n|elif lcase (state.altair_commodity) = \"crystalline spheres\":\r\n    esferas cristalinas\r\n|elif lcase (state.altair_commodity) = \"taaffeite\":\r\n    taafeíta\r\n|elif lcase (state.altair_commodity) = \"jadeite\":\r\n    jadeíta\r\n|elif lcase (state.altair_commodity) = \"unstable data core\":\r\n    unidad de datos inestable\r\n|elif lcase (state.altair_commodity) = \"onionhead alpha strain\":\r\n    cepa alfa de cebollazo\r\n|elif lcase (state.altair_commodity) = \"occupied escape pod\":\r\n    cápsula de escape ocupada\r\n|elif lcase (state.altair_commodity) = \"water\":\r\n    agua\r\n|elif lcase (state.altair_commodity) = \"onionhead beta strain\":\r\n    cepa beta de cebollazo\r\n|elif lcase (state.altair_commodity) = \"praseodymium\":\r\n    praseodímio\r\n|elif lcase (state.altair_commodity) = \"bromellite\":\r\n    bromelita\r\n|elif lcase (state.altair_commodity) = \"samarium\":\r\n    samario\r\n|elif lcase (state.altair_commodity) = \"low temperature diamonds\":\r\n    diamantes de baja temperatura\r\n|elif lcase (state.altair_commodity) = \"hydrogen peroxide\":\r\n    peróxido de hidrógeno\r\n|elif lcase (state.altair_commodity) = \"liquid oxygen\":\r\n    oxígeno líquido\r\n|elif lcase (state.altair_commodity) = \"methanol monohydrate\":\r\n    monohidrato de metanol\r\n|elif lcase (state.altair_commodity) = \"lithium hydroxide\":\r\n    hidróxido de litio\r\n|elif lcase (state.altair_commodity) = \"methane clathrate\":\r\n    hidrato de metano\r\n|elif lcase (state.altair_commodity) = \"insulating membrane\":\r\n    membrana aislante\r\n|elif lcase (state.altair_commodity) = \"cmm composite\":\r\n    compuestos cmm\r\n|elif lcase (state.altair_commodity) = \"micro-weave cooling hoses\":\r\n    mangueras de refrigeración de micro tejidos\r\n|elif lcase (state.altair_commodity) = \"neofabric insulation\":\r\n    neotejido aislante\r\n|elif lcase (state.altair_commodity) = \"articulation motors\":\r\n    motores de articulación\r\n|elif lcase (state.altair_commodity) = \"hn shock mount\":\r\n    suspensión hn\r\n|elif lcase (state.altair_commodity) = \"emergency power cells\":\r\n    células de energía de emergencia\r\n|elif lcase (state.altair_commodity) = \"power converter\":\r\n    convertidor de energía\r\n|elif lcase (state.altair_commodity) = \"energy grid assembly\":\r\n    red de energía\r\n|elif lcase (state.altair_commodity) = \"power transfer bus\":\r\n    conductores de transferencia de energía\r\n|elif lcase (state.altair_commodity) = \"radiation baffle\":\r\n    deflector de radiación\r\n|elif lcase (state.altair_commodity) = \"exhaust manifold\":\r\n    colector de escape\r\n|elif lcase (state.altair_commodity) = \"reinforced mounting plate\":\r\n    placa de anclaje reforzada\r\n|elif lcase (state.altair_commodity) = \"heatsink interlink\":\r\n    interconectores de eyector térmico\r\n|elif lcase (state.altair_commodity) = \"magnetic emitter coil\":\r\n    bobina de emisión magnética\r\n|elif lcase (state.altair_commodity) = \"modular terminals\":\r\n    terminales modulares\r\n|elif lcase (state.altair_commodity) = \"nanobreakers\":\r\n    nanorrompedores\r\n|elif lcase (state.altair_commodity) = \"telemetry suite\":\r\n    paquete de telemetría\r\n|elif lcase (state.altair_commodity) = \"micro controllers\":\r\n    microcontroladores\r\n|elif lcase (state.altair_commodity) = \"ion distributor\":\r\n    distribuidor de iones\r\n|elif lcase (state.altair_commodity) = \"hardware diagnostic sensor\":\r\n    sensor de diagnóstico de hardware\r\n|elif lcase (state.altair_commodity) = \"conductive fabrics\":\r\n    tejidos conductivos\r\n|elif lcase (state.altair_commodity) = \"military grade fabrics\":\r\n    tejido de categoría militar\r\n|elif lcase (state.altair_commodity) = \"advanced medicines\":\r\n    medicinas avanzadas\r\n|elif lcase (state.altair_commodity) = \"medical diagnostic equipment\":\r\n    equipo de diagnóstico médico\r\n|elif lcase (state.altair_commodity) = \"survival equipment\":\r\n    equipo de supervivencia\r\n|elif lcase (state.altair_commodity) = \"data core\":\r\n    núcleo de datos\r\n|elif lcase (state.altair_commodity) = \"galactic travel guide\":\r\n    guia de viaje galáctico\r\n|elif lcase (state.altair_commodity) = \"mysterious idol\":\r\n    ídolo misterioso\r\n|elif lcase (state.altair_commodity) = \"prohibited research materials\":\r\n    materiales de investigación prohibida\r\n|elif lcase (state.altair_commodity) = \"antimatter containment unit\":\r\n    unidad de confinamiento de antimateria\r\n|elif lcase (state.altair_commodity) = \"space pioneer relics\":\r\n    relíquias de pioneros espaciales\r\n|elif lcase (state.altair_commodity) = \"fossil remnants\":\r\n    restos de fósiles\r\n|elif lcase (state.altair_commodity) = \"unknown probe\":\r\n    sonda desconocida\r\n|elif lcase (state.altair_commodity) = \"precious gems\":\r\n    piedras preciosas\r\n|elif lcase (state.altair_commodity) = \"coolinghoses\":\r\n    mangueras de refrigeración\r\n\r\n|else:\r\n   {state.altair_commodity}\r\n}",
      "default": false,
      "name": "Altair commodities",
      "description": "Función para traducir los nombres de las commodities del mercado"
    },
    "Altair material informacion": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch material from state }\r\n{set material to state.material}\r\n{set materialspanish to material}\r\n{_ función para traducción inversa del español al inglés del nombre del material que hemos pasado desde voiceattack en español para que pueda trabajar con él internamente }\r\n    \r\n    {SetState(\"altair_material\", material)}\r\n    {F(\"Altair materials inversa\")} \r\n    {set material to state.altair_material2}\r\n   \r\n{if material:\r\n    {_ Fetch full material details }\r\n    {set material to MaterialDetails(material)}\r\n\r\n\r\n\r\n    {_ Context }\r\n    {SetState('eddi_context_last_subject', 'material')}\r\n    {SetState('eddi_context_material_name', material.name)}\r\n}\r\n\r\n{if !material:\r\n    {_ Fetch from context }\r\n    {set material to MaterialDetails(state.eddi_context_material_name)}\r\n}\r\n\r\n{OneOf ('Accediendo a base de datos','localizando información')}. {materialspanish}.\r\n{if material.name:\r\n    {if lcase (material.name) = \"yttrium\":\r\n      Encontrado en superficies planetarias. Símbolo Y griega, número atómico 39, Punto de fusión 1.799L. El Ytrio se utiliza frecuentemente como fortalecedor de varios componentes. También tiene usos en medicina y superconductores.\r\n    |elif lcase (material.name) = \"zirconium\":\r\n      Encontrado en superficies planetarias y asteroides. Símbolo Zr, número atómico 40, Punto de fusión 2.128K. Como metal el Circonio satisface varias necesidades pero se utiliza principalmente como componente de elementos que están sometidos a altas temperaturas.\r\n    |elif lcase (material.name) = \"sulphur\":\r\n      Encontrado en superficies planetarias y asteroides. Símbolo S, número atómico 16. Punto de fusión 388K. El azufre se utiliza principalmente como precursor de otros químicos, como el ácido sulfúrico. También es un elemento clave en aplicaciones químicas, así como en fertilizantes.\r\n    |elif lcase (material.name) = lcase (\"Aberrant Shield Pattern Analysis\"):\r\n      Recogido durante un escáner básico. obtenido frecuentemente de naves de combate. Los escudos de energía están formados por complejos campos entrelazados cuya base matemática es bien conocida. Sin embargo los análisis a veces pueden indicar ciertos comportamientos que no encajan correctamente con el módulo seleccionado. Estos suelen resultar ser en general datos erróneos, pero hay una oscura rama de investigación considerando otras posibles causas.\r\n    |elif lcase (material.name) = lcase (\"Abnormal Compact Emissions Data\"):\r\n      Descubierto en balizas de datos privadas recuperadas en espacio profundo. Se sabe que pueden ser recuperados de señales. Muchos sistemas comprimen sus transmisiones de datos de manera que pueden llenar rápidamente cantidades masivas de almacenamiento de datos. Excepciones preseleccionadas dentro de esos datos suelen conservarse en formatos completos que pueden ser de interés para ciertas personas y organizaciones.\r\n    |elif lcase (material.name) = lcase (\"Adaptive Encryptors Capture\"):\r\n      Descubiertos en balizas de datos privadas recuperadas en el espacio profundo. Se sabe que pueden ser recuperados de señales. Los sistemas de encriptado polimórficos constituyen un sistema de tecnología punta para encriptado de datos que se considera intrazable. Hay rumores de que el sistema pueda tener ciertos puntos débiles en la transición de estado con la recodificación, por lo que las capturas de estos cambios son de mucho interés para ciertas personas.\r\n    |elif lcase (material.name) = lcase (\"Anomalous Bulk Scan Data\"):\r\n      Recogido durante un escáner básico: Obtenido frecuentemente de naves de carga. Los archivos de datos suelen seguir formatos predecibles, aunque en conjuntos de datos de gran tamaño se pueden encontrar a veces componentes individuales que difieren de los patrones de análisis habituales, y que pueden resultar muy valiosos para las personas apropiadas.\r\n    |elif lcase (material.name) = lcase (\"Anomalous FSD Telemetry\"):\r\n      Recogido de un escáner de estelas de alta energía con un escáner de estelas. Los motores de distorsión son tecnología relativamente moderna y, con ayuda de su software de control, aún se pueden encontrar en su telemetría ciertas anomalías interesantes.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n|else:\r\n    No tengo ninguna información acerca de ese material.\r\n}.\r\n",
      "default": false,
      "name": "Altair material informacion",
      "description": "Suministra información detallada sobre el material dado"
    },
    "Altair material locations": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ EDDI obtiene estos datos de esta dirección http://api.eddp.co/_materiallocations } \r\n\r\n\r\n{if lcase (state.altair_locations) = \"obtained by scanning system authority vessels.\":\r\n   Se obtiene escaneando naves de la autoridad del sistema.\r\n|elif lcase (state.altair_locations) = \"obtained by scanning vessels.\":\r\n   Se obtiene escaneando naves.\r\n|elif lcase (state.altair_locations) = \"obtained by scanning satellites orbiting installations and populated earth-like worlds.\":\r\n   Se obtiene escaneando satélites que orbitan instalaciones y mundos tipo tierra poblados.\r\n|elif lcase (state.altair_locations) = \"obtained by scanning frame shift high wakes of vessels.\":\r\n   Se obtiene escaneando estelas de distorsión de alta intensidad de naves.\r\n|elif lcase (state.altair_locations) = \"obtained from surface prospecting or asteroid mining.\":\r\n   Se obtiene mediante prospección de superficie o minando asteroides.\r\n|elif lcase (state.altair_locations) = \"obtained by scanning datalinks in ground bases.\":\r\n   Se obtiene escaneando enlaces de datos en bases de superficie.\r\n|elif lcase (state.altair_locations) = \"obtained as a mission reward.\":\r\n   Se obtiene como recompensa de misión.\r\n|elif lcase (state.altair_locations) = \"obtained from the wreckage of haulage vessels.\":\r\n   Se obtiene de los restos de naves de transporte.\r\n|elif lcase (state.altair_locations) = \"obtained from the wreckage of large haulage vessels, commonly type-7s and type 9s.  these are also available at dav's hope.\":\r\n   Se obtiene de los restos de grandes naves de transporte, normalmente tipo 7 y tipo 9. También hay disponibles en Deivs joup.\r\n|elif lcase (state.altair_locations) = \"obtained by scanning large haulage vessels, commonly type-7s and type-9s .\":\r\n   Se obtiene de los restos de grandes naves de transporte, normalmente tipo 7 y tipo 9.\r\n|elif lcase (state.altair_locations) = \"obtained from the wreckage of combat vessels.  these are also available at dav's hope.\":\r\n   Se obtiene de los restos de naves de combate. También hay disponibles en Deivs joup.\r\n|elif lcase (state.altair_locations) = \"obtained from the wreckage of combat vessels.\":\r\n   Se obtiene de los restos de naves de combate.\r\n|elif lcase (state.altair_locations) = \"obtained from the wreckage of large haulage and passenger vessels such as type-9s and beluga liners.  these are also available at dav's hope.\":\r\n   Se obtiene de los restos de grandes naves de transporte y cruceros de pasajeros, como las tipo 9 y las beluga. También hay disponibles en Deivs joup.\r\n|elif lcase (state.altair_locations) = \"obtained in high-grade signal sources in systems under federal control.\":\r\n   Se obtiene en señales de alto nivel en sistemas bajo control federal.\r\n|elif lcase (state.altair_locations) = \"obtained from the wreckage of combat and system authority vessels.\":\r\n   Se obtiene de los restos de naves de combate y de autoridad del sistema.\r\n|elif lcase (state.altair_locations) = \"obtained from the wreckage of small combat vessels.\":\r\n   Se obtiene de los restos de naves de combate pequeñas.\r\n|elif lcase (state.altair_locations) = \"obtained from the wreckage of small combat vessels.  these are also available at dav's hope.\":\r\n   Se obtiene de los restos de naves de combate pequeñas. También hay disponibles en Deivs joup.\r\n|elif lcase (state.altair_locations) = \"obtained from the wreckage of large combat vessels, commonly anacondas and federal corvettes.  these are also available at dav's hope.\":\r\n   Se obtiene de los restos de grandes naves de combate, normalmente anacondas y corvetas federales. También hay disponibles en Deivs joup.\r\n|elif lcase (state.altair_locations) = \"obtained from the wreckage of large combat vessels, commonly anacondas and federal corvettes.\":\r\n   Se obtiene de los restos de grandes naves de combate, normalmente anacondas y corvetas federales.\r\n|elif lcase (state.altair_locations) = \"obtained in high-grade signal sources in systems under imperial control.\":\r\n   Se obtiene en señales de alto nivel en sistemas bajo control imperial.\r\n|elif lcase (state.altair_locations) = \"obtained in high-grade signal sources in civil unrest systems.\":\r\n   Se obtiene en señales de alto nivel en sistemas con disturbios civiles.\r\n|elif lcase (state.altair_locations) = \"obtained from the wreckage of small haulage vessels.  these are also available at dav's hope.\":\r\n   Se obtiene de los restos de naves de transporte pequeñas. También hay disponibles en Deivs joup\r\n|elif lcase (state.altair_locations) = \"obtained in high-grade signal sources in war or civil war systems.\":\r\n   Se obtiene en señales de alto nivel en sistemas en guerra o guerra civil.\r\n|elif lcase (state.altair_locations) = \"obtained by scanning datalinks in ground bases or scanning private data beacons in encoded signal sources.\":\r\n   Se obtiene escaneando enlaces de datos en bases de superficie o escaneando balizas privadas de datos en fuentes de señales codificadas.\r\n|elif lcase (state.altair_locations) = \"obtained in high-grade signal sources in outbreak systems.\":\r\n   Se obtiene en señales de alto nivel en sistemas con epidémias.\r\n|elif lcase (state.altair_locations) = \"obtained in high-grade signal sources federal control.\":\r\n   Se obtiene en señales de alto nivel en sistemas bajo control federal.\r\n|elif lcase (state.altair_locations) = \"obtained in high-grade signal sources in boom systems.\":\r\n   Se obtiene en señales de alto nivel en sistemas en auge.\r\n|elif lcase (state.altair_locations) = \"obtained in high-grade signal sources in boom systems.\":\r\n   Se obtiene en señales de alto nivel en sistemas en auge.\r\n|elif lcase (state.altair_locations) = \"obtained from the wreckage of ???. these are also available at dav's hope.\":\r\n   Se obtiene de restos de naves pero no tengo suficiente información sobre que tipo de naves. También pueden encontrarse disponibles en deivs joup.\r\n|elif lcase (state.altair_locations) = \"obtained by scanning haulage vessels.\":\r\n   Se obtiene escaneando naves de transporte.\r\n|else:\r\n   no se encuentra en mi banco de datos de localizaciones.\r\n }\r\n",
      "default": false,
      "name": "Altair material locations",
      "description": "Funcion para traducir las localizaciones donde obtener los materiales"
    },
    "Altair materials": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{if lcase (state.altair_material) = \"yttrium\":\r\n   ytrio\r\n|elif lcase (state.altair_material) = \"zirconium\":\r\n   circonio\r\n|elif lcase (state.altair_material) = \"sulphur\":\r\n   azufre\r\n|elif lcase (state.altair_material) = \"carbon\":\r\n   carbono\r\n|elif lcase (state.altair_material) = \"phosphorus\":\r\n   fósforo\r\n|elif lcase (state.altair_material) = \"selenium\":\r\n   selenio\r\n|elif lcase (state.altair_material) = \"vanadium\":\r\n   vanadio\r\n|elif lcase (state.altair_material) = \"tungsten\":\r\n   tungsteno\r\n|elif lcase (state.altair_material) = \"tin\":\r\n   estaño\r\n|elif lcase (state.altair_material) = \"tellurium\":\r\n   teluro\r\n|elif lcase (state.altair_material) = \"technetium\":\r\n   tecnecio\r\n|elif lcase (state.altair_material) = \"ruthenium\":\r\n   rutenio\r\n|elif lcase (state.altair_material) = \"polonium\":\r\n   polonio\r\n|elif lcase (state.altair_material) = \"niobium\":\r\n   niobio\r\n|elif lcase (state.altair_material) = \"molybdenum\":\r\n   molibdeno\r\n|elif lcase (state.altair_material) = \"mercury\":\r\n   mercurio\r\n|elif lcase (state.altair_material) = \"manganese\":\r\n   manganeso\r\n|elif lcase (state.altair_material) = \"iron\":\r\n   hierro\r\n|elif lcase (state.altair_material) = \"germanium\":\r\n   germanio\r\n|elif lcase (state.altair_material) = \"chromium\":\r\n   cromo\r\n|elif lcase (state.altair_material) = \"cadmium\":\r\n   cadmio\r\n|elif lcase (state.altair_material) = \"arsenic\":\r\n   arsénico\r\n|elif lcase (state.altair_material) = \"antimony\":\r\n   antimonio\r\n|elif lcase (state.altair_material) = \"anomalous bulk scan data\":\r\n   datos de escáner en bruto anómalos\r\n|elif lcase (state.altair_material) = \"anomalous fsd telemetry\":\r\n   telemetría de MDD anómala\r\n|elif lcase (state.altair_material) = \"aberrant shield pattern analysis\":\r\n   Análisis de patrones de escudo aberrantes\r\n|elif lcase (state.altair_material) = \"abnormal compact emissions data\":\r\n   Compresión de datos de transmisiones anormal\r\n|elif lcase (state.altair_material) = lcase(\"Adaptive Encryptors Capture\"):\r\n   Captura de encriptadores adaptativos\r\n|elif lcase (state.altair_material) = lcase(\"Atypical Disrupted Wake Echoes\"):\r\n   Ecos de estelas interrumpidas atípicos\r\n|elif lcase (state.altair_material) = lcase(\"Atypical Encryption Archives\"):\r\n   Archivos encriptados atípicos\r\n|elif lcase (state.altair_material) = lcase(\"Basic Conductors\"):\r\n   conductores básicos\r\n|elif lcase (state.altair_material) = lcase(\"Biotech Conductors\"):\r\n   Conductores biotecnológicos\r\n|elif lcase (state.altair_material) = lcase(\"Chemical Distillery\"):\r\n   destilería química\r\n|elif lcase (state.altair_material) = lcase(\"Chemical Manipulators\"):\r\n   manipuladores químicos\r\n|elif lcase (state.altair_material) = lcase(\"Chemical Processors\"):\r\n   procesadores químicos\r\n|elif lcase (state.altair_material) = lcase(\"Chemical Storage Units\"):\r\n   Unidades de almacenamiento químico\r\n|elif lcase (state.altair_material) = lcase(\"Classified Scan Databanks\"):\r\n   Datos de escáner clasificados\r\n|elif lcase (state.altair_material) = lcase(\"Classified Scan Fragment\"):\r\n   Fragmento de escáner clasificado\r\n|elif lcase (state.altair_material) = lcase(\"Compact Composites\"):\r\n   Compuestos compactos\r\n|elif lcase (state.altair_material) = lcase(\"Compound Shielding\"):\r\n   Escudos compuestos\r\n|elif lcase (state.altair_material) = lcase(\"Conductive Ceramics\"):\r\n   cerámicas conductivas\r\n|elif lcase (state.altair_material) = lcase(\"Conductive Components\"):\r\n   componentes conductivos\r\n|elif lcase (state.altair_material) = lcase(\"Conductive Polymers\"):\r\n   polímeros conductivos\r\n|elif lcase (state.altair_material) = lcase(\"Configurable Components\"):\r\n   componentes configurables\r\n|elif lcase (state.altair_material) = lcase(\"Core Dynamics Composites\"):\r\n   Compuestos de Core Dynamics\r\n|elif lcase (state.altair_material) = lcase(\"Cracked Industrial Firmware\"):\r\n   Firmware industrial pirateado\r\n|elif lcase (state.altair_material) = lcase(\"Crystal Shards\"):\r\n   piedras de cristal\r\n|elif lcase (state.altair_material) = lcase(\"Datamined Wake Exceptions\"):\r\n   excepciones en análisis de estelas\r\n|elif lcase (state.altair_material) = lcase(\"Decoded Emission Data\"):\r\n   Datos de emisión descodificados\r\n|elif lcase (state.altair_material) = lcase(\"Distorted Shield Cycle Recordings\"):\r\n   Registros de ciclo de escudo distorsionados\r\n|elif lcase (state.altair_material) = lcase(\"Divergent Scan Data\"):\r\n   Datos de escáner divergentes\r\n|elif lcase (state.altair_material) = lcase(\"Eccentric Hyperspace Trajectories\"):\r\n   Trayectorias de hiperespacio excéntricas\r\n|elif lcase (state.altair_material) = lcase(\"Electrochemical Arrays\"):\r\n   Matriz electroquímica\r\n|elif lcase (state.altair_material) = lcase(\"Exceptional Scrambled Emission Data\"):\r\n   datos de transmisiones codificadas excepcionales\r\n|elif lcase (state.altair_material) = lcase(\"Exquisite Focus Crystals\"):\r\n   cristales de enfoque exquisitos\r\n|elif lcase (state.altair_material) = lcase(\"Filament Composites\"):\r\n   Compuestos de filamentos\r\n|elif lcase (state.altair_material) = lcase(\"Flawed Focus Crystals\"):\r\n   Cristales de convergencia imperfectos\r\n|elif lcase (state.altair_material) = lcase(\"Focus Crystals\"):\r\n   cristales de enfoque\r\n|elif lcase (state.altair_material) = lcase(\"Galvanising Alloys\"):\r\n   Aleaciones galvanizadas\r\n|elif lcase (state.altair_material) = lcase(\"Grid Resistors\"):\r\n   Red resistiva\r\n|elif lcase (state.altair_material) = lcase(\"Heat Conduction Wiring\"):\r\n   cableado de conducción calorífica\r\n|elif lcase (state.altair_material) = lcase(\"Heat Dispersion Plate\"):\r\n   placa de dispersión de calor\r\n|elif lcase (state.altair_material) = lcase(\"Heat Exchangers\"):\r\n   intercambiadores de calor\r\n|elif lcase (state.altair_material) = lcase(\"Heat Resistant Ceramics\"):\r\n   Cerámicas resistentes al calor\r\n|elif lcase (state.altair_material) = lcase(\"Heat Vanes\"):\r\n   palas térmicas\r\n|elif lcase (state.altair_material) = lcase(\"High Density Composites\"):\r\n   compuestos de alta densidad\r\n|elif lcase (state.altair_material) = lcase(\"Hybrid Capacitors\"):\r\n   capacitadores híbridos\r\n|elif lcase (state.altair_material) = lcase(\"Imperial Shielding\"):\r\n   escudos imperiales\r\n|elif lcase (state.altair_material) = lcase(\"Improvised Components\"):\r\n   componentes improvisados\r\n|elif lcase (state.altair_material) = lcase(\"Inconsistent Shield Soak Analysis\"):\r\n   Análisis de absorción de escudos inconsistente\r\n|elif lcase (state.altair_material) = lcase(\"Irregular Emission Data\"):\r\n   datos de emisión irregulares\r\n|elif lcase (state.altair_material) = lcase(\"Mechanical Components\"):\r\n   componentes mecánicos\r\n|elif lcase (state.altair_material) = lcase(\"Mechanical Equipment\"):\r\n   equipamiento mecánico\r\n|elif lcase (state.altair_material) = lcase(\"Mechanical Scrap\"):\r\n   chatarra mecánica\r\n|elif lcase (state.altair_material) = lcase(\"Military Grade Alloys\"):\r\n   aleaciones de grado militar\r\n|elif lcase (state.altair_material) = lcase(\"Military Supercapacitors\"):\r\n   supercapacitadores militares\r\n|elif lcase (state.altair_material) = lcase(\"Modified Consumer Firmware\"):\r\n   Firmware de consumo modificado\r\n|elif lcase (state.altair_material) = lcase(\"Modified Embedded Firmware\"):\r\n   Firmware integrado modificado\r\n|elif lcase (state.altair_material) = lcase(\"Open Symmetric Keys\"):\r\n   claves simétricas abiertas\r\n|elif lcase (state.altair_material) = lcase(\"Peculiar Shield Frequency Data\"):\r\n   Datos de frecuencias de escudo peculiares\r\n|elif lcase (state.altair_material) = lcase(\"Pharmaceutical Isolators\"):\r\n   Aislantes farmacéuticos\r\n|elif lcase (state.altair_material) = lcase(\"Phase Alloys\"):\r\n   Aleaciones de fase\r\n|elif lcase (state.altair_material) = lcase(\"Polymer Capacitors\"):\r\n   capacitadores de polímeros\r\n|elif lcase (state.altair_material) = lcase(\"Precipitated Alloys\"):\r\n   Aleaciones de precipitación\r\n|elif lcase (state.altair_material) = lcase(\"Proprietary Composites\"):\r\n   compuestos con patente\r\n|elif lcase (state.altair_material) = lcase(\"Proto Heat Radiators\"):\r\n   protorradiadores térmicos\r\n|elif lcase (state.altair_material) = lcase(\"Proto Light Alloys\"):\r\n   Protoaleaciones ligeras\r\n|elif lcase (state.altair_material) = lcase(\"Proto Radiolic Alloys\"):\r\n   Aleaciones protorradiadas\r\n|elif lcase (state.altair_material) = lcase(\"Refined Focus Crystals\"):\r\n   cristales de enfoque refinados\r\n|elif lcase (state.altair_material) = lcase(\"Salvaged Alloys\"):\r\n   aleaciones recuperadas\r\n|elif lcase (state.altair_material) = lcase(\"Security Firmware Patch\"):\r\n   Parche de firmware de seguridad\r\n|elif lcase (state.altair_material) = lcase(\"Shield Emitters\"):\r\n   emisor de escudos\r\n|elif lcase (state.altair_material) = lcase(\"Shielding Sensors\"):\r\n   Sensores de escudo\r\n|elif lcase (state.altair_material) = lcase(\"Specialised Legacy Firmware\"):\r\n   Firmware heredado especializado\r\n|elif lcase (state.altair_material) = lcase(\"Strange Wake Solutions\"):\r\n   Extrañas soluciones de estelas\r\n|elif lcase (state.altair_material) = lcase(\"Tagged Encryption Codes\"):\r\n   Códigos de encriptación marcados\r\n|elif lcase (state.altair_material) = lcase(\"Tempered Alloys\"):\r\n   aleaciones templadas\r\n|elif lcase (state.altair_material) = lcase(\"Thermic Alloys\"):\r\n   aleaciones térmicas\r\n|elif lcase (state.altair_material) = lcase(\"Unexpected Emission Data\"):\r\n   datos de emisión inesperados\r\n|elif lcase (state.altair_material) = lcase(\"Unidentified Scan Archives\"):\r\n   Archivos de escáner no identificados\r\n|elif lcase (state.altair_material) = lcase(\"Unknown Fragment\"):\r\n   fragmento desconocido\r\n|elif lcase (state.altair_material) = lcase(\"Untypical Shield Scans\"):\r\n   escáner de escudos atípico\r\n|elif lcase (state.altair_material) = lcase(\"Unusual Encrypted Files\"):\r\n   Ficheros encriptados inusuales\r\n|elif lcase (state.altair_material) = lcase(\"Worn Shield Emitters\"):\r\n   Emisor de escudos desgastado\r\n|else:\r\n   {state.altair_material}\r\n}",
      "default": false,
      "name": "Altair materials",
      "description": "Función para traducir los nombres de los materiales"
    },
    "Altair materials inversa": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ función para traducción inversa del español al inglés del nombre del material que hemos pasado desde voiceattack en español para que pueda trabajar con él internamente. Es necesaria para las funciones de materiales }\r\n\r\n{if lcase (state.altair_material) = \"ytrio\":\r\n   {SetState(\"altair_material2\", \"yttrium\")}\r\n|elif lcase (state.altair_material) = \"circonio\":\r\n   {SetState(\"altair_material2\", \"zirconium\")}\r\n|elif lcase (state.altair_material) = \"azufre\":\r\n   {SetState(\"altair_material2\", \"sulphur\")}\r\n|elif lcase (state.altair_material) = \"carbono\":\r\n   {SetState(\"altair_material2\", \"carbon\")}\r\n|elif lcase (state.altair_material) = \"fósforo\":\r\n   {SetState(\"altair_material2\", \"phosphorus\")}\r\n|elif lcase (state.altair_material) = \"selenio\":\r\n   {SetState(\"altair_material2\", \"selenium\")}\r\n|elif lcase (state.altair_material) = \"vanadio\":\r\n   {SetState(\"altair_material2\", \"vanadium\")}\r\n|elif lcase (state.altair_material) = \"tungsteno\":\r\n   {SetState(\"altair_material2\", \"tungsten\")}\r\n|elif lcase (state.altair_material) = \"estaño\":\r\n   {SetState(\"altair_material2\", \"tin\")}\r\n|elif lcase (state.altair_material) = \"teluro\":\r\n   {SetState(\"altair_material2\", \"tellurium\")}\r\n|elif lcase (state.altair_material) = \"tecnecio\":\r\n   {SetState(\"altair_material2\", \"technetium\")}\r\n|elif lcase (state.altair_material) = \"rutenio\":\r\n   {SetState(\"altair_material2\", \"ruthenium\")}\r\n|elif lcase (state.altair_material) = \"polonio\":\r\n   {SetState(\"altair_material2\", \"polonium\")}\r\n|elif lcase (state.altair_material) = \"niobio\":\r\n   {SetState(\"altair_material2\", \"niobium\")}\r\n|elif lcase (state.altair_material) = \"molibdeno\":\r\n   {SetState(\"altair_material2\", \"molybdenum\")}\r\n|elif lcase (state.altair_material) = \"mercurio\":\r\n   {SetState(\"altair_material2\", \"mercury\")}\r\n|elif lcase (state.altair_material) = \"manganeso\":\r\n   {SetState(\"altair_material2\", \"manganese\")}\r\n|elif lcase (state.altair_material) = \"hierro\":\r\n   {SetState(\"altair_material2\", \"iron\")}\r\n|elif lcase (state.altair_material) = \"germanio\":\r\n   {SetState(\"altair_material2\", \"germanium\")}\r\n|elif lcase (state.altair_material) = \"cromo\":\r\n   {SetState(\"altair_material2\", \"chromium\")}\r\n|elif lcase (state.altair_material) = \"cádmio\":\r\n   {SetState(\"altair_material2\", \"cadmium\")}\r\n|elif lcase (state.altair_material) = \"arsénico\":\r\n   {SetState(\"altair_material2\", \"arsenic\")}\r\n|elif lcase (state.altair_material) = \"antimonio\":\r\n   {SetState(\"altair_material2\", \"antimony\")}\r\n|elif lcase (state.altair_material) = \"datos de escáner en bruto anómalos\":\r\n   {SetState(\"altair_material2\", \"anomalous bulk scan data\")}\r\n|elif lcase (state.altair_material) = \"telemetría de mdd anómala\":\r\n   {SetState(\"altair_material2\", \"anomalous fsd telemetry\")}\r\n|elif lcase (state.altair_material) = lcase (\"Análisis de patrones de escudo aberrantes\"):\r\n   {SetState(\"altair_material2\", \"Aberrant Shield Pattern Analysis\")}\r\n|elif lcase (state.altair_material) = lcase (\"Compresión de datos de transmisiones anormal\"):\r\n   {SetState(\"altair_material2\", \"Abnormal Compact Emissions Data\")}\r\n|elif lcase (state.altair_material) = lcase (\"Captura de encriptadores adaptativos\"):\r\n   {SetState(\"altair_material2\", \"Adaptive Encryptors Capture\")}\r\n|elif lcase (state.altair_material) = lcase (\"Ecos de estelas interrumpidas atípicos\"):\r\n   {SetState(\"altair_material2\", \"Atypical Disrupted Wake Echoes\")}\r\n|elif lcase (state.altair_material) = lcase (\"Archivos encriptados atípicos\"):\r\n   {SetState(\"altair_material2\", \"Atypical Encryption Archives\")}\r\n|elif lcase (state.altair_material) = lcase (\"conductores básicos\"):\r\n   {SetState(\"altair_material2\", \"Basic Conductors\")}\r\n|elif lcase (state.altair_material) = lcase (\"Conductores biotecnológicos\"):\r\n   {SetState(\"altair_material2\", \"Biotech conductors\")}\r\n|elif lcase (state.altair_material) = lcase (\"destilería química\"):\r\n   {SetState(\"altair_material2\", \"Chemical Distillery\")}\r\n|elif lcase (state.altair_material) = lcase (\"manipuladores químicos\"):\r\n   {SetState(\"altair_material2\", \"Chemical Manipulators\")}\r\n|elif lcase (state.altair_material) = lcase (\"procesadores químicos\"):\r\n   {SetState(\"altair_material2\", \"Chemical Processors\")}\r\n|elif lcase (state.altair_material) = lcase (\"Unidades de almacenamiento químico\"):\r\n   {SetState(\"altair_material2\", \"Chemical Storage Units\")}\r\n|elif lcase (state.altair_material) = lcase (\"Datos de escáner clasificados\"):\r\n   {SetState(\"altair_material2\", \"Classified Scan Databanks\")}\r\n|elif lcase (state.altair_material) = lcase (\"Fragmento de escáner clasificado\"):\r\n   {SetState(\"altair_material2\", \"Classified Scan Fragment\")}\r\n|elif lcase (state.altair_material) = lcase (\"Compuestos compactos\"):\r\n   {SetState(\"altair_material2\", \"Compact Composites\")}\r\n|elif lcase (state.altair_material) = lcase (\"Escudos compuestos\"):\r\n   {SetState(\"altair_material2\", \"Compound Shielding\")}\r\n|elif lcase (state.altair_material) = lcase (\"cerámicas conductivas\"):\r\n   {SetState(\"altair_material2\", \"Conductive Ceramics\")}\r\n|elif lcase (state.altair_material) = lcase (\"componentes conductivos\"):\r\n   {SetState(\"altair_material2\", \"Conductive Components\")}\r\n|elif lcase (state.altair_material) = lcase (\"polímeros conductivos\"):\r\n   {SetState(\"altair_material2\", \"Conductive Polymers\")}\r\n|elif lcase (state.altair_material) = lcase (\"componentes configurables\"):\r\n   {SetState(\"altair_material2\", \"Configurable Components\")}\r\n|elif lcase (state.altair_material) = lcase (\"Compuestos de Core Dynamics\"):\r\n   {SetState(\"altair_material2\", \"Core Dynamics Composites\")}\r\n|elif lcase (state.altair_material) = lcase (\"Firmware industrial pirateado\"):\r\n   {SetState(\"altair_material2\", \"Cracked Industrial Firmware\")}\r\n|elif lcase (state.altair_material) = lcase (\"piedras de cristal\"):\r\n   {SetState(\"altair_material2\", \"Crystal Shards\")}\r\n|elif lcase (state.altair_material) = lcase (\"excepciones en análisis de estelas\"):\r\n   {SetState(\"altair_material2\", \"Datamined Wake Exceptions\")}\r\n|elif lcase (state.altair_material) = lcase (\"Datos de emisión descodificados\"):\r\n   {SetState(\"altair_material2\", \"Decoded Emission Data\")}\r\n|elif lcase (state.altair_material) = lcase (\"Registros de ciclo de escudo distorsionados\"):\r\n   {SetState(\"altair_material2\", \"Distorted Shield Cycle Recordings\")}\r\n|elif lcase (state.altair_material) = lcase (\"Datos de escáner divergentes\"):\r\n   {SetState(\"altair_material2\", \"Divergent Scan Data\")}\r\n|elif lcase (state.altair_material) = lcase (\"Trayectorias de hiperespacio excéntricas\"):\r\n   {SetState(\"altair_material2\", \"Eccentric Hyperspace Trajectories\")}\r\n|elif lcase (state.altair_material) = lcase (\"Matriz electroquímica\"):\r\n   {SetState(\"altair_material2\", \"Electrochemical Arrays\")}\r\n|elif lcase (state.altair_material) = lcase (\"datos de transmisiones codificadas excepcionales\"):\r\n   {SetState(\"altair_material2\", \"Exceptional Scrambled Emission Data\")}\r\n|elif lcase (state.altair_material) = lcase (\"cristales de enfoque exquisitos\"):\r\n   {SetState(\"altair_material2\", \"Exquisite Focus Crystals\")}\r\n|elif lcase (state.altair_material) = lcase (\"Compuestos de filamentos\"):\r\n   {SetState(\"altair_material2\", \"Filament Composites\")}\r\n|elif lcase (state.altair_material) = lcase (\"Cristales de convergencia imperfectos\"):\r\n   {SetState(\"altair_material2\", \"Flawed Focus Crystals\")}\r\n|elif lcase (state.altair_material) = lcase (\"cristales de enfoque\"):\r\n   {SetState(\"altair_material2\", \"Focus Crystals\")}\r\n|elif lcase (state.altair_material) = lcase (\"Aleaciones galvanizadas\"):\r\n   {SetState(\"altair_material2\", \"Galvanising Alloys\")}\r\n|elif lcase (state.altair_material) = lcase (\"Red resistiva\"):\r\n   {SetState(\"altair_material2\", \"Grid Resistors\")}\r\n|elif lcase (state.altair_material) = lcase (\"cableado de conducción calorífica\"):\r\n   {SetState(\"altair_material2\", \"Heat Conduction Wiring\")}\r\n|elif lcase (state.altair_material) = lcase (\"placa de dispersión de calor\"):\r\n   {SetState(\"altair_material2\", \"Heat Dispersion Plate\")}\r\n|elif lcase (state.altair_material) = lcase (\"intercambiadores de calor\"):\r\n   {SetState(\"altair_material2\", \"Heat Exchangers\")}\r\n|elif lcase (state.altair_material) = lcase (\"Cerámicas resistentes al calor\"):\r\n   {SetState(\"altair_material2\", \"Heat Resistant Ceramics\")}\r\n|elif lcase (state.altair_material) = lcase (\"palas térmicas\"):\r\n   {SetState(\"altair_material2\", \"Heat Vanes\")}\r\n|elif lcase (state.altair_material) = lcase (\"compuestos de alta densidad\"):\r\n   {SetState(\"altair_material2\", \"High Density Composites\")}\r\n|elif lcase (state.altair_material) = lcase (\"capacitadores híbridos\"):\r\n   {SetState(\"altair_material2\", \"Hybrid Capacitors\")}\r\n|elif lcase (state.altair_material) = lcase (\"escudos imperiales\"):\r\n   {SetState(\"altair_material2\", \"Imperial Shielding\")}\r\n|elif lcase (state.altair_material) = lcase (\"componentes improvisados\"):\r\n   {SetState(\"altair_material2\", \"Improvised Components\")}\r\n|elif lcase (state.altair_material) = lcase (\"Análisis de absorción de escudos inconsistente\"):\r\n   {SetState(\"altair_material2\", \"Inconsistent Shield Soak Analysis\")}\r\n|elif lcase (state.altair_material) = lcase (\"datos de emisión irregulares\"):\r\n   {SetState(\"altair_material2\", \"Irregular Emission Data\")}\r\n|elif lcase (state.altair_material) = lcase (\"componentes mecánicos\"):\r\n   {SetState(\"altair_material2\", \"Mechanical Components\")}\r\n|elif lcase (state.altair_material) = lcase (\"equipamiento mecánico\"):\r\n   {SetState(\"altair_material2\", \"Mechanical Equipment\")}\r\n|elif lcase (state.altair_material) = lcase (\"chatarra mecánica\"):\r\n   {SetState(\"altair_material2\", \"Mechanical Scrap\")}\r\n|elif lcase (state.altair_material) = lcase (\"aleaciones de grado militar\"):\r\n   {SetState(\"altair_material2\", \"Military Grade Alloys\")}\r\n|elif lcase (state.altair_material) = lcase (\"supercapacitadores militares\"):\r\n   {SetState(\"altair_material2\", \"Military Supercapacitors\")}\r\n|elif lcase (state.altair_material) = lcase (\"Firmware de consumo modificado\"):\r\n   {SetState(\"altair_material2\", \"Modified Consumer Firmware\")}\r\n|elif lcase (state.altair_material) = lcase (\"Firmware integrado modificado\"):\r\n   {SetState(\"altair_material2\", \"Modified Embedded Firmware\")}\r\n|elif lcase (state.altair_material) = lcase (\"claves simétricas abiertas\"):\r\n   {SetState(\"altair_material2\", \"Open Symmetric Keys\")}\r\n|elif lcase (state.altair_material) = lcase (\"Datos de frecuencias de escudo peculiares\"):\r\n   {SetState(\"altair_material2\", \"Peculiar Shield Frequency Data\")}\r\n|elif lcase (state.altair_material) = lcase (\"Aislantes farmacéuticos\"):\r\n   {SetState(\"altair_material2\", \"Pharmaceutical Isolators\")}\r\n|elif lcase (state.altair_material) = lcase (\"Aleaciones de fase\"):\r\n   {SetState(\"altair_material2\", \"Phase Alloys\")}\r\n|elif lcase (state.altair_material) = lcase (\"capacitadores de polímeros\"):\r\n   {SetState(\"altair_material2\", \"Polymer Capacitors\")}\r\n|elif lcase (state.altair_material) = lcase (\"Aleaciones de precipitación\"):\r\n   {SetState(\"altair_material2\", \"Precipitated Alloys\")}\r\n|elif lcase (state.altair_material) = lcase (\"compuestos con patente\"):\r\n   {SetState(\"altair_material2\", \"Proprietary Composites\")}\r\n|elif lcase (state.altair_material) = lcase (\"protorradiadores térmicos\"):\r\n   {SetState(\"altair_material2\", \"Proto Heat Radiators\")}\r\n|elif lcase (state.altair_material) = lcase (\"Protoaleaciones ligeras\"):\r\n   {SetState(\"altair_material2\", \"Proto Light Alloys\")}\r\n|elif lcase (state.altair_material) = lcase (\"Aleaciones protorradiadas\"):\r\n   {SetState(\"altair_material2\", \"Proto Radiolic Alloys\")}\r\n|elif lcase (state.altair_material) = lcase (\"cristales de enfoque refinados\"):\r\n   {SetState(\"altair_material2\", \"Refined Focus Crystals\")}\r\n|elif lcase (state.altair_material) = lcase (\"aleaciones recuperadas\"):\r\n   {SetState(\"altair_material2\", \"Salvaged Alloys\")}\r\n|elif lcase (state.altair_material) = lcase (\"Parche de firmware de seguridad\"):\r\n   {SetState(\"altair_material2\", \"Security Firmware Patch\")}\r\n|elif lcase (state.altair_material) = lcase (\"emisor de escudos\"):\r\n   {SetState(\"altair_material2\", \"Shield Emitters\")}\r\n|elif lcase (state.altair_material) = lcase (\"Sensores de escudo\"):\r\n   {SetState(\"altair_material2\", \"Shielding Sensors\")}\r\n|elif lcase (state.altair_material) = lcase (\"Firmware heredado especializado\"):\r\n   {SetState(\"altair_material2\", \"Specialised Legacy Firmware\")}\r\n|elif lcase (state.altair_material) = lcase (\"Extrañas soluciones de estelas\"):\r\n   {SetState(\"altair_material2\", \"Strange Wake Solutions\")}\r\n|elif lcase (state.altair_material) = lcase (\"Códigos de encriptación marcados\"):\r\n   {SetState(\"altair_material2\", \"Tagged Encryption Codes\")}\r\n|elif lcase (state.altair_material) = lcase (\"aleaciones templadas\"):\r\n   {SetState(\"altair_material2\", \"Tempered Alloys\")}\r\n|elif lcase (state.altair_material) = lcase (\"aleaciones térmicas\"):\r\n   {SetState(\"altair_material2\", \"Thermic Alloys\")}\r\n|elif lcase (state.altair_material) = lcase (\"datos de emisión inesperados\"):\r\n   {SetState(\"altair_material2\", \"Unexpected Emission Data\")}\r\n|elif lcase (state.altair_material) = lcase (\"Archivos de escáner no identificados\"):\r\n   {SetState(\"altair_material2\", \"Unidentified Scan Archives\")}\r\n|elif lcase (state.altair_material) = lcase (\"fragmento desconocido\"):\r\n   {SetState(\"altair_material2\", \"Unknown Fragment\")}\r\n|elif lcase (state.altair_material) = lcase (\"escáner de escudos atípico\"):\r\n   {SetState(\"altair_material2\", \"Untypical Shield Scans\")}\r\n|elif lcase (state.altair_material) = lcase (\"Ficheros encriptados inusuales\"):\r\n   {SetState(\"altair_material2\", \"Unusual Encrypted Files\")}\r\n|elif lcase (state.altair_material) = lcase (\"Emisor de escudos desgastado\"):\r\n   {SetState(\"altair_material2\", \"Worn Shield Emitters\")}\r\n|else\r\n   {SetState(\"altair_material2\", \"\")}\r\n}",
      "default": false,
      "name": "Altair materials inversa",
      "description": "Traducción inversa, del español al inglés, de los nombres de los materiales"
    },
    "Altair naves": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{if lcase (state.altair_nombrenave) = \"adder\": \r\n  Su Áder\r\n|elif lcase(state.altair_nombrenave) = \"anaconda\":\r\n  Su Anaconda\r\n|elif lcase(state.altair_nombrenave) = \"asp explorer\":\r\n  Su A ese pe explórer\r\n|elif lcase(state.altair_nombrenave) = \"asp scout\":\r\n  Su A ese pe escáut\r\n|elif lcase(state.altair_nombrenave) = \"asp\":\r\n  Su A ese pe\r\n|elif lcase(state.altair_nombrenave) = \"beluga\":\r\n  Su Beluga\r\n|elif lcase(state.altair_nombrenave) = \"cobramkiii\":\r\n  Su Cobra emekatrés\r\n|elif lcase (state.altair_nombrenave) = \"cobramkiv\":\r\n  Su Cobra emekacuátro\r\n|elif lcase (state.altair_nombrenave) = \"diamondback explorer\":\r\n  Su Daiamondback Explórer\r\n|elif lcase (state.altair_nombrenave) = \"diamondback scout\":\r\n  Su Daiamondback escáut\r\n|elif lcase (state.altair_nombrenave) = \"diamondback\":\r\n  Su Daiamondback\r\n|elif lcase (state.altair_nombrenave) = \"eagle\":\r\n  Su íguel\r\n|elif lcase (state.altair_nombrenave) = \"federal assault ship\":\r\n  Su nave de asalto federal\r\n|elif lcase (state.altair_nombrenave) = \"federal corvette\":\r\n  Su corbeta federal\r\n|elif lcase (state.altair_nombrenave) = \"federal dropship\":\r\n  Su nave de descenso federal\r\n|elif lcase (state.altair_nombrenave) = \"federal gunship\":\r\n  Su cañonera federal\r\n|elif lcase (state.altair_nombrenave) = \"ferdelance\":\r\n  Su fer de lans\r\n|elif lcase (state.altair_nombrenave) = \"imperial clipper\":\r\n  Su clíper imperial\r\n|elif lcase (state.altair_nombrenave) = \"imperial courier\":\r\n  Su correo imperial\r\n|elif lcase (state.altair_nombrenave) = \"imperial cutter\":\r\n  Su cúter imperial\r\n|elif lcase (state.altair_nombrenave) = \"imperial eagle\":\r\n  Su íguel imperial\r\n|elif lcase (state.altair_nombrenave) = \"hauler\":\r\n  Su jáuler\r\n|elif lcase (state.altair_nombrenave) = \"keelback\":\r\n  Su kílbak\r\n|elif lcase (state.altair_nombrenave) = \"orca\":\r\n  Su orca\r\n|elif lcase (state.altair_nombrenave) = \"python\":\r\n  Su páiton\r\n|elif lcase (state.altair_nombrenave) = \"sidewinder\":\r\n  Su saidwainder\r\n|elif lcase (state.altair_nombrenave) = \"type6\":\r\n  Su taip six transpórter\r\n|elif lcase (state.altair_nombrenave) = \"type7\":\r\n  Su taip séven transpórter\r\n|elif lcase (state.altair_nombrenave) = \"type9\":\r\n  Su taip náin jevi\r\n|elif lcase (state.altair_nombrenave) = \"viper\":\r\n  Su víper emekatrés\r\n|elif lcase (state.altair_nombrenave) = \"viper_mkiv\":\r\n  Su víper emekacuátro\r\n|elif lcase (state.altair_nombrenave) = \"vulture\":\r\n  Su bvuúltur\r\n|elif lcase (state.altair_nombrenave) = \"dolphin\":\r\n    Su dolfin\r\n|else:\r\n  Su nave\r\n} ",
      "default": false,
      "name": "Altair naves",
      "description": "Función para traducir los nombres de las naves"
    },
    "Altair nombres potencias": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "\r\n\r\n{if lcase (state.altair_potencia) = \"zachary hudson\":\r\n   sácari jadson\r\n|elif lcase (state.altair_potencia) = \"a lavigny-duval\":\r\n   arissa laving duval\r\n|elif lcase (state.altair_potencia) = \"aisling dival\":\r\n   asling duval\r\n|elif lcase (state.altair_potencia) = \"archon delaine\":\r\n   arcon dilein\r\n|elif lcase (state.altair_potencia) = \"denton patreus\":\r\n   denton petrus\r\n|elif lcase (state.altair_potencia) = \"edmund mahon\":\r\n   édmund maón\r\n|elif lcase (state.altair_potencia) = \"felicia winters\":\r\n   felicia winters\r\n|elif lcase (state.altair_potencia) = \"li yong-rui\":\r\n   lii yong rui\r\n|elif lcase (state.altair_potencia) = \"pranav antal\":\r\n   pránavv antal\r\n|elif lcase (state.altair_potencia) = \"zermina torval\":\r\n   semina tórval\r\n|elif lcase (state.altair_potencia) = \"yuri grom\":\r\n   yiuri ggromm\r\n|else:\r\n  {state.altair_potencia}\r\n}",
      "default": false,
      "name": "Altair nombres potencias",
      "description": "Función para pronunciar de forma más correcta los nombres de los líderes de las potencias"
    },
    "Altair tipo NPC": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{if event.by:\r\n    {if event.by=\"Bounty hunter\":\r\n       un cazarrecompensas \r\n    |elif event.by=\"Cargo hunter\":\r\n       un cazador de cargamentos\r\n    |elif event.by=\"Military\":\r\n       una nave militar\r\n    |elif event.by=\"Ambushed pilot\":\r\n       un piloto emboscado\r\n    |elif event.by=\"Capital ship\":\r\n       una nave capital\r\n    |elif event.by=\"Commuter\":\r\n       un viajero\r\n    |elif event.by=\"Exploration convoy\":\r\n       un convoy de exploración\r\n    |elif event.by=\"Wedding convoy\":\r\n      un cortejo nupcial\r\n    |elif event.by=\"Cruise liner\":\r\n       un crucero de línea\r\n    |elif event.by=\"Escort\":\r\n       un escolta\r\n    |elif event.by=\"Messenger\":\r\n       un mensajero\r\n    |elif event.by=\"Miner\":\r\n       un minero\r\n    |elif event.by=\"Passenger hunter\":\r\n       un cazador de pasajeros\r\n    |elif event.by=\"Passenger liner\":\r\n       una nave de pasajeros\r\n    |elif event.by=\"Pirate\":\r\n       una nave pirata\r\n    |elif event.by=\"Police\":\r\n       una nave de la policía\r\n    |elif event.by=\"Rival power assassin\":\r\n       una nave de una potencia rival\r\n    |elif event.by=\"Rival power pirate\":\r\n       una nave pirata de una potencia rival\r\n    |elif event.by=\"Rival power security\":\r\n       una nave de seguridad de una potencia rival\r\n    |elif event.by=\"Propagandist\":\r\n       un propagandista\r\n    |elif event.by=\"Protester\":\r\n       un manifestante\r\n    |elif event.by=\"Refugee\":\r\n       un refugiado\r\n    |elif event.by=\"Smuggler\":\r\n       un contrabandista\r\n    |elif event.by=\"Starship One\":\r\n       la estarship uan\r\n    |else:\r\n       una nave enemiga \r\n    }\r\n  }",
      "default": false,
      "name": "Altair tipo NPC",
      "description": "Función para traducir los tipos de naves NPC"
    },
    "Análisis de mercado": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{F(\"Commodity sale check\")}\r\n\r\n{if ship.role = \"Multi-purpose\" || ship.role = \"Trading\":\r\n{F(\"Commodity purchase check\")}\r\n}",
      "default": false,
      "name": "Análisis de mercado",
      "description": "Análisis de mercado"
    },
    "Blueprint make report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Function to obtain current inventory of a material}\r\n{set _inventory(required) to:\r\n    {for material in materials:\r\n        {if material.material = required:\r\n            {return material}\r\n        }\r\n    }\r\n}\r\n\r\n{_ Fetch blueprint from state }\r\n{set blueprintname to state.blueprint}\r\n{if blueprintname:\r\n    {_ Fetch full blueprint details }\r\n    {set blueprint to BlueprintDetails(blueprintname)}\r\n\r\n    {_ Context }\r\n    {SetState('eddi_context_last_subject', 'blueprint')}\r\n    {SetState('eddi_context_blueprint_name', blueprintname)}\r\n}\r\n\r\n{if !blueprint:\r\n    {_ Fetch from context }\r\n    {set blueprint to BlueprintDetails(state.eddi_context_blueprint_name)}\r\n}\r\n\r\n{set canbemade to 999}\r\n\r\n{if blueprint:\r\n    {_ Find the smallest number of this blueprint that can be made }\r\n    \r\n    {set cur to 0}\r\n    {while cur < len(blueprint.materials):\r\n        {set inventory to _inventory(blueprint.materials[cur].material)}\r\n        {if !inventory:\r\n            {set canbemade to 0}\r\n        |else:\r\n            {if inventory.amount < canbemade:\r\n                {set canbemade to inventory.amount}\r\n            }\r\n        }\r\n        {set cur to cur + 1}\r\n    }\r\n\r\n    {if canbemade = 0:\r\n        No puede hacer ningún {blueprintname}\r\n    |elif canbemade = 1:\r\n        Solo puede hacer un {blueprintname}\r\n    |else:\r\n        Puede hacer {canbemade} {blueprintname}\r\n    }\r\n|else:\r\n    No hay información disponible sobre los materiales necesarios para hacer {blueprintname}\r\n}.\r\n",
      "default": true,
      "name": "Blueprint make report",
      "description": "Report on how many of a particular blueprint we can make"
    },
    "Blueprint material report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch blueprint from state }\r\n{set blueprintname to state.blueprint}\r\n{if blueprintname:\r\n    {_ Fetch full blueprint details }\r\n    {set blueprint to BlueprintDetails(blueprintname)}\r\n\r\n    {_ Context }\r\n    {SetState('eddi_context_last_subject', 'blueprint')}\r\n    {SetState('eddi_context_blueprint_name', blueprintname)}\r\n}\r\n\r\n{if !blueprint:\r\n    {_ Fetch from context }\r\n    {set blueprint to BlueprintDetails(state.eddi_context_blueprint_name)}\r\n}\r\n\r\n{if blueprint:\r\n    {set materials to len(blueprint.materials)}\r\n    {blueprintname} requires \r\n    {if materials = 1:\r\n        {blueprint.materials[0].material}\r\n    |elif materials = 2:\r\n        {blueprint.materials[0].material} and {blueprint.materials[1].material}\r\n    |else:\r\n        {set cur to 0}\r\n        {while cur < len(blueprint.materials):\r\n            {if cur = 0:\r\n                {blueprint.materials[cur].material}\r\n            |elif cur < len(blueprint.materials) - 1:\r\n                , {blueprint.materials[cur].material}\r\n            |else:\r\n                , and {blueprint.materials[cur].material}\r\n            }\r\n            {set cur to cur + 1}\r\n        }\r\n    }\r\n|else:\r\n    No hay información disponible sobre los materiales necesarios para hacer {blueprintname}\r\n}.\r\n",
      "default": false,
      "name": "Blueprint material report",
      "description": "Report on the material requirements for a blueprint"
    },
    "Body report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch from context }\r\n{set reportbody to BodyDetails(state.eddi_context_body_name, state.eddi_context_body_system)}\r\n\r\n{if !reportbody.name || reportbody.name = \"\":\r\nNo estoy segura sobre el cuerpo estelar acerca del cual me pregunta.\r\n|else:\r\n{reportbody.name} es\r\n{if reportbody.planettype = \"Metal rich body\":\r\nUn mundo rico en metales\r\n{set gasgiant to 0}\r\n|elif reportbody.planettype = \"High metal content body\":\r\nUn mundo de alto contenido metálico \r\n{set gasgiant to 0}\r\n|elif reportbody.planettype = \"Rocky body\":\r\nUn mundo rocoso \r\n{set gasgiant to 0}\r\n|elif reportbody.planettype = \"Icy body\":\r\nUn mundo helado \r\n{set gasgiant to 0}\r\n|elif reportbody.planettype = \"Rocky ice body\":\r\nUn mundo rocoso helado\r\n{set gasgiant to 0}\r\n|elif reportbody.planettype = \"Earthlike body\":\r\nUn mundo similar a la tierra \r\n{set gasgiant to 0}\r\n|elif reportbody.planettype = \"Water world\":\r\nUn mundo acuático \r\n{set gasgiant to 0}\r\n|elif reportbody.planettype = \"Ammonia world\":\r\nUn mundo de amoníaco \r\n{set gasgiant to 0}\r\n|elif reportbody.planettype = \"Water giant\":\r\nun gigante acuático \r\n{set gasgiant to 0}\r\n|elif reportbody.planettype = \"Water giant with life\":\r\nun gigante acuático con vida \r\n{set gasgiant to 0}\r\n|elif reportbody.planettype = \"Gas giant with water based life\":\r\nun gigante gaseoso con vida basada en el agua \r\n{set gasgiant to 1}\r\n|elif reportbody.planettype = \"Gas giant with ammonia based life\":\r\nun gigante gaseoso con vida basada en el amoníaco \r\n{set gasgiant to 1}\r\n|elif reportbody.planettype = \"Sudarsky class I gas giant\":\r\nun gigante gaseoso de clase uno\r\n{set gasgiant to 1}\r\n|elif reportbody.planettype = \"Sudarsky class II gas giant\":\r\nun gigante gaseoso de clase dos\r\n{set gasgiant to 1}\r\n|elif reportbody.planettype = \"Sudarsky class III gas giant\":\r\nun gigante gaseoso de clase tres\r\n{set gasgiant to 1}\r\n|elif reportbody.planettype = \"Sudarsky class IV gas giant\":\r\nun gigante gaseoso de clase cuatro\r\n{set gasgiant to 1}\r\n|elif reportbody.planettype = \"Sudarsky class V gas giant\":\r\nun gigante gaseoso de clase cinco\r\n{set gasgiant to 1}\r\n|elif reportbody.planettype = \"Helium rich gas giant\":\r\nun gigante gaseoso rico en helio \r\n{set gasgiant to 1}\r\n|elif reportbody.planettype = \"Helium gas giant\":\r\nun gigante gaseoso de helio\r\n{set gasgiant to 1}\r\n|else:\r\nun cuerpo estelar \r\n}\r\n,de \r\n{if reportbody.gravity < 0.5:\r\nbaja gravedad\r\n|elif reportbody.gravity <2:\r\ngravedad media\r\n|elif reportbody.gravity <4:\r\nalta gravedad\r\n|else:\r\ngravedad extremadamente alta\r\n}\r\n\r\n{if reportbody.tidallylocked:\r\ncon acoplamiento de marea\r\n}\r\n\r\n{if reportbody.terraformstate = \"Terraformable\": \r\nterraformable\r\n|elif reportbody.terraformstate = \"Terraformed\":\r\nterraformado\r\n}\r\n\r\n{if len(reportbody.rings) > 0:\r\ncon un sistema de anillos\r\n}\r\n\r\n{if reportbody.terraformstate = \"Terraforming\":\r\nen proceso de ser terraformado\r\n}\r\n\r\n\r\n,\r\n\r\n{if type(reportbody.landable) != \"void\":\r\n{if reportbody.landable:\r\n{OneOf('apropiado para','adecuado para','en el que se puede')}\r\n|else:\r\n{OneOf('inapropiado para','no apropiado para','no adecuado para','inadecuado para','en el que no se puede')}\r\n}\r\naterrizar\r\n}.\r\n\r\n{_Atmosphere }\r\n{if gasgiant=0:\r\n{if (reportbody.atmosphere && reportbody.atmosphere!=\"No atmosphere\"):\r\n{OneOf('Posee una ','Tiene una')} \r\n{if reportbody.atmosphere = \"suitable for water-based life atmosphere\":\r\natmósfera apropiada para la vida acuática\r\n|elif reportbody.atmosphere = \"ammonia and oxygen atmosphere\":\r\natmósfera de amoníaco y oxígeno\r\n|elif reportbody.atmosphere = \"ammonia atmosphere\":\r\natmósfera de amoníaco\r\n|elif reportbody.atmosphere = \"thin ammonia and oxygen atmosphere\":\r\nténue atmósfera de amoníaco y oxígeno\r\n|elif reportbody.atmosphere = \"thick ammonia and oxygen atmosphere\":\r\ndensa atmósfera de amoníaco y oxígeno\r\n|elif reportbody.atmosphere = \"hot thick ammonia atmosphere\":\r\ndensa y caliente atmósfera de amoníaco \r\n|elif reportbody.atmosphere = \"water atmosphere\":\r\natmósfera de agua\r\n|elif reportbody.atmosphere = \"hot thick carbon dioxide atmosphere\":\r\ndensa y caliente atmósfera de dióxido de carbono\r\n|elif reportbody.atmosphere = \"hot thick carbon dioxide rich atmosphere\":\r\ndensa y caliente atmósfera rica en dióxido de carbono\r\n|elif reportbody.atmosphere = \"thin carbon dioxide atmosphere\":\r\nténue atmósfera de dióxido de carbono\r\n|elif reportbody.atmosphere = \"thick carbon dioxide atmosphere\":\r\ndensa atmósfera de dióxido de carbono\r\n|elif reportbody.atmosphere = \"carbon dioxide atmosphere\":\r\natmósfera de dióxido de carbono\r\n|elif reportbody.atmosphere = \"sulfur dioxide atmosphere\":\r\natmósfera de dióxido de azúfre\r\n|elif reportbody.atmosphere = \"thin sulfur dioxide atmosphere\":\r\nténue atmósfera de dióxido de azúfre\r\n|elif reportbody.atmosphere = \"thick sulfur dioxide atmosphere\":\r\ndensa atmósfera de dióxido de azúfre\r\n|elif reportbody.atmosphere = \"thin nitrogen atmosphere\":\r\nténue atmósfera de nitrógeno\r\n|elif reportbody.atmosphere = \"thick nitrogen atmosphere\":\r\ndensa atmósfera de nitrógeno\r\n|elif reportbody.atmosphere = \"nitrogen atmosphere\":\r\natmósfera de nitrógeno\r\n|elif reportbody.atmosphere = \"water rich atmosphere\":\r\natmósfera rica en agua\r\n|elif reportbody.atmosphere = \"carbon dioxide rich atmosphere\":\r\natmósfera rica en dióxido de carbono\r\n|elif reportbody.atmosphere = \"thin carbon dioxide rich atmosphere\":\r\nténue atmósfera rica en dióxido de carbono\r\n|elif reportbody.atmosphere = \"thick carbon dioxide rich atmosphere\":\r\ndensa atmósfera rica en dióxido de carbono\r\n|elif reportbody.atmosphere = \"thin methane rich atmosphere\":\r\nténue atmósfera rica en metano\r\n|elif reportbody.atmosphere = \"thin methane atmosphere\":\r\nténue atmósfera de metano\r\n|elif reportbody.atmosphere = \"thick methane atmosphere\":\r\ndensa atmósfera de metano\r\n|elif reportbody.atmosphere = \"thick methane rich atmosphere\":\r\ndensa atmósfera rica en metano\r\n|elif reportbody.atmosphere = \"methane atmosphere\":\r\natmósfera de metano\r\n|elif reportbody.atmosphere = \"methane rich atmosphere\":\r\natmósfera rica en metano\r\n|elif reportbody.atmosphere = \"thin helium atmosphere\":\r\nténue atmósfera de hélio\r\n|elif reportbody.atmosphere = \"thick helium atmosphere\":\r\ndensa atmósfera de hélio\r\n|elif reportbody.atmosphere = \"helium atmosphere\":\r\natmósfera rica en hélio\r\n|elif reportbody.atmosphere = \"thin helium rich atmosphere\":\r\nténue atmósfera rica en hélio\r\n|elif reportbody.atmosphere = \"thick helium rich atmosphere\":\r\ndensa atmósfera rica en hélio\r\n|elif reportbody.atmosphere = \"helium rich atmosphere\":\r\natmósfera de hélio\r\n|elif reportbody.atmosphere = \"silicate vapour atmosphere\":\r\natmósfera de vapor de silicato\r\n|elif reportbody.atmosphere = \"metallic vapour atmosphere\":\r\natmósfera de vapor metálico\r\n|elif reportbody.atmosphere = \"neon rich atmosphere\":\r\natmósfera rica en neón\r\n|elif reportbody.atmosphere = \"thin neon rich atmosphere\":\r\nténue atmósfera rica en neón\r\n|elif reportbody.atmosphere = \"thick neon rich atmosphere\":\r\ndensa atmósfera rica en neón\r\n|elif reportbody.atmosphere = \"argon rich atmosphere\":\r\natmósfera rica en argón\r\n|elif reportbody.atmosphere = \"thin argon rich atmosphere\":\r\nténue atmósfera rica en argón\r\n|elif reportbody.atmosphere = \"thick argon rich atmosphere\":\r\ndensa atmósfera rica en argón\r\n|elif reportbody.atmosphere = \"neon atmosphere\":\r\natmósfera de neón\r\n|elif reportbody.atmosphere = \"thin neon atmosphere\":\r\nténue atmósfera de neón\r\n|elif reportbody.atmosphere = \"thick neon atmosphere\":\r\ndensa atmósfera de neón\r\n|elif reportbody.atmosphere = \"thin argon atmosphere\":\r\nténue atmósfera de argón\r\n|elif reportbody.atmosphere = \"thick argon atmosphere\":\r\ndensa atmósfera de argón\r\n|elif reportbody.atmosphere = \"argon atmosphere\":\r\natmósfera de argón\r\n|elif reportbody.atmosphere = \"oxygen atmosphere\":\r\natmósfera de oxígeno\r\n|elif reportbody.atmosphere = \"thin oxygen atmosphere\":\r\nténue atmósfera de oxígeno\r\n|elif reportbody.atmosphere = \"thick oxygen atmosphere\":\r\ndensa atmósfera de oxígeno\r\n|elif reportbody.atmosphere = \"oxygen rich atmosphere\":\r\natmósfera rica en oxígeno\r\n|elif reportbody.atmosphere = \"thin oxygen rich atmosphere\":\r\nténue atmósfera rica en oxígeno\r\n|elif reportbody.atmosphere = \"thick oxygen rich atmosphere\":\r\ndensa atmósfera rica en oxígeno\r\n|else:\r\natmósfera que no me es posible identificar\r\n}.\r\n|else:\r\n{OneOf('Este planeta carece de atmósfera','este planeta no tiene atmósfera','los sensores no detectan atmósfera','no existe atmósfera de ningún tipo','el escáner no detecta atmósfera alguna')}\r\n}.\r\n}\r\n{_ Volcanism}\r\n{if reportbody.volcanism:\r\nEste planeta muestra signos de vulcanismo, con\r\n{if reportbody.volcanism.type = 'Geysers':\r\n{if reportbody.volcanism.amount = 'Major':\r\nun alto número de \r\n|elif reportbody.volcanism.amount = 'Minor':\r\nun bajo número de\r\n}\r\ngéiseres activos\r\n|else:\r\n{if reportbody.volcanism.amount = 'Major':\r\naltos niveles de\r\n|elif reportbody.volcanism.amount = 'Minor':\r\nbajos niveles de\r\n}\r\nafloramientos activos de magma\r\n}.\r\n}\r\n\r\n\r\n\r\n{if reportbody.rotationalperiod && !reportbody.tidallylocked:\r\n\r\nTiene un \r\n{if reportbody.rotationalperiod < -20.0:\r\nlento y retrógrado \r\n|elif reportbody.rotationalperiod < -0.5:\r\nretrógrado\r\n|elif reportbody.rotationalperiod < 0:\r\nrápido y retrógrado\r\n|elif reportbody.rotationalperiod <= 0.5:\r\nrápido\r\n|elif reportbody.rotationalperiod > 20.0:\r\nlento\r\n}\r\nperiodo rotacional de {reportbody.rotationalperiod} día{if Humanise(reportbody.rotationalperiod) != \"1\":s}.\r\n}\r\n\r\n{if reportbody.landable : \r\n\r\n{set goodmaterials to []}\r\n{set greatmaterials to []}\r\n{set allmaterials to []}\r\n{for material in reportbody.materials:\r\n{if material.percentage >= material.definition.greatpctbody:\r\n{set greatmaterials to cat(greatmaterials, [material])}\r\n|elif material.percentage >= material.definition.goodpctbody:\r\n{set goodmaterials to cat(goodmaterials, [material])}\r\n|else\r\n{set allmaterials to cat(allmaterials, [material])}\r\n}\r\n}\r\n\r\n{if len(greatmaterials) > 0:\r\n{Ocassionally (2,\"Este cuerpo estelar\")} contiene niveles muy altos de \r\n{if len(greatmaterials) = 1:\r\n{SetState(\"altair_material\", greatmaterials[0].name)}\r\n{F(\"Altair materials\")}\r\n|elif len(greatmaterials) = 2:\r\n{SetState(\"altair_material\", greatmaterials[0].name)}\r\n{F(\"Altair materials\")}\r\ny \r\n{SetState(\"altair_material\", greatmaterials[1].name)}\r\n{F(\"Altair materials\")}\r\n|else:\r\n{set cur to 0}\r\n{while cur < len(greatmaterials):\r\n{if cur = 0:\r\n{SetState(\"altair_material\", greatmaterials[cur].name)}\r\n{F(\"Altair materials\")}\r\n|elif cur < len(greatmaterials) - 1:\r\n, {SetState(\"altair_material\", greatmaterials[cur].name)}\r\n{F(\"Altair materials\")}\r\n|else:\r\n,y {SetState(\"altair_material\", greatmaterials[cur].name)}\r\n{F(\"Altair materials\")}\r\n}\r\n{set cur to cur + 1}\r\n}\r\n}\r\n}\r\n{if len(goodmaterials) > 0:\r\n{if len(greatmaterials) > 0:\r\ny altos niveles de \r\n|else:\r\n{Ocassionally (2,\"Este cuerpo estelar\")} contiene niveles altos de \r\n}\r\n{if len(goodmaterials) = 1:\r\n{SetState(\"altair_material\", goodmaterials[0].name)}\r\n{F(\"Altair materials\")}\r\n|elif len(goodmaterials) = 2:\r\n{SetState(\"altair_material\", goodmaterials[0].name)}\r\n{F(\"Altair materials\")}\r\ny \r\n{SetState(\"altair_material\", goodmaterials[1].name)}\r\n{F(\"Altair materials\")}\r\n|else:\r\n{set cur to 0}\r\n{while cur < len(goodmaterials):\r\n{if cur = 0:\r\n{SetState(\"altair_material\", goodmaterials[cur].name)}\r\n{F(\"Altair materials\")}\r\n|elif cur < len(goodmaterials) - 1:\r\n, {SetState(\"altair_material\", goodmaterials[cur].name)}\r\n{F(\"Altair materials\")}\r\n|else:\r\n,y {SetState(\"altair_material\", goodmaterials[cur].name)}\r\n{F(\"Altair materials\")}\r\n}\r\n{set cur to cur + 1}\r\n}\r\n}\r\n}\r\n\r\n{if len(allmaterials) > 0:\r\n{if len(greatmaterials) > 0 || len(goodmaterials) > 0:\r\nEstá además\r\n|else:\r\nEste cuerpo está\r\n}\r\n{OneOf(\"compuesto de\",\"hecho de\")}:\r\n{set cur to 0}\r\n{while cur < len(allmaterials):\r\n{SetState(\"altair_material\", allmaterials[cur].name)}\r\n{F(\"Altair materials\")}\r\n{set cur to cur +1}\r\n{if cur = len(allmaterials) - 1:\r\n, y\r\n|elif cur < len(allmaterials) - 1:\r\n,\r\n}\r\n}\r\n}\r\n}\r\n}",
      "default": false,
      "name": "Body report",
      "description": "Function to report on the details of the contextual body"
    },
    "Body scanned": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'body')}\r\n{SetState('eddi_context_last_action', 'scan')}\r\n{SetState('eddi_context_body_system', system.name)}\r\n{SetState('eddi_context_body_name', event.name)}\r\n\r\n{_ Fetch from context }\r\n{set reportbody to BodyDetails(state.eddi_context_body_name, state.eddi_context_body_system)}\r\n{if !reportbody.name || reportbody.name = \"\": {set reportbody to BodyDetails(state.eddi_context_body_name)} }\r\n\r\n\r\n{Pause(1000)}\r\n\r\n{OneOf('Escaneo de ','Análisis de ','análisis de datos de ','exámen de datos de ')} {reportbody.name} {OneOf('completado','terminado','finalizado')} {Occasionally (3,'con éxito')}.\r\n\r\n{OneOf('Es ','Estamos ante ', 'Se trata de ', 'Nos encontramos ante ','nos hallamos ante','estamos en presencia de','los sensores indican que se trata de ','el escáner muestra que es ')} \r\n{if reportbody.planettype = \"Metal rich body\":\r\n  Un mundo rico en metales\r\n  {set gasgiant to 0}\r\n|elif reportbody.planettype = \"High metal content body\":\r\n  Un mundo de alto contenido metálico \r\n  {set gasgiant to 0}\r\n|elif reportbody.planettype = \"Rocky body\":\r\n  Un mundo rocoso \r\n  {set gasgiant to 0}\r\n|elif reportbody.planettype = \"Icy body\":\r\n  Un mundo helado \r\n  {set gasgiant to 0}\r\n|elif reportbody.planettype = \"Rocky ice body\":\r\n  Un mundo rocoso helado\r\n  {set gasgiant to 0}\r\n|elif reportbody.planettype = \"Earthlike body\":\r\n  Un mundo similar a la tierra \r\n  {set gasgiant to 0}\r\n|elif reportbody.planettype = \"Water world\":\r\n  Un mundo acuático \r\n  {set gasgiant to 0}\r\n|elif reportbody.planettype = \"Ammonia world\":\r\n  Un mundo de amoníaco \r\n  {set gasgiant to 0}\r\n|elif reportbody.planettype = \"Water giant\":\r\n  un gigante acuático \r\n  {set gasgiant to 0}\r\n|elif reportbody.planettype = \"Water giant with life\":\r\n  un gigante acuático con vida \r\n  {set gasgiant to 0}\r\n|elif reportbody.planettype = \"Gas giant with water based life\":\r\n  un gigante gaseoso con vida basada en el agua \r\n  {set gasgiant to 1}\r\n|elif reportbody.planettype = \"Gas giant with ammonia based life\":\r\n  un gigante gaseoso con vida basada en el amoníaco \r\n  {set gasgiant to 1}\r\n|elif reportbody.planettype = \"Sudarsky class I gas giant\":\r\n  un gigante gaseoso de clase uno\r\n  {set gasgiant to 1}\r\n|elif reportbody.planettype = \"Sudarsky class II gas giant\":\r\n  un gigante gaseoso de clase dos\r\n  {set gasgiant to 1}\r\n|elif reportbody.planettype = \"Sudarsky class III gas giant\":\r\n  un gigante gaseoso de clase tres\r\n {set gasgiant to 1}\r\n|elif reportbody.planettype = \"Sudarsky class IV gas giant\":\r\n  un gigante gaseoso de clase cuatro\r\n  {set gasgiant to 1}\r\n|elif reportbody.planettype = \"Sudarsky class V gas giant\":\r\n  un gigante gaseoso de clase cinco\r\n  {set gasgiant to 1}\r\n|elif reportbody.planettype = \"Helium rich gas giant\":\r\n  un gigante gaseoso rico en helio \r\n  {set gasgiant to 1}\r\n|elif reportbody.planettype = \"Helium gas giant\":\r\n  un gigante gaseoso de helio\r\n  {set gasgiant to 1}\r\n|else:\r\n  un cuerpo estelar \r\n}\r\n ,de \r\n{if reportbody.gravity < 0.5:\r\n    baja gravedad\r\n|elif reportbody.gravity <2:\r\n    gravedad media\r\n|elif reportbody.gravity <4:\r\n    alta gravedad\r\n|else:\r\n    gravedad extremadamente alta\r\n}\r\n\r\n{if reportbody.tidallylocked:\r\n    con acoplamiento de marea\r\n}\r\n\r\n{if reportbody.terraformstate = \"Terraformable\": \r\n    terraformable\r\n|elif reportbody.terraformstate = \"Terraformed\":\r\n    terraformado\r\n}\r\n\r\n{if len(reportbody.rings) > 0:\r\n    con un sistema de anillos\r\n}\r\n\r\n{if reportbody.terraformstate = \"Terraforming\":\r\n  en proceso de ser terraformado\r\n}\r\n\r\n\r\n,\r\n\r\n{if type(reportbody.landable) != \"void\":\r\n     {if reportbody.landable:\r\n          {OneOf('apropiado para','adecuado para','en el que se puede')}\r\n     |else:\r\n          {OneOf('inapropiado para','no apropiado para','no adecuado para','inadecuado para','en el que no se puede')}\r\n      }\r\naterrizar\r\n}.\r\n\r\n{_Atmosphere }\r\n{if gasgiant=0:\r\n {if (reportbody.atmosphere && reportbody.atmosphere!=\"No atmosphere\"):\r\n   {OneOf('Posee una ','Tiene una')} \r\n  {if reportbody.atmosphere = \"suitable for water-based life atmosphere\":\r\n     atmósfera apropiada para la vida acuática\r\n  |elif reportbody.atmosphere = \"ammonia and oxygen atmosphere\":\r\n     atmósfera de amoníaco y oxígeno\r\n  |elif reportbody.atmosphere = \"ammonia atmosphere\":\r\n     atmósfera de amoníaco\r\n  |elif reportbody.atmosphere = \"thin ammonia and oxygen atmosphere\":\r\n     ténue atmósfera de amoníaco y oxígeno\r\n  |elif reportbody.atmosphere = \"thick ammonia and oxygen atmosphere\":\r\n     densa atmósfera de amoníaco y oxígeno\r\n  |elif reportbody.atmosphere = \"hot thick ammonia atmosphere\":\r\n     densa y caliente atmósfera de amoníaco \r\n  |elif reportbody.atmosphere = \"water atmosphere\":\r\n     atmósfera de agua\r\n  |elif reportbody.atmosphere = \"hot thick carbon dioxide atmosphere\":\r\n     densa y caliente atmósfera de dióxido de carbono\r\n  |elif reportbody.atmosphere = \"hot thick carbon dioxide rich atmosphere\":\r\n     densa y caliente atmósfera rica en dióxido de carbono\r\n  |elif reportbody.atmosphere = \"thin carbon dioxide atmosphere\":\r\n     ténue atmósfera de dióxido de carbono\r\n  |elif reportbody.atmosphere = \"thick carbon dioxide atmosphere\":\r\n     densa atmósfera de dióxido de carbono\r\n  |elif reportbody.atmosphere = \"carbon dioxide atmosphere\":\r\n     atmósfera de dióxido de carbono\r\n  |elif reportbody.atmosphere = \"sulfur dioxide atmosphere\":\r\n     atmósfera de dióxido de azúfre\r\n  |elif reportbody.atmosphere = \"thin sulfur dioxide atmosphere\":\r\n     ténue atmósfera de dióxido de azúfre\r\n  |elif reportbody.atmosphere = \"thick sulfur dioxide atmosphere\":\r\n     densa atmósfera de dióxido de azúfre\r\n  |elif reportbody.atmosphere = \"thin nitrogen atmosphere\":\r\n     ténue atmósfera de nitrógeno\r\n  |elif reportbody.atmosphere = \"thick nitrogen atmosphere\":\r\n     densa atmósfera de nitrógeno\r\n  |elif reportbody.atmosphere = \"nitrogen atmosphere\":\r\n     atmósfera de nitrógeno\r\n  |elif reportbody.atmosphere = \"water rich atmosphere\":\r\n     atmósfera rica en agua\r\n  |elif reportbody.atmosphere = \"carbon dioxide rich atmosphere\":\r\n     atmósfera rica en dióxido de carbono\r\n  |elif reportbody.atmosphere = \"thin carbon dioxide rich atmosphere\":\r\n     ténue atmósfera rica en dióxido de carbono\r\n  |elif reportbody.atmosphere = \"thick carbon dioxide rich atmosphere\":\r\n     densa atmósfera rica en dióxido de carbono\r\n  |elif reportbody.atmosphere = \"thin methane rich atmosphere\":\r\n     ténue atmósfera rica en metano\r\n  |elif reportbody.atmosphere = \"thin methane atmosphere\":\r\n     ténue atmósfera de metano\r\n  |elif reportbody.atmosphere = \"thick methane atmosphere\":\r\n     densa atmósfera de metano\r\n |elif reportbody.atmosphere = \"thick methane rich atmosphere\":\r\n     densa atmósfera rica en metano\r\n  |elif reportbody.atmosphere = \"methane atmosphere\":\r\n     atmósfera de metano\r\n  |elif reportbody.atmosphere = \"methane rich atmosphere\":\r\n     atmósfera rica en metano\r\n  |elif reportbody.atmosphere = \"thin helium atmosphere\":\r\n     ténue atmósfera de hélio\r\n  |elif reportbody.atmosphere = \"thick helium atmosphere\":\r\n     densa atmósfera de hélio\r\n  |elif reportbody.atmosphere = \"helium atmosphere\":\r\n     atmósfera rica en hélio\r\n  |elif reportbody.atmosphere = \"thin helium rich atmosphere\":\r\n     ténue atmósfera rica en hélio\r\n  |elif reportbody.atmosphere = \"thick helium rich atmosphere\":\r\n     densa atmósfera rica en hélio\r\n  |elif reportbody.atmosphere = \"helium rich atmosphere\":\r\n     atmósfera de hélio\r\n  |elif reportbody.atmosphere = \"silicate vapour atmosphere\":\r\n     atmósfera de vapor de silicato\r\n  |elif reportbody.atmosphere = \"metallic vapour atmosphere\":\r\n     atmósfera de vapor metálico\r\n  |elif reportbody.atmosphere = \"neon rich atmosphere\":\r\n     atmósfera rica en neón\r\n  |elif reportbody.atmosphere = \"thin neon rich atmosphere\":\r\n     ténue atmósfera rica en neón\r\n  |elif reportbody.atmosphere = \"thick neon rich atmosphere\":\r\n     densa atmósfera rica en neón\r\n  |elif reportbody.atmosphere = \"argon rich atmosphere\":\r\n     atmósfera rica en argón\r\n  |elif reportbody.atmosphere = \"thin argon rich atmosphere\":\r\n     ténue atmósfera rica en argón\r\n  |elif reportbody.atmosphere = \"thick argon rich atmosphere\":\r\n     densa atmósfera rica en argón\r\n  |elif reportbody.atmosphere = \"neon atmosphere\":\r\n     atmósfera de neón\r\n  |elif reportbody.atmosphere = \"thin neon atmosphere\":\r\n     ténue atmósfera de neón\r\n  |elif reportbody.atmosphere = \"thick neon atmosphere\":\r\n     densa atmósfera de neón\r\n  |elif reportbody.atmosphere = \"thin argon atmosphere\":\r\n     ténue atmósfera de argón\r\n  |elif reportbody.atmosphere = \"thick argon atmosphere\":\r\n     densa atmósfera de argón\r\n  |elif reportbody.atmosphere = \"argon atmosphere\":\r\n     atmósfera de argón\r\n  |elif reportbody.atmosphere = \"oxygen atmosphere\":\r\n     atmósfera de oxígeno\r\n  |elif reportbody.atmosphere = \"thin oxygen atmosphere\":\r\n     ténue atmósfera de oxígeno\r\n  |elif reportbody.atmosphere = \"thick oxygen atmosphere\":\r\n     densa atmósfera de oxígeno\r\n  |elif reportbody.atmosphere = \"oxygen rich atmosphere\":\r\n     atmósfera rica en oxígeno\r\n  |elif reportbody.atmosphere = \"thin oxygen rich atmosphere\":\r\n     ténue atmósfera rica en oxígeno\r\n  |elif reportbody.atmosphere = \"thick oxygen rich atmosphere\":\r\n     densa atmósfera rica en oxígeno\r\n  |else:\r\n     atmósfera que no me es posible identificar\r\n  }.\r\n |else:\r\n      {OneOf('Este planeta carece de atmósfera','este planeta no tiene atmósfera','los sensores no detectan atmósfera','no existe atmósfera de ningún tipo','el escáner no detecta atmósfera alguna')}\r\n }.\r\n}\r\n{_ Volcanism}\r\n{if reportbody.volcanism:\r\n        Este planeta muestra signos de vulcanismo, con\r\n        {if reportbody.volcanism.type = 'Geysers':\r\n            {if reportbody.volcanism.amount = 'Major':\r\n                un alto número de \r\n            |elif reportbody.volcanism.amount = 'Minor':\r\n                un bajo número de\r\n            }\r\n            géiseres activos\r\n        |else:\r\n            {if reportbody.volcanism.amount = 'Major':\r\n                altos niveles de\r\n            |elif reportbody.volcanism.amount = 'Minor':\r\n                bajos niveles de\r\n            }\r\n            afloramientos activos de magma\r\n        }.\r\n}\r\n\r\n\r\n\r\n{if reportbody.landable :\r\n    Tiene un \r\n    {if reportbody.rotationalperiod < -20.0:\r\n        lento y retrógrado \r\n    |elif reportbody.rotationalperiod < -0.5:\r\n        retrógrado\r\n    |elif reportbody.rotationalperiod < 0:\r\n        rápido y retrógrado\r\n    |elif reportbody.rotationalperiod <= 0.5:\r\n        rápido\r\n    |elif reportbody.rotationalperiod > 20.0:\r\n        lento\r\n    }\r\n     periodo rotacional de {reportbody.rotationalperiod} día{if Humanise(reportbody.rotationalperiod) != \"1\":s}.\r\n}\r\n    \r\n{set goodmaterials to []}\r\n{set greatmaterials to []}\r\n{for material in reportbody.materials:\r\n    {if material.percentage >= material.definition.greatpctbody:\r\n          {set greatmaterials to cat(greatmaterials, [material])}\r\n    |elif material.percentage >= material.definition.goodpctbody:\r\n          {set goodmaterials to cat(goodmaterials, [material])}\r\n    }\r\n}\r\n\r\n{if len(greatmaterials) > 0:\r\n    {Ocassionally (2,\"Este cuerpo estelar\")} contiene niveles muy altos de \r\n     {if len(greatmaterials) = 1:\r\n          {SetState(\"altair_material\", greatmaterials[0].name)}\r\n          {F(\"Altair materials\")}\r\n     |elif len(greatmaterials) = 2:\r\n          {SetState(\"altair_material\", greatmaterials[0].name)}\r\n          {F(\"Altair materials\")}\r\n           y \r\n          {SetState(\"altair_material\", greatmaterials[1].name)}\r\n          {F(\"Altair materials\")}\r\n     |else:\r\n          {set cur to 0}\r\n          {while cur < len(greatmaterials):\r\n             {if cur = 0:\r\n                  {SetState(\"altair_material\", greatmaterials[cur].name)}\r\n                  {F(\"Altair materials\")}\r\n             |elif cur < len(greatmaterials) - 1:\r\n                  , {SetState(\"altair_material\", greatmaterials[cur].name)}\r\n                    {F(\"Altair materials\")}\r\n             |else:\r\n                  ,y {SetState(\"altair_material\", greatmaterials[cur].name)}\r\n                  {F(\"Altair materials\")}\r\n             }\r\n             {set cur to cur + 1}\r\n          }\r\n     }\r\n}\r\n{if len(goodmaterials) > 0:\r\n     {if len(greatmaterials) > 0:\r\n            y altos niveles de \r\n     |else:\r\n            {Ocassionally (2,\"Este cuerpo estelar\")} contiene niveles altos de \r\n     }\r\n     {if len(goodmaterials) = 1:\r\n            {SetState(\"altair_material\", goodmaterials[0].name)}\r\n            {F(\"Altair materials\")}\r\n     |elif len(goodmaterials) = 2:\r\n            {SetState(\"altair_material\", goodmaterials[0].name)}\r\n            {F(\"Altair materials\")}\r\n            y \r\n            {SetState(\"altair_material\", goodmaterials[1].name)}\r\n            {F(\"Altair materials\")}\r\n     |else:\r\n            {set cur to 0}\r\n            {while cur < len(goodmaterials):\r\n                {if cur = 0:\r\n                    {SetState(\"altair_material\", goodmaterials[cur].name)}\r\n                    {F(\"Altair materials\")}\r\n                |elif cur < len(goodmaterials) - 1:\r\n                    , {SetState(\"altair_material\", goodmaterials[cur].name)}\r\n                      {F(\"Altair materials\")}\r\n                |else:\r\n                    ,y {SetState(\"altair_material\", goodmaterials[cur].name)}\r\n                       {F(\"Altair materials\")}\r\n                }\r\n                {set cur to cur + 1}\r\n            }\r\n     }\r\n}.\r\n",
      "default": false,
      "name": "Body scanned",
      "description": "Se activa cuando completas el escaneo de un cuerpo planetario"
    },
    "Bond awarded": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'bond')}\r\n{SetState('eddi_context_last_action', 'award')}\r\n{SetState('eddi_context_bond_amount', event.reward)}\r\n{SetState('eddi_context_bond_faction', event.awardingfaction)}\r\n\r\n{OneOf ('Recibidos','obtenidos','ingresados')} {event.reward} créditos por bonos de combate.",
      "default": false,
      "name": "Bond awarded",
      "description": "Se activa cuando se otorga un bono de combate"
    },
    "Bond redeemed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'bond')}\r\n{SetState('eddi_context_last_action', 'redeem')}\r\n{SetState('eddi_context_bond_amount', event.amount)}\r\n\r\n{OneOf(\"Se han reclamado\", \"han sido reclamados\",\"se han devengado\",\"han sido devengados\")}\r\n \r\nbonos de combate por {event.amount} créditos \r\n\r\n\r\n{Occasionally(2, \"\r\n  {if len(event.rewards) = 1:\r\n    de {event.rewards[0].faction}\r\n  |else:\r\n    . \r\n    {set cur to 0}\r\n    {while cur < len(event.rewards):\r\n        {if cur = 0:\r\n        |elif cur < len(event.rewards) - 1:\r\n            , \r\n        |else:\r\n            y\r\n        }\r\n        {event.rewards[cur].amount} créditos de\r\n        {event.rewards[cur].faction} \r\n        {set cur to cur + 1}\r\n    }\r\n  }\r\n\")}.",
      "default": false,
      "name": "Bond redeemed",
      "description": "Se activa cuando canjeas un bono de combate"
    },
    "Bounty awarded": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'bounty')}\r\n{SetState('eddi_context_last_action', 'award')}\r\n{SetState('eddi_context_bounty_name', event.target)}\r\n{SetState('eddi_context_bounty_faction', event.faction)}\r\n{SetState('eddi_context_bounty_amount', event.reward)}\r\n\r\n{Pause(500)}\r\n{if len(event.rewards) = 1:\r\n    Recibido bono de recompensa de {event.reward} créditos por parte de la facción {event.rewards[0].faction}\r\n|elif len(event.rewards) > 1:\r\n    Recibidos {len(event.rewards)} bonos de recompensa por un total de {event.reward} créditos\r\n}\r\n{if event.shared:\r\n    para repartir entre sus compañeros de escuadrón y usted.\r\n}.\r\n",
      "default": true,
      "name": "Bounty awarded",
      "description": "Se activa cuando te sumas una recompensa"
    },
    "Bounty incurred": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'bounty')}\r\n{SetState('eddi_context_last_action', 'incur')}\r\n{SetState('eddi_context_bounty_name', event.victim)}\r\n{SetState('eddi_context_bounty_faction', event.faction)}\r\n{SetState('eddi_context_bounty_amount', event.bounty)}\r\n\r\nLa facción {event.faction} acaba de poner una recompensa de {event.bounty} créditos por nuestra cabeza.",
      "default": true,
      "name": "Bounty incurred",
      "description": "Se activa cuando te ponen una recompensa"
    },
    "Bounty redeemed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'bounty')}\r\n{SetState('eddi_context_last_action', 'redeem')}\r\n{SetState('eddi_context_bounty_amount', event.amount)}\r\n\r\nDevengados {event.amount} créditos en vales de recompensas\r\n{Occasionally(2, \"\r\n  {if len(event.rewards) = 1:\r\n    por parte de {event.rewards[0].faction}\r\n  |else:\r\n    por parte de\r\n    {set cur to 0}\r\n    {while cur < len(event.rewards):\r\n        {if cur = 0:\r\n        |elif cur < len(event.rewards) - 1:\r\n            , \r\n        |else:\r\n            y\r\n        }\r\n        {event.rewards[cur].faction}\r\n        {set cur to cur + 1}\r\n    }\r\n  }\r\n\")}.\r\n",
      "default": false,
      "name": "Bounty redeemed",
      "description": "Se activa cuando cobras una recompensa"
    },
    "Cargo collected": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": "{SetState(\"altair_commodity\", event.cargo)} \r\n       {F(\"Altair commodities\")}\r\na bordo.\r\n",
      "default": false,
      "name": "Cargo collected",
      "description": "Triggered when you pick up cargo in your ship or SRV"
    },
    "Cargo ejected": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{SetState(\"altair_commodity\", event.cargo)} \r\n       {F(\"Altair commodities\")}\r\n expulsado.",
      "default": false,
      "name": "Cargo ejected",
      "description": "Triggered when you eject cargo from your ship or SRV"
    },
    "Cargo inventory": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Cargo inventory",
      "description": "Se activa cuando obtienes un inventario de tu cargamento"
    },
    "Cargo report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Cargo report }\n{_ Report current cargo manifest }\n\n{set cargocarried to 0}\n{set haulage to 0}\n{set illegal to false}\n{set stolen to false}\n\n{if len(inventory) > 0:\n    {for cargo in inventory:\n        {set cargocarried to cargocarried + cargo.total}\n        {set haulage to haulage + cargo.haulage}\n        {if cargo.stolen > 0: {set stolen to true}}\n        {if status.docked:\n            {for prohibited in station.prohibited:\n                {if cargo.name = prohibited: {set illegal to true}}\n            }\n        }\n    }\n}\n\n\n{if cargocarried > 0:\n    {if cargocarried = ship.cargocapacity:\n        Tu {OneOf(\"bahía de carga está llena\", \"compartimento de carga está lleno\")}.\n    |else:\n        Estás cargando {cargocarried} tonelada{if cargocarried != 1:s}\n    }\n\n    {if len(inventory) = 1:\n        {if inventory[0].name = \"Limpet\":\n            de drónes.\n        |else:\n            de {inventory[0].name}.\n        }\n    |else:\n        {if cargocarried < ship.cargocapacity: de cargamento.}\n        {Occasionally(2, \"Ahora mismo\")} {OneOf(\"llevamos\", \"transportamos\")} lo siguiente:\n        {set position to 0}\n        {for cargo in inventory:\n            {cargo.total} tonelada{if cargo.total != 1:s} de \n            {if cargo_commodity_array[0] = \"Limpet\":\n                de drónes\n            |else:\n                de {cargo.name}\n            }\n            {set position to position + 1}\n            {if position = len(inventory) - 1: y |else:,}\n        }\n    }.\n\n    {if cargocarried < ship.cargocapacity:\n        {set free to ship.cargocapacity - cargocarried}\n        Tienes {free} tonelada{if free != 1:s} {OneOf(\"\",\"de espacio libre\")}{if free != 1:s}.\n    }\n\n    {if stolen || illegal:\n        Atención: Llevamos carga\n        {if stolen: robada}\n        {if illegal:\n            {if stolen:, e }\n            ilegal en esta jurisdicción\n        }.\n    }\n\n|else:\n    {OneOf(\"Tu bahía de carga está vacía.\",\"No tienes carga.\",\"No llevas ninguna carga.\")}\n}\n\n",
      "default": true,
      "name": "Cargo report",
      "description": "Report current cargo manifest"
    },
    "Cargo updated": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Cargo updated }\r\n{_ Triggered when the cargo inventory is updated }\r\n\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'cargo')}\r\n{SetState('eddi_context_last_action', 'updated')}\r\n{SetState('eddi_context_cargo_carried', event.cargocarried)}\r\n",
      "default": true,
      "name": "Cargo updated",
      "description": "Activado cuando se actualiza el inventario de carga"
    },
    "Cleared save": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'save')}\r\n{SetState('eddi_context_last_action', 'clear')}\r\n\r\nAdiós comandante. Fué un placer servirle.",
      "default": false,
      "name": "Cleared save",
      "description": "Se activa cuando eliminas tu partida"
    },
    "Cockpit breached": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'cockpit')}\r\n{SetState('eddi_context_last_action', 'breach')}\r\n\r\nEl blindaje de la cabina ha sido gravemente dañado, se ha producido una brecha.",
      "default": false,
      "name": "Cockpit breached",
      "description": "Se activa cuando se rompe la cabina de la nave"
    },
    "Combat promotion": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'rank')}\r\n{SetState('eddi_context_last_action', 'promotion')}\r\n{SetState('eddi_context_rank_name', 'combat')}\r\n{SetState('eddi_context_rank_amount', event.rating)}\r\n\r\nSe ha reconocido su habilidad como guerrero comandante.",
      "default": false,
      "name": "Combat promotion",
      "description": "Se activa cuando aumenta tu rango de combate."
    },
    "Commander continued": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{SetState(\"altair_evitar_rollo_principio\", 1)}\r\n\r\nBienvenido {Occasionally (2,'a bordo')} {Occasionally (2,'de nuevo')} {OneOf('Señor','comandante')}. { Occasionally (2, OneOf('Shirka operativa y a su servicio','Todos los sistemas preparados','Shirka operativa esperando instrucciones'))}",
      "default": false,
      "name": "Commander continued",
      "description": "Se activa cuando cargas una partida guardada"
    },
    "Commander progress": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Commander progress",
      "description": "Se activa cuando se informa de tu progreso"
    },
    "Commander ratings": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Commander ratings",
      "description": "Se activa cuando se informa de tu clasificación"
    },
    "Commander started": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{OneOf ('Bienvenido comandante','Bienvenido de nuevo comandante','es un placer verle de nuevo comandante','me alegra verle de nuevo comandante','un placer verle de nuevo señor','me alegra tenerle de nuevo abordo comandante')}.",
      "default": false,
      "name": "Commander started",
      "description": "Se activa cuando empiezas una partida nueva"
    },
    "Commodity collected": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'commodity')}\r\n{SetState('eddi_context_last_action', 'collect')}\r\n{SetState('eddi_context_cargo_name', event.commodity)}\r\n\r\n\r\n{SetState(\"altair_commodity\", event.name)} \r\n       {F(\"Altair commodities\")}\r\na bordo.\r\n",
      "default": false,
      "name": "Commodity collected",
      "description": "Se activa cuando recoges mercancia con tu nave o VRS"
    },
    "Commodity ejected": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": false,
      "name": "Commodity ejected",
      "description": "Se activa cuando expulsas mercancia de tu nave o VRS"
    },
    "Commodity purchase check": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{for commodity in station.commodities:\r\n    {if commodity.stock > 0 && commodity.buyprice < commodity.avgprice:\r\n        {set discount to commodity.avgprice - commodity.buyprice}\r\n        {if discount > best.avgprice - best.buyprice:\r\n            {set thirdbest to secondbest}\r\n            {set secondbest to best}\r\n            {set best to commodity}\r\n        |elif discount > secondbest.avgprice - secondbest.buyprice:\r\n            {set thirdbest to secondbest}\r\n            {set secondbest to commodity}\r\n        |elif discount > thirdbest.avgprice - thirdbest.buyprice:\r\n            {set thirdbest to commodity}\r\n        }\r\n    }\r\n}\r\n\r\n{if best:\r\n    El mercado local vende \r\n       {SetState(\"altair_commodity\", best.name)} \r\n       {F(\"Altair commodities\")}\r\n    a buen precio.\r\n    {if secondbest\r\n       , tanto como \r\n     {SetState(\"altair_commodity\", secondbest.name)} \r\n     {F(\"Altair commodities\")}   \r\n        {if thirdbest:\r\n            y \r\n     {SetState(\"altair_commodity\", thirdbest.name)} \r\n     {F(\"Altair commodities\")} \r\n        }\r\n    }\r\n.}\r\n",
      "default": false,
      "name": "Commodity purchase check",
      "description": "Check to see which commodities are the best to purchase"
    },
    "Commodity purchased": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'commodity')}\r\n{SetState('eddi_context_last_action', 'purchase')}\r\n{SetState('eddi_context_commodity_name', event.commodity)}\r\n{SetState('eddi_context_commodity_amount', event.amount)}\r\n\r\n{SetState(\"altair_commodity\", event.commodity)}\r\n\r\n{if event.amount = 1:\r\n   Acaba de comprar una tonelada de {F(\"Altair commodities\")} por {event.price} créditos.\r\n|elif event.amount > 1:\r\n    Acaba de comprar {event.amount} toneladas de {F(\"Altair commodities\")} a {event.price} créditos por tonelada.  El coste total es de {Humanise(event.amount * event.price)} créditos.\r\n}",
      "default": false,
      "name": "Commodity purchased",
      "description": "Se activa cuando compras cualquier producto del mercado local"
    },
    "Commodity refined": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": false,
      "name": "Commodity refined",
      "description": "Se activa cuando se refina un producto"
    },
    "Commodity sale check": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Function to find a given commodity in market}\r\n{set market(commodity) to:\r\n    {for marketcommodity in station.commodities:\r\n        {if marketcommodity.EDDBID = commodity.EDDBID:\r\n            {return marketcommodity}\r\n        }\r\n    }\r\n}\r\n\r\n{set totalprofit to 0}\r\n{set profitablecommodities to []}\r\n{set stolencommodities to []}\r\n{set unknowncommodities to []}\r\n\r\n{for cargo in ship.cargo:\r\n    {if cargo.commodity.name != 'Limpet':\r\n        {set marketcommodity to market(cargo.commodity)}\r\n        {if !marketcommodity:\r\n            {_ We have no market information for this commodity.  Add it to the list of unknowns }\r\n            {set unknowncommodities to cat(unknowncommodities, [cargo.commodity])}\r\n        }\r\n        {set profit to (marketcommodity.sellprice - cargo.price) * cargo.amount}\r\n        {if cargo.stolen = true:\r\n            {set stolencommodities to cat(stolencommodities, [cargo.commodity])}\r\n        |elif cargo.missionid:\r\n            {_ don't do anything with mission cargo at the moment}\r\n        |elif marketcommodity && profit > 0:\r\n            {set profitablecommodities to cat(profitablecommodities, [cargo.commodity])}\r\n            {set totalprofit to totalprofit + profit}\r\n        }\r\n    }\r\n}\r\n\r\n{_ Let the user know about any commodities they can sell here for a profit}\r\n{if len(profitablecommodities) > 0:\r\n    Puede vender su\r\n    {if len(profitablecommodities) = 1:\r\n        {SetState(\"altair_commodity\", profitablecommodities[0].name)}\r\n        {F(\"Altair commodities\")} \r\n    |elif len(profitablecommodities) = 2:\r\n        {SetState(\"altair_commodity\", profitablecommodities[0].name)} {F(\"Altair commodities\")} \r\n         and \r\n        {SetState(\"altair_commodity\", profitablecommodities[1].name)} {F(\"Altair commodities\")} \r\n    |else:\r\n        {set cur to 0}\r\n        {while cur < len(profitablecommodities):\r\n            {if cur = 0:\r\n                {SetState(\"altair_commodity\", profitablecommodities[cur].name)} {F(\"Altair commodities\")} \r\n            |elif cur < len(profitablecommodities) - 1:\r\n                , {SetState(\"altair_commodity\", profitablecommodities[cur].name)} {F(\"Altair commodities\")}\r\n            |else:\r\n                , y {SetState(\"altair_commodity\", profitablecommodities[cur].name)} {F(\"Altair commodities\")}\r\n            }\r\n            {set cur to cur + 1}\r\n        }\r\n    }\r\n    por un total de {totalprofit} créditos de beneficio.\r\n}\r\n\r\n{_ Let the user know about any commodities about which we are unsure if they can sell for a profit}\r\n{if len(unknowncommodities) > 0:\r\n    Podría {if len(profitablecommodities) > 0: además } vender su \r\n    {if len(unknowncommodities) = 1:\r\n        {SetState(\"altair_commodity\", unknowncommodities[0].name)} {F(\"Altair commodities\")}\r\n    |elif len(unknowncommodities) = 2:\r\n        {SetState(\"altair_commodity\", unknowncommodities[0].name)} {F(\"Altair commodities\")}\r\n        y \r\n        {SetState(\"altair_commodity\", unknowncommodities[1].name)} {F(\"Altair commodities\")}\r\n    |else:\r\n        {set cur to 0}\r\n        {while cur < len(unknowncommodities):\r\n            {if cur = 0:\r\n                {SetState(\"altair_commodity\", unknowncommodities[cur].name)} {F(\"Altair commodities\")}\r\n            |elif cur < len(profitablecommodities) - 1:\r\n                , {SetState(\"altair_commodity\", unknowncommodities[cur].name)} {F(\"Altair commodities\")}\r\n            |else:\r\n                , y{SetState(\"altair_commodity\", unknowncommodities[cur].name)} {F(\"Altair commodities\")}\r\n            }\r\n            {set cur to cur + 1}\r\n        }\r\n    }\r\n    , sin embargo compruebe beneficios potenciales {if len(unknowncommodities) > 1: de estos |else: de este}  antes de confirmar la transacción.\r\n}\r\n\r\n{_ Let the user know about any stolen commodities they can sell on the black market}\r\n{if len(stolencommodities) > 0:\r\n    {if station.hasblackmarket:\r\n        Puede {OneOf('descargar', 'dump', 'fence')} su\r\n        {if len(stolencommodities) = 1:\r\n            {SetState(\"altair_commodity\", stolencommodities[0].name)} {F(\"Altair commodities\")}\r\n        |elif len(stolencommodities) = 2:\r\n            {SetState(\"altair_commodity\", stolencommodities[0].name)} {F(\"Altair commodities\")}\r\n            y\r\n            {SetState(\"altair_commodity\", stolencommodities[1].name)} {F(\"Altair commodities\")}\r\n        |else:\r\n            {set cur to 0}\r\n            {while cur < len(stolencommodities):\r\n                {if cur = 0:\r\n                    {SetState(\"altair_commodity\", stolencommodities[cur].name)} {F(\"Altair commodities\")}\r\n                |elif cur < len(stolencommodities) - 1:\r\n                    , {SetState(\"altair_commodity\", stolencommodities[cur].name)} {F(\"Altair commodities\")}\r\n                |else:\r\n                    , y {SetState(\"altair_commodity\", stolencommodities[cur].name)} {F(\"Altair commodities\")}\r\n                }\r\n                {set cur to cur + 1}\r\n            }\r\n        }\r\n        robado aquí.\r\n    |else:\r\n        Recuerde:  {OneOf(\"tenemos cargamento robado a bordo\", \"llevamos mercancías robadas a bordo\", \"estamos transportando cargamento robado\", \"estamos transportando mercancías robadas\")}.\r\n    }\r\n}\r\n",
      "default": false,
      "name": "Commodity sale check",
      "description": "Check to see which commodities can be sold here"
    },
    "Commodity sold": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'commodity')}\r\n{SetState('eddi_context_last_action', 'sell')}\r\n{SetState('eddi_context_commodity_name', event.commodity)}\r\n{SetState('eddi_context_commodity_amount', event.amount)}\r\n\r\n{SetState(\"altair_commodity\", event.commodity)}\r\n\r\n{if event.amount = 1:\r\n   Acaba de vender una tonelada de {F(\"Altair commodities\")} por {event.price} créditos\r\n|elif event.amount > 1:\r\n    Acaba de vender {event.amount} toneladas de {F(\"Altair commodities\")} a {event.price} créditos por tonelada.  El valor total son {event.amount * event.price} créditos\r\n}\r\n{if event.profit < 0:\r\n    con una pérdida de {-1 * event.profit * event.amount} créditos.\r\n|elif event.profit = 0:\r\n    sin ganancias ni pérdidas.\r\n|else:\r\n    con un beneficio de {event.profit * event.amount} créditos.\r\n}",
      "default": false,
      "name": "Commodity sold",
      "description": "Se activa cuando vende mercancía."
    },
    "Community goal": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": "{_ Set Context _}\r\n{SetState('eddi_context_last_subject', 'community goal')}\r\n{_ Save goal location to context if there is only one goal present _}\r\n{if len(event.cgid) = 1:\r\n   {SetState('eddi_context_goal_system_name', event.system[0])}\r\n   {SetState('eddi_context_goal_station_name', event.station[0])}\r\n}\r\n\r\n{F('Honorific')}, \r\n\r\n{if len(event.name) > 1:\r\n    {OneOf(\"ha expresado su interés en\", \"estoy siguiendo\")}\r\n    los siguientes eventos de la comunidad:\r\n|else: \r\n    El evento de la comunidad,    \r\n}\r\n\r\n{set cur to 0}\r\n{while cur < len(event.name):\r\n\r\n   {if cur = 0 && len(event.name) = 1:\r\n      {_ nothing _}\r\n   |elif cur = 0 && len(event.name) > 1:\r\n      El primero,\r\n   |elif cur < (len(event.name) - 1):\r\n      el siguiente, \r\n   |else:\r\n      el último,\r\n   }\r\n\r\n   {event.name[cur]},\r\n\r\n   {if event.iscomplete[cur]:\r\n      {OneOf(\"está completado\", \"ha finalizado\")} \r\n   |else: \r\n      {if (event.expiry[cur] / 3600) < 12:\r\n         {OneOf(\"está a punto de terminar\", \r\n                \"terminará en {round(event.expiry[cur] / 3600, 1)} horas\", \r\n                \"está casi completado\")}\r\n      |else:\r\n         {OneOf(\"no se ha completado aun\", \r\n                \"está activo\", \r\n                \"está incompleto\")} \r\n      }\r\n   }\r\n\r\n   {if event.tier[cur]:\r\n       {OneOf(\"y ha alcanzado\", \"y está actualmente en\")} {event.tier[cur]}.\r\n       {if event.contribution[cur] > 0:\r\n           Su recompensa asignada está\r\n           {Occasionally(2, \" actualmente \")}\r\n           {Occasionally(2, \"calculada \")}\r\n           en {event.tierreward[cur]} créditos\r\n           {Occasionally(2, \"en el {event.percentileband[cur]} por ciento\")}\r\n       }\r\n   }.\r\n\r\n   {_ Create a comparison function _}\r\n   {set compare(stat) to:     \r\n       {if stat < 0.01:\r\n            solo una fracción de            \r\n       |elif stat < 0.10:\r\n            menos de un décimo de \r\n       |elif stat < 0.25:\r\n            menos de un cuarto de\r\n       |elif stat < 0.5:\r\n            menos de la mitad de\r\n       |elif stat < 0.75:\r\n            menos de\r\n       |elif stat < 0.96: \r\n            {OneOf(\"apenas un poco\",\"ligeramente\")}\r\n            menos de\r\n       |elif stat < 1.05:\r\n            {OneOf(\"aproximádamente\",\"casi\")} \r\n            igual a \r\n       |elif stat < 1.25:\r\n            un poco más de \r\n       |elif stat < 1.5:\r\n            más de \r\n       |elif stat < 2:\r\n            significativamente más de\r\n       |else:\r\n            bastante más de\r\n       }\r\n    }\r\n    {set compare_contribution to (event.contribution[cur] / round(event.total[cur] / event.contributors[cur], 0))}\r\n\r\n    {if compare_contribution != 0:\r\n       {if event.toprank[cur]: \r\n          Enhorabuena! \r\n          Es usted uno de los {event.topranksize[cur]} mejores comandantes en este evento, habiendo contribuido con \r\n          {compare(compare_contribution)}\r\n          la media.\r\n       |else:\r\n          {Occasionally(2, \"Ha contribuido con \r\n          {compare(compare_contribution)}\r\n          la media.\")}\r\n       }\r\n    }\r\n\r\n    {if !event.iscomplete[cur]:\r\n       Puede \r\n       {if event.contribution[cur] > 0: \r\n          {OneOf(\"contribuir más\", \"hacer contribuciones adicionales\")} \r\n       |else: \r\n          {OneOf(\"contribuir\", \"hacer una contribución\")}\r\n       }\r\n       {if event.station[cur] = station.name:\r\n          {Occasionally(2, \"aquí\")}\r\n          {Occasionally(2, \"en esta estación\")}.\r\n       |elif event.system[cur] = system.name:\r\n          en {event.station[cur]}\r\n          {Occasionally(2, \"aquí\")}\r\n          {Occasionally(2, \"en este sistema\", \"en el sistema donde nos encontramos\")}.\r\n       |else:\r\n          en {event.station[cur]},\r\n          en {OneOf(\"{event.system[cur]}\", \"el sistema {event.system[cur]}\" )}.\r\n       }\r\n    }\r\n\r\n    {set cur to cur + 1}\r\n    {Pause(1000)}\r\n}",
      "default": false,
      "name": "Community goal",
      "description": "Se activa cuando se comprueba el estado de los objetivos de la comunidad"
    },
    "Controlling fighter": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{OneOf(\"enlace neural\", \"enlace\")} {Occasionally(2, \"con el caza\")} {OneOf(\"iniciado\", \"establecido\", \"fijado\")}.",
      "default": true,
      "name": "Controlling fighter",
      "description": "Se activa cuando cambias el control de tu nave al de tu caza."
    },
    "Controlling ship": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{OneOf(\"Enlace neural\", \"enlace\", \"enlace\")} {OneOf(\"terminado\", \"desconectado\")}.",
      "default": true,
      "name": "Controlling ship",
      "description": "Se activa cuando cambias del control de tu caza al de tu nave"
    },
    "Crew assigned": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if event.role = \"Active\":\r\n    {event.name} está ahora en servicio activo.\r\n|else:\r\n    {event.name} retirandose del servicio activo.\r\n}",
      "default": true,
      "name": "Crew assigned",
      "description": "Se activa cuando asignas a alguien a tu tripulación"
    },
    "Crew fired": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'crew')}\r\n{SetState('eddi_context_last_action', 'fire')}\r\n{SetState('eddi_context_crew_name', event.name)}\r\n\r\n{event.name} ya no es miembro de la tripulación.",
      "default": false,
      "name": "Crew fired",
      "description": "Se activa cuando despides a alguien de tu tripulación"
    },
    "Crew hired": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'crew')}\r\n{SetState('eddi_context_last_action', 'hire')}\r\n{SetState('eddi_context_crew_name', event.name)}\r\n\r\n{event.name} se ha unido a la tripulación.",
      "default": false,
      "name": "Crew hired",
      "description": "Se activa cuando contratas a alguien a tu tripulación"
    },
    "Crew joined": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'crew')}\r\n{SetState('eddi_context_last_action', 'join')}\r\n{SetState('eddi_context_crew_name', event.captain)}\r\n\r\nSe ha unido a la tripulación del comandante {slice (event.captain,10)}.",
      "default": false,
      "name": "Crew joined",
      "description": "Se activa cuando te unes a una tripulación"
    },
    "Crew left": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'crew')}\r\n{SetState('eddi_context_last_action', 'leave')}\r\n{SetState('eddi_context_crew_name', event.captain)}\r\n\r\nHa abandonado la tripulación del comandante {slice (event.captain,10)}.",
      "default": false,
      "name": "Crew left",
      "description": "Se activa cuando sales de una tripulación"
    },
    "Crew member joined": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'crew')}\r\n{SetState('eddi_context_last_action', 'join')}\r\n{SetState('eddi_context_crew_name', event.crew)}\r\n\r\nEl comandante {slice (event.crew,10)} se ha unido a su tripulación.",
      "default": true,
      "name": "Crew member joined",
      "description": "Se activa cuando un comandante se une a tu tripulación"
    },
    "Crew member launched": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'crew')}\r\n{SetState('eddi_context_last_action', 'launch')}\r\n{SetState('eddi_context_crew_name', event.crew)}\r\n\r\n{event.crew} ha lanzado su caza..",
      "default": false,
      "name": "Crew member launched",
      "description": "Se activa cuando un miembro de tu tripulación lanza el caza"
    },
    "Crew member left": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'crew')}\r\n{SetState('eddi_context_last_action', 'leave')}\r\n{SetState('eddi_context_crew_name', event.crew)}\r\n\r\nEl comandante {slice (event.crew,10)} ha abandonado su tripulación.",
      "default": false,
      "name": "Crew member left",
      "description": "Se activa cuando un comandante deja tu tripulación"
    },
    "Crew member removed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'crew')}\r\n{SetState('eddi_context_last_action', 'remove')}\r\n{SetState('eddi_context_crew_name', event.crew)}\r\n\r\nHa expulsado al comandante {slice (event.crew,10)} de su tripulación.",
      "default": false,
      "name": "Crew member removed",
      "description": "Se activa cuando despides a un comandante de tu tripulación"
    },
    "Crew member role changed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\n{SetState('eddi_context_last_subject', 'crew')}\n{SetState('eddi_context_last_action', 'role')}\n{SetState('eddi_context_crew_name', event.crew)}\n{SetState('eddi_context_crew_role', event.role)}\n\n{if event.role = 'Idle':\n    {event.crew} está desocupado\n|elif event.role = 'Fighter':\n    {event.crew} está controlando un caza\n|elif event.role = 'Gunner':\n    {event.crew} está de artillero\n}.\n",
      "default": true,
      "name": "Crew member role changed",
      "description": "Se activa cuando un miembro de tu tripulación cambia su rol"
    },
    "Crew role changed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if event.role = 'Gunner':\r\n  Usted es ahora el artillero de esta tripulación.\r\n|elif event.role = 'Fighter':\r\n  Usted es ahora el piloto de caza de esta tripulación.\r\n|elif event.role = 'Idle':\r\n  Ha sido desasignado del servicio activo.\r\n}",
      "default": false,
      "name": "Crew role changed",
      "description": "Se activa cuando cambia tu rol en una tripulación"
    },
    "Damage check": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Track if there is any damage}\r\n{set damaged to 0}\r\n\r\n{_ Announce hull health}\r\n{if ship.health < 100:\r\n    Casco al  {ship.health}%.\r\n    {set damaged to 1}\r\n}\r\n\r\n{_ Announce critical module health}\r\n\r\n{set minordamage to []}\r\n{set majordamage to []}\r\n\r\n{if ship.powerplant.health < 60:\r\n    {set majordamage to cat(majordamage, [ship.powerplant])}\r\n|elif ship.powerplant.health < 100:\r\n    {set minordamage to cat(minordamage, [ship.powerplant])}\r\n}\r\n\r\n{if ship.thrusters.health < 60:\r\n    {set majordamage to cat(majordamage, [ship.thrusters])}\r\n|elif ship.thrusters.health < 100:\r\n    {set minordamage to cat(minordamage, [ship.thrusters])}\r\n}\r\n\r\n{if ship.frameshiftdrive.health < 60:\r\n    {set majordamage to cat(majordamage, [ship.frameshiftdrive])}\r\n|elif ship.frameshiftdrive.health < 100:\r\n    {set minordamage to cat(minordamage, [ship.frameshiftdrive])}\r\n}\r\n\r\n{if ship.powerdistributor.health < 60:\r\n    {set majordamage to cat(majordamage, [ship.powerdistributor])}\r\n|elif ship.powerdistributor.health < 100:\r\n    {set minordamage to cat(minordamage, [ship.powerdistributor])}\r\n}\r\n\r\n{if ship.lifesupport.health < 60:\r\n    {set majordamage to cat(majordamage, [ship.lifesupport])}\r\n|elif ship.lifesupport.health < 100:\r\n    {set minordamage to cat(minordamage, [ship.lifesupport])}\r\n}\r\n\r\n{if ship.sensors.health < 60:\r\n    {set majordamage to cat(majordamage, [ship.sensors])}\r\n|elif ship.sensors.health < 100:\r\n    {set minordamage to cat(minordamage, [ship.sensors])}\r\n}\r\n\r\n{if len(majordamage) > 0:\r\n    {set damaged to 1}\r\n    Daños graves en \r\n    {if len(majordamage) = 1:\r\n        {majordamage[0].name}\r\n    |elif len(majordamage) = 2:\r\n        {majordamage[0].name} y {majordamage[1].name}\r\n    |else:\r\n        {set cur to 0}\r\n        {while cur < len(majordamage):\r\n            {if cur = 0:\r\n                {majordamage[cur].name}\r\n            |elif cur < len(majordamage) - 1:\r\n                , {majordamage[cur].name}\r\n            |else:\r\n                ,y {majordamage[cur].name}\r\n            }\r\n            {set cur to cur + 1}\r\n        }\r\n    }.\r\n}\r\n\r\n{if len(minordamage) > 0:\r\n    {set damaged to 1}\r\n    Daños leves en \r\n    {if len(minordamage) = 1:\r\n        {minordamage[0].name}\r\n    |elif len(minordamage) = 2:\r\n        {minordamage[0].name} y {minordamage[1].name}\r\n    |else:\r\n        {set cur to 0}\r\n        {while cur < len(minordamage):\r\n            {if cur = 0:\r\n                {minordamage[cur].name}\r\n            |elif cur < len(minordamage) - 1:\r\n                , {minordamage[cur].name}\r\n            |else:\r\n                ,y {minordamage[cur].name}\r\n            }\r\n            {set cur to cur + 1}\r\n        }\r\n    }.\r\n}\r\n\r\n{_ Announce other module health}\r\n\r\n{set minordamage to []}\r\n{set majordamage to []}\r\n\r\n{for compartment in ship.compartments:\r\n    {if compartment.module.health < 60:\r\n        {set majordamage to cat(majordamage, [compartment.module.name])}\r\n    |elif hardpoint.module.health < 100:\r\n        {set minordamage to cat(minordamage, [compartment.module.name])}\r\n    }\r\n}\r\n\r\n{for hardpoint in ship.hardpoints:\r\n    {if hardpoint.module.health < 60:\r\n        {set majordamage to cat(majordamage, [hardpoint.module.name])}\r\n    |elif hardpoint.module.health < 100:\r\n        {set minordamage to cat(minordamage, [hardpiont.module.name])}\r\n    }\r\n}\r\n\r\n{if len(majordamage) > 0:\r\n    {set damaged to 1}\r\n    {if len(majordamage) = 1:\r\n       Otro componente de la nave con daños graves\r\n    |elif len(majordamage) > 1:\r\n        {len(majordamage)} otros componentes de la nave con daños graves\r\n    }\r\n    {if len(minordamage) = 1:\r\n       y otro componente de la nave con daños leves\r\n    |elif len(minordamage) > 1:\r\n       y {len(minordamage)} otro componente de la nave con daños leves\r\n    }.\r\n|elif len(minordamage) = 1:\r\n    {set damaged to 1}\r\n    Otro componente de la nave con daños leves.\r\n|elif len(minordamage) > 1:\r\n    {set damaged to 1}\r\n    {len(minordamage)} otros componentes de la nave con daños leves.\r\n}\r\n\r\n{if damaged = 0:\r\n    {OneOf(\"Todos los sistemas completamente operativos.\", \"La nave es completamente operativa.\", \"La nave no está dañada.\")}\r\n}\r\n",
      "default": false,
      "name": "Damage check",
      "description": "Check on the levels of damage to your ship"
    },
    "Data scanned": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Data scanned }\r\n{_ Triggered when scanning some types of data links }\r\n\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'scan')}\r\n{SetState('eddi_context_last_action', 'data')}\r\n{SetState('eddi_context_data_scan_type', event.datalinktype)}\r\n\r\nEscaneo de datos completado.",
      "default": false,
      "name": "Data scanned",
      "description": "Se activa cuando se escanean algunos tipos de enlaces de datos."
    },
    "Data voucher awarded": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Data voucher awarded }\r\n{_ Triggered when you are awarded a data voucher }\r\n\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'data_voucher')}\r\n{SetState('eddi_context_last_action', 'award')}\r\n{SetState('eddi_context_bond_amount', event.reward)}\r\n{SetState('eddi_context_bond_faction', event.payeefaction)}\r\n\r\nOtorgado bono de datos de {event.payeefaction} por {event.reward} créditos.\r\n",
      "default": true,
      "name": "Data voucher awarded",
      "description": "Triggered when you are awarded a data voucher"
    },
    "Data voucher redeemed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'data_voucher')}\r\n{SetState('eddi_context_last_action', 'redeem')}\r\n{SetState('eddi_context_data_voucher_amount', event.amount)}\r\n\r\nDevengados {event.amount} créditos en vales de datos\r\n{Occasionally(2, \"\r\n  {if len(event.rewards) = 1:\r\n    por parte de la facción {event.rewards[0].faction}\r\n  |else:\r\n    por parte de \r\n    {set cur to 0}\r\n    {while cur < len(event.rewards):\r\n        {if cur = 0:\r\n        |elif cur < len(event.rewards) - 1:\r\n            , \r\n        |else:\r\n            y\r\n        }\r\n        {event.rewards[cur].faction}\r\n        {set cur to cur + 1}\r\n    }\r\n  }\r\n\")}.\r\n",
      "default": false,
      "name": "Data voucher redeemed",
      "description": "Se activa cuando reclamas bonos de datos"
    },
    "Datalink message": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Datalink message",
      "description": "Se activa al completar un escaneo de un enlace de datos"
    },
    "Died": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": "    {ShipName()} ha sido\r\n    {OneOf(\"destruida\", \"aniquilada\", \"pulverizada\")}\r\n\r\n    ",
      "default": false,
      "name": "Died",
      "description": "Se activa cuando mueres"
    },
    "Docked": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{OneOf('Nave acoplada con éxito','Acoplamiento exitoso','Acoplamiento correcto','Acoplamiento finalizado con éxito')}.\r\n{Pause(2000)}\r\n\r\n{OneOf(\"Estableciendo enlace con \",\r\n             \"Inicializando enlace con \",\r\n             \"Conectando a \",\r\n             \"Accediendo a \")}\r\n{OneOf(\"red de datos\", \"red\", \"red de servicio\", \"sistema\", \"servicio\")}\r\n{OneOf(\"local\", \"de la estación\", \"de {event.station}\")}.\r\n\r\n{Pause(3000)}\r\n\r\n{OneOf(\"Enlace\", \"Enlace\", \"Acceso\", \"Acceso\")} {OneOf(\"establecido\", \"confirmado\", \"conseguido\", \"autorizado\")}.\r\n\r\n{F(\"Commodity sale check\")}\r\n\r\n{if ship.role = \"Multi-purpose\" || ship.role = \"Trading\":\r\n    {F(\"Commodity purchase check\")}\r\n}\r\n\r\n{F(\"Swapout check\")}\r\n\r\n{F(\"Limpet check\")}",
      "default": false,
      "name": "Docked",
      "description": "Se activa cuando su nave aterriza en una estación espacial o puesto avanzado"
    },
    "Docking cancelled": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Solicitud de aterrizaje cancelada.",
      "default": true,
      "name": "Docking cancelled",
      "description": "Se activa cuando su nave cancela el aterrizaje solicitado en una estación espacial o puesto avanzado"
    },
    "Docking denied": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "\r\n{Pause(2000)}\r\n\r\n{OneOf('Hemos recibido una denegación del permiso de aterrizaje','Se nos ha denegado el permiso de aterrizaje','nos informan de que no pueden darnos permiso para aterrizar')}\r\n\r\n{if event.reason = \"ActiveFighter\":\r\n    porque nuestro caza está desplegado\r\n|elif event.reason = \"Distance\":\r\n    {OneOf('porque estamos demasiado lejos de la estación','Porque no hemos alcanzado la distancia mínima a la estación')}{OneOf (' ',' ','. Debemos acercarnos al menos a sietemil quinientos metros')}\r\n|elif event.reason = \"Hostile\":\r\n    {OneOf('porque a la facción que controla la estación no le gustamos','porque la facción que controla la estación nos considera hostiles')}\r\n|elif event.reason = \"NoSpace\":\r\n        {OneOf('porque no hay espacio disponible','porque todas las plataformas están ocupadas','porque no hay plataformas libres de tamaño adecuado para esta nave')}{OneOf (' ',' ','. Debemos esperar a que quede una plataforma libre')}\r\n|elif event.reason = \"Offences\":\r\n    porque hemos cometido una ofensa contra ellos recientemente\r\n|elif event.reason = \"TooLarge\":\r\n    porque no hay pistas de aterrizaje de tamaño suficiente para albergar esta nave\r\n} \r\n{OneOf ('comandante','señor',' ',' ')}\r\n.",
      "default": false,
      "name": "Docking denied",
      "description": "Se activa cuando a su nave le es denegado el aterrizaje en una estación espacial o puesto avanzado"
    },
    "Docking granted": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'landing pad')}\r\n{SetState('eddi_context_landing_pad_system', system.name)}\r\n{SetState('eddi_context_landing_pad_station', event.station)}\r\n{SetState('eddi_context_landing_pad_pad', event.landingpad)}\r\n\r\n{set station to StationDetails(event.station)}\r\n\r\n{if station.model = \"Coriolis Starport\" || station.model = \"Orbis Starport\" || station.model = \"Ocellus Starport\" || station.model = \"Asteroid Base\" || station.model = \"Unknown Starport\":\r\n    {Pause(8000)}\r\n    {F(\"Landing pad report\")}\r\n}\r\n",
      "default": false,
      "name": "Docking granted",
      "description": "Se activa cuando se te concede permiso a tu nave para aterrizar en una estación espacial o puesto avanzado"
    },
    "Docking requested": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Docking requested",
      "description": "Se activa cuando tu nave solicita el aterrizaje en una estación espacial o puesto avanzado"
    },
    "Docking timed out": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{OneOf ('No hemos recibido respuesta a nuestra solicitud de aterrizaje','la estación no ha respondido a nuestra solicitud de aterrizaje')}  {OneOf ('comandante','señor',' ')}.",
      "default": false,
      "name": "Docking timed out",
      "description": "Se activa cuando tu solicitud de aterrizaje expira"
    },
    "Empire honorific": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Forms of address taken from <https://en.wikipedia.org/wiki/Forms_of_address_in_the_United_Kingdom>}\n{if cmdr.empirerating.rank <= 4: {_ Commoner }\n   Comandante\n|elif cmdr.empirerating.rank = 5: {_ Knight / Dame }\n    {if cmdr.gender = \"Hombre\": \n        señor\n    |elif cmdr.gender = \"Mujer\": \n        madám\n    |else: \n        Comandante\n    }\n|elif cmdr.empirerating.rank <= 11: {_ Peer / Peeress }\n    {if cmdr.gender = \"Hombre\": \n        {OneOf(\"señor\", \"su señoría\")}\n    |elif cmdr.gender = \"Mujer\": \n        {OneOf(\"madám\", \"su señoría\")}\n    |else: \n        Comandante\n    }\n|elif cmdr.empirerating.rank = 12:\n    su gracia\n|elif cmdr.empirerating.rank = 13:\n    su alteza real\n|elif cmdr.empirerating.rank = 14:\n    su majestad\n}\n",
      "default": true,
      "name": "Empire honorific",
      "description": "Function to provide a suitable honorific for your commander when in the empire"
    },
    "Empire promotion": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if event.rank = \"Knight\":\r\n    Señor\r\n|elif event.rank = \"Lord\":\r\n    milord\r\n|elif event.rank = \"Baron\":\r\n    milord\r\n|elif event.rank = \"Viscount\":\r\n    milord\r\n|elif event.rank = \"Count\":\r\n    milord\r\n|elif event.rank = \"Earl\":\r\n    milord\r\n|elif event.rank = \"Marquis\":\r\n    milord\r\n|elif event.rank = \"Duke\":\r\n    su gracia\r\n|elif event.rank = \"Prince\":\r\n    su alteza real\r\n|elif event.rank = \"King\":\r\n    su majestad\r\n|else:\r\n    comandante\r\n},\r\nLa armada imperial\r\n{OneOf(\"le ha otorgado un ascenso\", \"le ha ascendido\", \"le ha promovido\")}\r\nal rango de \r\n{event.rank}\r\n{Occasionally(2, \"por sus servicios al imperio\")}.",
      "default": false,
      "name": "Empire promotion",
      "description": "Se activa cuando asciende de rango en el Imperio"
    },
    "Engineer progressed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{event.engineer} le ha dado acceso a planos de nivel {event.rank}.",
      "default": false,
      "name": "Engineer progressed",
      "description": "Se activa cuando alcanza un nuevo rango con un Ingeniero"
    },
    "Entered CQC": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Entrando en combate CQC.",
      "default": false,
      "name": "Entered CQC",
      "description": "Se activa cuando entra en CQC"
    },
    "Entered normal space": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'fsd')}\r\n{SetState('eddi_context_last_action', 'disengage')}\r\n{SetState('eddi_context_system_name', event.system)}\r\n{SetState('eddi_context_body_name', event.body)}\r\n{SetState('eddi_context_body_system', event.system)}\r\n\r\n{Pause(5000)}\r\n\r\n{OneOf(\"saliendo de velocidad de supercrucero \", \"{OneOf(\\\"entrando en\\\", \\\"regresando a\\\", \\\"volviendo a\\\")} espacio normal \")}\r\n\r\n{if event.bodytype = 'Planet':\r\n    {OneOf(\"cerca del\", \"al lado del\", \"a poca distancia del \")} planeta {event.body} \r\n|elif event.bodytype = 'Star':\r\n    {OneOf(\"cerca de la\", \"al lado de la\", \"a poca distancia de la \")} estrella {event.body} \r\n  |elif event.bodytype = 'Station':\r\n    {OneOf(\"cerca de \", \"al lado de \", \"a poca distancia de \")} {event.body} \r\n}\r\n{OneOf ('comandante',' ',' ')}\r\n.\r\n",
      "default": false,
      "name": "Entered normal space",
      "description": "Se activa cuando su nave vuelve a espacio normal"
    },
    "Entered signal source": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{set warninglevel to:\r\n   {set entered to OneOf(\"Hemos entrado en una señal\", \"Entramos en una señal\", \"Entrando en una señal\")}\r\n\r\n   {if event.threat < 2:\r\n      {entered}\r\n   |elif event.threat = 2:\r\n      Precaución. {entered} de amenaza media\r\n   |elif event.threat = 3:\r\n      Alerta. {entered} de alta amenaza\r\n   |elif event.threat = 4:\r\n      Peligro. {entered} de muy alta amenaza\r\n   |elif event.threat = 5:\r\n      Peligro extremo. {Occasionally(2, entered)} de muy alta amenaza\r\n   |elif event.threat = 6:\r\n      Peligro extremo. {Occasionally(2, entered)} de amenaza extremadamente alta\r\n   |elif event.threat = 7:\r\n      Peligro extremo. {Occasionally(2, entered)} de ultra alta amenaza\r\n   |else:\r\n      Peligro extremo. {Occasionally(2, entered)} de nivel {event.threat} de amenaza sin precedentes\r\n   }\r\n}\r\n\r\n{set source to token(event.source, \"$USS_Type_\", 1)}\r\n{if source = \"Aftermath;\":\r\n   {set source to OneOf(\"procedente de las consecuencias de un combate\", \"procedente de los restos de una batalla\")}\r\n|elif ((source = \"Anomaly;\" || source = \"Salvage;\") && event.threat = 2):\r\n   {set warninglevel to entered}\r\n   {set source to OneOf(\"de origen alienínega\", \"de procedencia no humana\", \"de una sonda targoide\")}\r\n|elif (source = \"Anomaly;\" && event.threat = 4):\r\n   {set warninglevel to entered}\r\n   {set source to OneOf(\"de origen alienígena\", \"de procedencia no humana\", \"de un sensor targoide\")}\r\n|elif source = \"Anomaly;\":\r\n   {set source to OneOf(\"de origen anómalo\", \"de procedencia desconocida\", \"de procedencia misteriosa\")}\r\n|elif source = \"Ceremonial;\":\r\n    {set source to \"procedente de comunicaciones ceremoniales\"}\r\n|elif source = \"Convoy;\":\r\n    {set source to \"procedente de un convoy\"}\r\n|elif source = \"DisruptedWakeEchoes;\":\r\n    {set source to \"\"}\r\n|elif source = \"DistressSignal;\":\r\n   {set source to \"procedente de un desastre\"}\r\n|elif source = \"MissionTarget;\":\r\n   {set source to OneOf(\"procedente de una misión\", \"codificada en una misión\")}\r\n|elif source = \"NonHuman;\":\r\n   {set source to OneOf(\"de origen alienígena\",\"de procedencia no humana\")}\r\n|elif source = \"Salvage;\":\r\n    {set source to \"procedente de transmisiones deterioradas\"}\r\n|elif source = \"ValuableSalvage;\":\r\n    {set source to \"procedente de emisiones codificadas\"}\r\n|elif source = \"VeryValuableSalvage;\":\r\n    {set source to \"procedente de emisiones de alto grado\"}\r\n|elif source = \"WeaponsFire;\":\r\n   {set source to OneOf(\"procedente de un combate\", \"originada por disparo de armas\")}\r\n}\r\n\r\n{Pause(2000)}\r\n{warninglevel} {source}. \r\n\r\n{if system.state = \"Anarchy\" && source = \"procedente de transmisiones deterioradas\" && system.population > 0: \r\n   {Occasionally(2, \"\r\n      Precaución.\r\n      {set local to OneOf('locales', 'cercanas')}\r\n      {set chatter to OneOf('comentarios', 'chismorreos', 'rumores')}\r\n      {set indicate to OneOf('indican', 'sugieren', 'implican', 'informan')}\r\n      {OneOf('transmisiones {local} {indicate}', \r\n         '{chatter} en transmisiones {local} {indicate}')}\r\n      {Occasionally(3, 'que hay')}\r\n      {OneOf('elevada', 'alta', 'considerable')}\r\n      {OneOf('actividad de', 'presencia de')}\r\n      {OneOf('{Occasionally(2, \\\\'sindicatos\\\\')} criminales ', \r\n             '{Occasionally(2, OneOf(\\\\'bandas\\\\', \\\\'clanes\\\\'))} piratas ' )}\r\n      en {OneOf('el área', 'los alrededores', 'este sector', 'este sistema')}.\r\n      {OneOf('Permanezca', 'esté', 'manténgase')} {OneOf('vigilante', 'alerta', 'atento')} \r\n      {Occasionally(3,' {F(\\\\'Honorific\\\\')}' )}.\r\n   \")}\r\n}",
      "default": false,
      "name": "Entered signal source",
      "description": "Se activa cuando su nave entra en una señal"
    },
    "Entered supercruise": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'fsd')}\r\n{SetState('eddi_context_last_action', 'engage')}\r\n\r\n{Pause(1000)}\r\n\r\n{OneOf ('{OneOf(\"entrando en\", \"saltando a \")} velocidad de supercrucero  ','viajando a velocidad superior a la luz ','viajando en supercrucero ')} {OneOf(' ',' ',' ','comandante')}.\r\n\r\n",
      "default": false,
      "name": "Entered supercruise",
      "description": "Se activa cuando su nave entra en supercrucero"
    },
    "Exploration data purchased": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{OneOf(\"Adquiridos datos de {OneOf('sistema', 'exploración')} de {event.system}\",\r\n            \"datos de {OneOf('sistema', 'exploración')} de {event.system} ya disponibles\",\r\n            \"{Occasionally(3, 'la nave ha')} Recibido datos de {OneOf('sistema', 'exploración')} de {event.system} desde los servicios de la estación\",\r\n            \"Recepción de datos de {OneOf('sistema', 'exploración')} de {event.system} confirmada\")}.",
      "default": false,
      "name": "Exploration data purchased",
      "description": "Se activa cuando compra datos de exploración"
    },
    "Exploration data sold": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Datos de exploración de {len(event.systems)} sistemas vendidos por {event.reward} créditos\r\n\r\n{if len(event.firsts) > 0:\r\n    , con una bonificación adicional de {event.bonus} créditos por\r\n    {if len(event.firsts) = 1:\r\n        un primer descubrimiento\r\n    |else:\r\n        {len(event.firsts)} primeros descubrimientos\r\n    }\r\n}\r\n.",
      "default": false,
      "name": "Exploration data sold",
      "description": "Se activa cuando vendes datos de exploración"
    },
    "Exploration promotion": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Se han reconocido sus habilidades como explorador comandante.",
      "default": false,
      "name": "Exploration promotion",
      "description": "Se activa cuando aumenta su rango de exploración"
    },
    "Federation promotion": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "La armada federal\r\n{OneOf(\"le ha otorgado un ascenso\", \"le ha ascendido\", \"le ha promovido\")}\r\nal rango de\r\n{event.rank}\r\n{Occasionally(2, \"por sus servicios a la federación\")}.",
      "default": true,
      "name": "Federation promotion",
      "description": "Se activa cuando aumenta su rango con la Federación"
    },
    "Fighter docked": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Caza {OneOf(\"embarcado\", \"acoplado\")} {Occasionally(2, \"en la nave\")}.",
      "default": true,
      "name": "Fighter docked",
      "description": "Se activa cuando atracas el caza en tu nave."
    },
    "Fighter launched": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Caza {OneOf(\"lanzado\", \"desacoplado\")} {Occasionally(2, \"de la nave\")}.",
      "default": false,
      "name": "Fighter launched",
      "description": "Se activa cuando lanza un caza desde su nave"
    },
    "Fighter rebuilt": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Caza {OneOf(\"Imprimido\", \"Reconstruido\")} y {OneOf(\"listo para despegar\", \"preparado\")}.",
      "default": true,
      "name": "Fighter rebuilt",
      "description": "Se activa cuando se ha reconstruido un caza en el hangar de su nave"
    },
    "File Header": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "File Header",
      "description": "Se activa cuando se ha leído el encabezado del archivo"
    },
    "Fine incurred": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'fine')}\r\n{SetState('eddi_context_last_action', 'incur')}\r\n{SetState('eddi_context_fine_name', event.victim)}\r\n{SetState('eddi_context_fine_faction', event.faction)}\r\n{SetState('eddi_context_fine_amount', event.fine)}\r\n\r\n{OneOf ('Se nos ha impuesto una multa de {event.fine} créditos de la facción {event.faction}','la facción {event.faction} nos ha impuesto una multa de {event.fine} créditos')} \r\n{OneOf('comandante','señor',' ',' ')}\r\n.",
      "default": false,
      "name": "Fine incurred",
      "description": "Se activa cuando se le impone una multa"
    },
    "Fine paid": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'fine')}\r\n{SetState('eddi_context_last_action', 'pay')}\r\n{SetState('eddi_context_fine_amount', event.amount)}\r\n\r\nPagada multa de {event.amount} créditos.",
      "default": true,
      "name": "Fine paid",
      "description": "Se activa cuando se paga una multa"
    },
    "Friends status": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": "{_ Set uselist to \"white\" or \"black\", depending on which list you want to use to filter people _}\n{_ \"white\" will only allow notifications from people in this list (e.g. \"User1\", \"User2\", & \"User3\") _}\n{_ \"black\" will allow all notification EXCEPT those on this list (e.g. \"User4\", \"User5\", & \"User6\") _}\n{_ to allow all notifications, you may also use an empty blacklist (i.e. \"set blacklist to []\" _}\n\n{set uselist to \"black\"}\n\n{set whitelist to [\"User1\", \"User2\", \"User3\"]}\n{set blacklist to [\"User4\", \"User5\", \"User6\"]}\n\n{if event.name:\n    {if uselist = \"white\":\n        {if find(whitelist, event.name) > -1:\n            {event.name} is now {event.status}.\n        }\n    |elif uselist = \"black\":\n        {if find(blacklist, event.name) = -1:\n            {event.name} is now {event.status}.\n        }\n    }\n|else:\n    No se de quien me está hablando.\n}",
      "default": true,
      "name": "Friends status",
      "description": "Se activa cuando cambia el estatus de un Comandante amigo"
    },
    "FSD engaged": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'jump')}\r\n{SetState('eddi_context_last_action', 'start')}\r\n{SetState('eddi_context_system_name', system.name)}\r\n{SetState('eddi_context_system_system', system.name)}\r\n\r\n{if event.target = 'Hyperspace':\r\n    {_ Rewrite context to represent a jump }\r\n    {SetState('eddi_context_last_subject', 'jump')}\r\n    {SetState('eddi_context_last_action', 'start')}\r\n\r\n    {set system to SystemDetails(event.system)}\r\n\r\n    {_ Wait for the FSD countdown and initial jump}\r\n    {Pause(5000)}\r\n\r\n    {OneOf(\"Destino confirmado\",\"Salto en progreso\",\"Telemetría obtenida\")}.\r\n    {OneOf(\"nos dirigimos a\", \"en ruta al sistema\", \"viajamos a\", \"en tránsito hacia\")} {system.name}.\r\n    {if system.name = homesystem.name:\r\n        Welcome home, {F(\"Honorific\")}\r\n    |else:\r\n        {set scoopables to [\"O\", \"B\", \"A\", \"F\", \"G\", \"K\", \"M\"]}\r\n        {if slice(event.stellarclass, 0, 1) = \"D\":\r\n            Precaución: Enana blanca detectada.\r\n        |elif event.stellarclass = \"N\":\r\n            Precaución: estrella de neutrones detectada.\r\n        |elif event.stellarclass = \"H\":\r\n            Precaución:  agujero negro detectado.\r\n        |elif find(scoopables, event.stellarclass) = -1:\r\n            Información: la estrella destino no es adecuada para repostar.\r\n        }\r\n\r\n        {if lastsystem.allegiance && lastsystem.allegiance != \"None\" && lastsystem.allegiance != \"Independent\" && (!system.allegiance || system.allegiance = \"None\" || system.allegiance = \"Independent\"):\r\n            {OneOf(\"estamos abandonando el\", \"hemos dejado el\", \"ya no estamos en\")} {OneOf(\"territorio\",\"espacio\")} \r\n            {if lastsystem.allegiance = \"Empire\":\r\n              {OneOf(\"del imperio\",\"imperial\", \"controlado por el imperio\")} \r\n            |elif lastsystem.allegiance = \"Federation\":   \r\n              {OneOf(\"de la federación\",\"federal\",\"controlado por la federación\")} \r\n            |elif lastsystem.allegiance = \"Alliance\":\r\n              {OneOf(\"de la alianza\",\"controlado por la alianza\")} \r\n        }.\r\n        |elif lastsystem.allegiance && lastsystem.allegiance != system.allegiance && system.allegiance && system.allegiance != \"None\":\r\n            {OneOf(\"Ahora estamos en\", \"hemos entrado en\", \"estamos entrando en el\")} {OneOf(\"territorio\",\"espacio\")}\r\n            {if system.allegiance = \"Empire\":\r\n              {OneOf(\"del imperio\",\"imperial\", \"controlado por el imperio\")} \r\n            |elif system.allegiance = \"Federation\":   \r\n              {OneOf(\"de la federación\",\"federal\",\"controlado por la federación\")}\r\n            |elif system.allegiance = \"Alliance\":   \r\n              {OneOf(\"de la alianza\",\"controlado por la alianza\")}\r\n            |elif system.allegiance = \"Independent\":   \r\n              independiente\r\n            }.\r\n            {if cmdr.title != \"Commander\":\r\n                Bienvenido de nuevo {F(\"Honorific\")}.\r\n            }\r\n        }\r\n\r\n        {if system.visits = 0:\r\n            Es nuestra primera visita a este sistema\r\n        |elif system.visits = 1:\r\n            Es nuestra segunda visita a este sistema\r\n        |elif system.visits = 2:\r\n            Es nuestra tercera visita a este sistema\r\n        |elif system.visits = 3:\r\n            Es nuestra cuarta visita a este sistema\r\n        |else:\r\n            Hemos estado {system.visits} veces en este sistem\r\n        }.\r\n\r\n        {if !system.population:\r\n            {OneOf(\"Este sistema está despoblado\",\"No hay presencia humana aquí\", \"La raza humana no ha colonizado aun este sistema\")}.\r\n        |else:\r\n            {F(\"System report\")}\r\n        }\r\n\r\n        {if system.distancefromhome:\r\n            {Occasionally(7, \"{OneOf(\\\"Estamos a\\\", \\\"NUestra posición actual está a\\\", \\\"Ahora estamos a\\\")} {system.distancefromhome} años luz de {OneOf(\\\"casa\\\", \\\"{homesystem.name}\\\")}.\")}\r\n        }\r\n\r\n        {if system.comment:\r\n            Tiene {OneOf(\"establecida una nota\", \"establecido un comentario\", \"establecida una reseña\")} {OneOf(\"sobre\", \"acerca de\", \"en\")} este sistema.  {OneOf(\"dice lo siguiente\", \"pone lo siguiente\", \"es la siguiente\",\"dice así\")}, {system.comment}.\r\n        }\r\n    }\r\n}",
      "default": false,
      "name": "FSD engaged",
      "description": "Se activa cuando se ha conectado su motor de distorsión (FSD)"
    },
    "Fuel check": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fuel Check _}\r\n{_ Report fuel level _}\r\n\r\n{if ship.name = state.eddi_fuelcheck_shipname:\r\n    {if state.eddi_context_fuel_used > state.eddi_fuelcheck_maxfuel:\r\n        {SetState('eddi_fuelcheck_maxfuel', state.eddi_context_fuel_used)}\r\n    }\r\n|else:\r\n    {SetState('eddi_fuelcheck_maxfuel', state.eddi_context_fuel_used)}\r\n    {SetState('eddi_fuelcheck_shipname', ship.name)}\r\n}\r\n\r\n{set maxfuel to state.eddi_fuelcheck_maxfuel}\r\n{set fuelremaining to state.eddi_context_fuel_remaining}\r\n{set maxjump to fuelremaining/maxfuel}\r\n{set currentfuel to round(fuelremaining / ship.fueltanktotalcapacity * 100, 1)}\r\n{if find(currentfuel, \".0\") > -1:\r\n   {set currentfuel to round(currentfuel, 0)}\r\n}\r\n{set shipsfuel to:\r\n   {OneOf(\"el nivel de\", \"el tanque de\", \"la reserva de\")} combustible \r\n   {Occasionally(2, \" de {P(ShipName())}\" )} \r\n}\r\n{set currentpercent to: \r\n   está al {currentfuel} porciento {Occasionally(2, \"de su capacidad\")}\r\n}\r\n\r\n{if maxjump < 0.5:\r\n   Peligro!\r\n   {shipsfuel} está vacío!\r\n   {Pause(500)}\r\n   Consumiendo tanke de reserva. Se recomienda apagar los sistemas no esenciales.\r\n   {Pause(500)}\r\n   Transpondedor de emergencia listo\r\n|elif maxjump < 1.25:\r\n   {OneOf(\"Atención:\", \"Precaución:\", \"Peligro:\", \"Atención:\")}\r\n   {shipsfuel} {OneOf(\"peligrósamente bajos\", \"Casi vacío\")}.\r\n   {OneOf(\"Por favor recargue de combustible\", \"Es imperativo el rebastecimiento de combustible\")}\r\n|elif currentfuel < 25:\r\n   {OneOf(\"Atención:\", \"Precaución:\", \"Peligro:\", \"Atención:\")}\r\n   {shipsfuel} {OneOf(\"está por debajo del 25%\", \"{currentpercent}\" )}\r\n|elif currentfuel < 50:\r\n   {shipsfuel} {OneOf(\"está por debajo del 50%\", \"{currentpercent}\" )}\r\n|elif currentfuel < 100:\r\n   {shipsfuel} {currentpercent}\r\n|else:\r\n   {shipsfuel} {OneOf(currentpercent, \"al máximo\")}\r\n}\r\n{Occasionally(3,\", {F('Honorific')}\")}.",
      "default": false,
      "name": "Fuel check",
      "description": "Report on fuel levels"
    },
    "Galnet latest news": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch category from state }\r\n{set articlecategory to state.article_category}\r\n\r\n{if articlecategory:\r\n    {set articles to GalnetNewsArticles(articlecategory)}\r\n|else:\r\n    {set articles to GalnetNewsArticles('Article')}\r\n}\r\n\r\n{if len(articles) = 0:\r\n    No hay noticias sin leer en esa categoría\r\n|else:\r\n    {set article to articles[0]}\r\n    {SetState('eddi_context_galnet_news_id', article.id)}\r\n    {article.title}: {article.content}\r\n    {GalnetNewsMarkRead(article.id)}\r\n}.\r\n",
      "default": true,
      "name": "Galnet latest news",
      "description": "Read the latest unread news in a given category"
    },
    "Galnet mark read": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch category from state }\n{set articlecategory to state.article_category}\n\n{if articlecategory:\n    {set articles to GalnetNewsArticles(articlecategory)}\n|else:\n    {set articles to GalnetNewsArticles('Article')}\n}\n\n{if len(articles) = 0:\n    No hay noticias sin leer\n    {if articlecategory: 'in that category' }\n|elif len(articles) = 1:\n    {set item to 0}\n    {while item < len(articles):\n        {GalnetNewsMarkRead(articles[item].id)}\n        {set item to (item + 1)}\n    }\n{OneOf('un artículo marcado como leído', 'una noticia marcada como leída')} \n\n|else:\n    {set item to 0}\n    {while item < len(articles):\n        {GalnetNewsMarkRead(articles[item].id)}\n        {set item to (item + 1)}\n    }\n{len(articles)} {OneOf('artículos marcados como leídos', 'noticias marcadas como leídas')} \n}. \n",
      "default": true,
      "name": "Galnet mark read",
      "description": "Mark news articles as read"
    },
    "Galnet news": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch article from state }\r\n{set articleid to state.articleid}\r\n{if articleid:\r\n    {set article to GalnetNews(articleid)}\r\n\r\n    {_ Context }\r\n    {SetState('eddi_context_last_subject', 'news')}\r\n    {SetState('eddi_context_galnet_news_id', articleid)}\r\n}\r\n\r\n{if !article:\r\n    {_ Fetch from context }\r\n    {set article to GalnetNews(state.eddi_context_galnet_news_id)}\r\n}\r\n\r\n{if article:\r\n    {article.title}: {article.content}\r\n|else:\r\n    No tengo ninguna información sobre ese artículo\r\n}.\r\n\r\n",
      "default": false,
      "name": "Galnet news",
      "description": "Read a particular news article"
    },
    "Galnet news published": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{set statustitle to \"^(Galactic News: ((Weekly .*)|(Starport Status Update)))|(Powerplay: Incoming Update)\"}\r\n\r\n{if len(event.items) = 1:\r\n    Se ha publicado un nuevo artículo en Galnet titulado {event.items[0].title}.\r\n    {if !match(event.items[0].title, statustitle):\r\n      Dice así: {event.items[0].content}.\r\n    }\r\n|elif len(event.items) > 1:\r\n    Se han publicado {len(event.items)} nuevos artículos en Galnet.\r\n    {set item to 0}\r\n    {while item < len(event.items):\r\n        {if item = 0:\r\n            El primero se titula {event.items[item].title}\r\n            {if !match(event.items[item].title, statustitle):\r\n                , y dice así: {event.items[item].content}\r\n            }.\r\n        |elif item = 1:\r\n            El segundo se titula {event.items[item].title}\r\n            {if !match(event.items[item].title, statustitle):\r\n                , y dice así: {event.items[item].content}\r\n            }.\r\n        |elif item = len(event.items) - 1:\r\n            El último se titula {event.items[item].title}\r\n            {if !match(event.items[item].title, statustitle):\r\n                , y dice así: {event.items[item].content}\r\n            }.\r\n        |else:\r\n            El siguiente se titula {event.items[item].title}\r\n            {if !match(event.items[item].title, statustitle):\r\n                , y dice así: {event.items[item].content}\r\n            }.\r\n        }\r\n        {set item to item + 1}\r\n        {Pause(1000)}\r\n    }\r\n}",
      "default": false,
      "name": "Galnet news published",
      "description": "Se activa cuando se publican nuevas noticias en GalNet"
    },
    "Galnet oldest news": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch category from state }\r\n{set articlecategory to state.article_category}\r\n\r\n{if articlecategory:\r\n    {set articles to GalnetNewsArticles(articlecategory)}\r\n|else:\r\n    {set articles to GalnetNewsArticles('Article')}\r\n}\r\n\r\n{if len(articles) = 0:\r\n    No hay noticias sin leer en esa categoría\r\n|else:\r\n    {set article to articles[len(articles)-1]}\r\n    {SetState('eddi_context_galnet_news_id', article.id)}\r\n    {article.title}: {article.content}\r\n    {GalnetNewsMarkRead(article.id)}\r\n}.\r\n",
      "default": true,
      "name": "Galnet oldest news",
      "description": "Read the oldest unread news in a given category"
    },
    "Galnet unread report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{set articles to GalnetNewsArticles(\"Article\")}\r\n\r\n{if len(articles) = 0:\r\n    No tiene noticias sin leer\r\n|elif len(articles) = 1:\r\n    Tiene una noticia sin leer\r\n|else:\r\n    Tiene {len(articles)} noticias sin leer\r\n}.",
      "default": true,
      "name": "Galnet unread report",
      "description": "Report on unread news"
    },
    "Heat damage": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Occasionally(2, \"Alarma:\")}\r\ndaño por calentamiento.",
      "default": true,
      "name": "Heat damage",
      "description": "Se activa cuando su nave está sufriendo daños por excesivo calor"
    },
    "Heat warning": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Occasionally(2, \"Cuidado:\")}\r\nNiveles de calentamiento subiendo por encima del límite tolerable.",
      "default": true,
      "name": "Heat warning",
      "description": "Se activa cuando el calor de su nave supera el 100%"
    },
    "Honorific": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{if system.allegiance = \"Empire\":\r\n    {if cmdr.empirerating.rank <= 4: \r\n       {OneOf ('comandante','señor')}\r\n    |elif cmdr.empirerating.rank = 5:\r\n        Señor\r\n    |elif cmdr.empirerating.rank <= 11:\r\n        milord\r\n    |elif cmdr.empirerating.rank = 12:\r\n        su excelencia\r\n    |elif cmdr.empirerating.rank = 13:\r\n        su alteza real\r\n    |elif cmdr.empirerating.rank = 14:\r\n        su majestad\r\n    }\r\n|elif system.allegiance = \"Federation\":\r\n    {if cmdr.federationrating.rank = 0:\r\n        comandante\r\n    |elif cmdr.federationrating.rank = 1:\r\n        recluta\r\n    |elif cmdr.federationrating.rank = 2:\r\n        cadete\r\n    |elif cmdr.federationrating.rank = 3:\r\n        guardiamarina\r\n    |elif cmdr.federationrating.rank = 4:\r\n        sargento\r\n    |elif cmdr.federationrating.rank = 5:\r\n        sargento primero\r\n    |elif cmdr.federationrating.rank = 6:\r\n        subteniente\r\n    |elif cmdr.federationrating.rank = 7:\r\n        Alférez de fragata\r\n    |elif cmdr.federationrating.rank = 8:\r\n        Teniente de navío\r\n    |elif cmdr.federationrating.rank = 9:\r\n        capitán de corbeta\r\n    |elif cmdr.federationrating.rank = 10:\r\n        capitán de fragata\r\n    |elif cmdr.federationrating.rank = 11:\r\n        capitán de navío\r\n    |elif cmdr.federationrating.rank = 12:\r\n        contraalmirante\r\n    |elif cmdr.federationrating.rank = 13:\r\n        vicealmirante\r\n    |elif cmdr.federationrating.rank = 14:\r\n        almirante\r\n    }\r\n|else:\r\n    {OneOf ('comandante','señor')}\r\n}\r\n",
      "default": false,
      "name": "Honorific",
      "description": "Function to provide a suitable honorific for your commander"
    },
    "Hull damaged": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if event.vehicle = vehicle:\r\n    {if event.health < 40:\r\n        Alerta roja:\r\n    |elif event.health < 60:\r\n        Cuidado:\r\n    |elif event.health < 80:\r\n        Precaución:\r\n    }\r\n    {OneOf(\"Casco\", \"Integridad del casco\", \"Integridad\", \"Integridad estructural\")} al {event.health}%.\r\n}\r\n",
      "default": false,
      "name": "Hull damaged",
      "description": "Se activa cuando el casco de su nave se encuentra dañada en cierta medida"
    },
    "Insurance check": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{set insurance to round(ship.value * cmdr.insurance / 100)}\r\n\r\n{set covereds to round((cmdr.credits / insurance) - 0.5)}\r\n\r\n{if covereds = 0:\r\n Cuidado: No tiene suficientes créditos para cubrir la franquicia de su seguro. \r\n|elif covereds = 1:\r\n  Precaución: Solo tiene créditos suficientes para cubrir una sola franquicia del seguro.\r\n|elif covereds < 4:\r\n  Observación: Solo tiene créditos suficientes para cubrir {covereds} franquicias del seguro.\r\n}\r\n",
      "default": false,
      "name": "Insurance check",
      "description": "Check for enough credits to cover your insurance"
    },
    "Jet cone boost": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Pause(1000)}\r\nMotor de distorsión cargado al {Humanise(event.boost * 100)} %.",
      "default": true,
      "name": "Jet cone boost",
      "description": "Se activa cuando se ha recogido suficiente material de un chorro de eyección (en una enana blanca o una estrella de neutrones) para un salto de rango ampliado"
    },
    "Jet cone damage": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Jet cone damage",
      "description": "Se activa en espacio normal cuando se pasa a través de un chorro de eyección de una enana blanca o una estrella de neutrones ocasionando daños a los módulos de la nave"
    },
    "Jumped": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": false,
      "name": "Jumped",
      "description": "Se activa cuando se completa un salto a otro sistema estelar"
    },
    "Killed": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Killed",
      "description": "Se activa cuando se destruye a otro jugador"
    },
    "Landing pad report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": " {set landingpad to state.eddi_context_landing_pad_pad}\r\n   \r\n    La pista de aterrizaje asignada {landingpad} está a las\r\n    {if landingpad = 1:\r\n        seis en punto cerca de la entrada\r\n    |elif landingpad = 2:\r\n        seis en punto cerca de la entrada\r\n    |elif landingpad = 3:\r\n        seis en punto al fondo\r\n    |elif landingpad = 4:\r\n        seis en punto al fondo\r\n    |elif landingpad = 5:\r\n        siete en punto cerca de la entrada\r\n    |elif landingpad = 6:\r\n        siete en punto cerca de la entrada\r\n    |elif landingpad = 7:\r\n        siete en punto al fondo\r\n    |elif landingpad = 8:\r\n        siete en punto al fondo\r\n    |elif landingpad = 9:\r\n        ocho en punto cerca de la entrada\r\n    |elif landingpad = 10:\r\n        ocho en punto al fondo\r\n    |elif landingpad = 11:\r\n        nueve en punto cerca de la entrada\r\n    |elif landingpad = 12:\r\n        nueve en punto cerca de la entrada\r\n    |elif landingpad = 13:\r\n        nueve en punto en la zona central\r\n    |elif landingpad = 14:\r\n        nueve en punto al fondo\r\n    |elif landingpad = 15:\r\n        nueve en punto al fondo\r\n    |elif landingpad = 16:\r\n        diez en punto cerca de la entrada\r\n    |elif landingpad = 17:\r\n        diez en punto cerca de la entrada\r\n    |elif landingpad = 18:\r\n        diez en punto al fondo\r\n    |elif landingpad = 19:\r\n        diez en punto al fondo\r\n    |elif landingpad = 20:\r\n        once en punto cerca de la entrada\r\n    |elif landingpad = 21:\r\n        once en punto cerca de la entrada\r\n    |elif landingpad = 22:\r\n        once en punto al fondo\r\n    |elif landingpad = 23:\r\n        once en punto al fondo\r\n    |elif landingpad = 24:\r\n        doce en punto cerca de la entrada\r\n    |elif landingpad = 25:\r\n        doce en punto al fondo\r\n    |elif landingpad = 26:\r\n        una en punto cerca de la entrada\r\n    |elif landingpad = 27:\r\n        una en punto cerca de la entrada\r\n    |elif landingpad = 28:\r\n        una en punto en la zona central\r\n    |elif landingpad = 29:\r\n        una en punto al fondo\r\n    |elif landingpad = 30:\r\n        una en punto al fondo\r\n    |elif landingpad = 31:\r\n        dos en punto cerca de la entrada\r\n    |elif landingpad = 32:\r\n        dos en punto cerca de la entrada\r\n    |elif landingpad = 33:\r\n        dos en punto al fondo\r\n    |elif landingpad = 34:\r\n        dos en punto al fondo\r\n    |elif landingpad = 35:\r\n        tres en punto cerca de la entrada\r\n    |elif landingpad = 36:\r\n        tres en punto cerca de la entrada\r\n    |elif landingpad = 37:\r\n        tres en punto en la zona central\r\n    |elif landingpad = 38:\r\n        tres en punto al fondo\r\n    |elif landingpad = 39:\r\n        cuatro en punto cerca de la entrada\r\n    |elif landingpad = 40:\r\n        cuatro en punto al fondo\r\n    |elif landingpad = 41:\r\n        cinco en punto cerca de la entrada\r\n    |elif landingpad = 42:\r\n        cinco en punto cerca de la entrada\r\n    |elif landingpad = 43:\r\n        cinco en punto en la zona central\r\n    |elif landingpad = 44:\r\n        cinco en punto al fondo\r\n    |elif landingpad = 45:\r\n        cinco en punto al fondo\r\n    }\r\n    , entrando con las luces verdes a su derecha.\r\n",
      "default": false,
      "name": "Landing pad report",
      "description": "Report on the location of a landing pad"
    },
    "Liftoff": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if event.playercontrolled = true:\r\n  Despegando.\r\n|else:\r\n  Enviando nave a órbita.\r\n}\r\n",
      "default": false,
      "name": "Liftoff",
      "description": "Se activa cuando su nave despega desde la superficie de un planeta"
    },
    "Limpet check": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{set  controllers to 0}\r\n{for compartment in ship.compartments:\r\n    {if find(compartment.module.name, \"Controller\") != -1:\r\n        {set controllers to controllers + 1}\r\n    }\r\n}\r\n\r\n{set limpets to 0}\r\n{for cargo in ship.cargo:\r\n    {if cargo.commodity.name = \"Limpet\":\r\n        {set limpets to limpets + cargo.amount}\r\n    }\r\n}\r\n{set tenpercent to ship.cargocapacity / 10 - 1}\r\n{if controllers > 0 && limpets = 0:\r\n    Aviso: llevamos un lanzador de drónes pero no llevamos ningún drón.\r\n|elif controllers = 0 && limpets > 0:\r\n    transportamos drónes pero no llevamos lanzador de drónes.\r\n|elif controllers > 0 && limpets < tenpercent:\r\n    solo llevamos {limpets} drónes a bordo; debería considerar el adquirir más.\r\n}\r\n",
      "default": false,
      "name": "Limpet check",
      "description": "Check for the presence/absence of limpets and limpet controllers"
    },
    "Limpet launched": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{OneOf('Drone','Limpet')} launched.",
      "default": true,
      "name": "Limpet launched",
      "description": "Triggered when a limpet is launched"
    },
    "Limpet purchased": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{event.amount} drón{if event.amount > 1:es}\r\n{Occasionally(2, \"han sido\")}\r\nañadidos a \r\n{OneOf(\"nuestra\", \"la\")}\r\n{OneOf(\"bodega de carga\", \"bodega\")}",
      "default": false,
      "name": "Limpet purchased",
      "description": "Se activa cuando compra drones en una estación espacial"
    },
    "Limpet sold": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{event.amount} drón{if event.amount > 1:es}\r\n{Occasionally(2, \"han sido\")} vendidos.",
      "default": false,
      "name": "Limpet sold",
      "description": "Se activa cuando vende drones en una estación espacial"
    },
    "List launchbays": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{for launchbay in ship.launchbays:\n    Tienes un hangar de tamaño {launchbay.size}, de tipo {launchbay.type}.\n    {for vehicle in launchbay.vehicles:\n        Tiene un {P(vehicle.name)} con {vehicle.loadout} de carga\n\n        {if type(vehicle.mount) != null:\n            {if vehicle.mount = 'F':\n                , y armas fijas\n            |elif vehicle.mount = 'G':\n                , y armas de seguimiento\n            }\n        }\n        .{_ full stop}\n\n        {if vehicle.rebuilds != null:\n            {if vehicle.rebuilds = 1:\n                Solo puedes imprimir uno más.\n            |elif vehicle.rebuilds = 0:\n                Falta material para su impresión.\n            |else:\n                Quedan {vehicle.rebuilds} cargas de impresión restantes.\n            }\n        }\n\n        {Pause(500)}\n    }\n}\n",
      "default": true,
      "name": "List launchbays",
      "description": "Describes the contents of each launchbay in the ship"
    },
    "Location": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_system_name', event.system)}\r\n{SetState('eddi_context_body_name', event.body)}\r\n{SetState('eddi_context_body_system', event.system)}\r\n\r\nNos encontramos \r\n{if event.docked:\r\n    acoplados en la\r\n    {if event.station = event.body:\r\n        estación orbital {event.station}\r\n    |else:\r\n        estación planetaria {event.station} en {event.body}\r\n    }\r\n|elif event.body:\r\n    cerca de {event.body}\r\n}\r\nen el sistema {event.system}.\r\n\r\n",
      "default": false,
      "name": "Location",
      "description": "Se activa cuando se informa sobre la ubicación del Comandante, normalmente cuando se reinicia el juego"
    },
    "Low fuel": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Low fuel",
      "description": "Se activa cuando los niveles de combustible bajan del 25%"
    },
    "Market information updated": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": false,
      "name": "Market information updated",
      "description": "Se activa cuando se ha actualizado la información del mercado de la estación espacial en la que se ha aterrizado"
    },
    "Material collected": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": false,
      "name": "Material collected",
      "description": "Se activa cuando se recoge un material"
    },
    "Material discard report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Function to obtain a material from inventory}\r\n{set _inventory(required) to:\r\n    {for material in materials:\r\n        {if material.material = required:\r\n            {return material}\r\n        }\r\n    }\r\n}\r\n\r\n{_ Fetch material from state }\r\n{set material to state.material}\r\n{if material:\r\n    {_ Fetch full material details }\r\n    {set material to MaterialDetails(material)}\r\n\r\n    {_ Context }\r\n    {SetState('eddi_context_last_subject', 'material')}\r\n    {SetState('eddi_context_material_name', material.name)}\r\n}\r\n\r\n{if !material:\r\n    {_ Fetch from context }\r\n    {set material to MaterialDetails(state.eddi_context_material_name)}\r\n}\r\n\r\n{set inventory to _inventory(material.name)}\r\n\r\n\r\n{if inventory:\r\n    {if inventory.maximum && inventory.maximum < inventory.amount:\r\n        {set over to inventory.amount - inventory.maximum}\r\n        {if over > 1:\r\n            Puede deshacerse de {over} unidades de {SetState(\"altair_material\", inventory.material)}\r\n            {F(\"Altair materials\")} para alcanzar su máximo nivel.\r\n        |elif over = 1:\r\n            Puede deshacerse de 1 unidad de {SetState(\"altair_material\", inventory.material)}\r\n            {F(\"Altair materials\")} para alcanzar su máximo nivel.\r\n        }\r\n    |elif inventory.desired && inventory.desired < inventory.amount:\r\n        {set over to inventory.amount - inventory.desired}\r\n        {if over > 1:\r\n            Puede deshacerse de {over} unidades de {SetState(\"altair_material\", inventory.material)}\r\n            {F(\"Altair materials\")} para alcanzar el nivel deseado.\r\n        |elif over = 1:\r\n            Puede deshacerse de 1 unidad de {SetState(\"altair_material\", inventory.material)}\r\n            {F(\"Altair materials\")} para alcanzar el nivel deseado.\r\n        }\r\n    |elif inventory.desired:\r\n        Está por debajo del nivel deseado de {SetState(\"altair_material\", inventory.material)}\r\n            {F(\"Altair materials\")}.\r\n    |elif inventory.maximum:\r\n        Está por debajo del nivel máximo de {SetState(\"altair_material\", inventory.material)}\r\n            {F(\"Altair materials\")}.\r\n    |else:\r\n        No ha fijado ningún nivel para {SetState(\"altair_material\", inventory.material)}\r\n            {F(\"Altair materials\")}.\r\n    }\r\n}\r\n",
      "default": false,
      "name": "Material discard report",
      "description": "Report on how many of a material can be discarded"
    },
    "Material discarded": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": false,
      "name": "Material discarded",
      "description": "Se activa cuando eliminas algún material"
    },
    "Material discovered": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'material')}\r\n{SetState('eddi_context_last_action', 'discover')}\r\n{SetState('eddi_context_material_name', event.material)}\r\n\r\nNuevo material descubierto.",
      "default": false,
      "name": "Material discovered",
      "description": "Se activa cuando descubres un material"
    },
    "Material donated": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": false,
      "name": "Material donated",
      "description": "Se activa cuando donas un material"
    },
    "Material inventory": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Material inventory",
      "description": "Se activa cuando obtienes un inventario de todos tus materiales"
    },
    "Material inventory report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Function to obtain a material from inventory}\r\n\r\n{set _inventory(required) to:\r\n    {for material in materials:\r\n        {if material.material = required:\r\n            {return material}\r\n        }\r\n    }\r\n}\r\n\r\n{_ Fetch material from state }\r\n{set material to state.material}\r\n\r\n{_ función para traducción inversa del español al inglés del nombre del material que hemos pasado desde voiceattack en español para que pueda trabajar con él internamente }\r\n\r\n{SetState(\"altair_material\", material)}\r\n{F(\"Altair materials inversa\")} \r\n{set material to state.altair_material2}\r\n\r\n{if material:\r\n    {_ Fetch full material details }\r\n    {set material to MaterialDetails(material)}\r\n\r\n \r\n    {_ Context }\r\n    {SetState('eddi_context_last_subject', 'material')}\r\n    {SetState('eddi_context_last_subject', 'inventory')}\r\n    {SetState('eddi_context_material_name', material.name)}\r\n}\r\n\r\n{if !material:\r\n    {_ Fetch from context }\r\n    {set material to MaterialDetails(state.eddi_context_material_name)}\r\n}\r\n\r\n{set inventory to _inventory(material.name)}\r\n\r\n{if inventory && inventory.amount > 0:\r\n    {if inventory.amount = 1:\r\n       Tiene {inventory.amount} unidades de {SetState(\"altair_material\", inventory.material)}\r\n            {F(\"Altair materials\")} a bordo.\r\n    |else:\r\n       Tiene {inventory.amount} unidades de {SetState(\"altair_material\", inventory.material)}\r\n            {F(\"Altair materials\")} a bordo.\r\n    }\r\n|else:\r\n    No tiene {SetState(\"altair_material\", inventory.material)}\r\n            {F(\"Altair materials\")} a bordo.\r\n}\r\n",
      "default": false,
      "name": "Material inventory report",
      "description": "Report on how many of a material are on-board"
    },
    "Material location report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch material from state }\r\n{set material to state.material}\r\n\r\n{_ función para traducción inversa del español al inglés del nombre del material que hemos pasado desde voiceattack en español para que pueda trabajar con él internamente }\r\n    \r\n    {SetState(\"altair_material\", material)}\r\n    {F(\"Altair materials inversa\")} \r\n    {set material to state.altair_material2}\r\n\r\n{if material:\r\n    {_ Fetch full material details }\r\n    {set material to MaterialDetails(material)}\r\n\r\n\r\n\r\n    {_ Context }\r\n    {SetState('eddi_context_last_subject', 'material')}\r\n    {SetState('eddi_context_material_name', material.name)}\r\n}\r\n\r\n{if !material:\r\n    {_ Fetch from context }\r\n    {set material to MaterialDetails(state.eddi_context_material_name)}\r\n}\r\n\r\n{if material.name:\r\n    {if material.location:\r\n        {SetState(\"altair_material\", material.name)}\r\n            {F(\"Altair materials\")} {SetState(\"altair_locations\", material.location)}\r\n            {F(\"Altair material locations\")}\r\n    |else:\r\n        No hay información disponible sobre donde encontrar {SetState(\"altair_material\", material.name)}\r\n            {F(\"Altair materials\")}\r\n    }\r\n|else:\r\n    No tengo ninguna información acerca de ese material.\r\n}.\r\n",
      "default": false,
      "name": "Material location report",
      "description": "Report on the where to obtain a particular material"
    },
    "Material required report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Function to obtain a material from inventory}\r\n{set _inventory(required) to:\r\n    {for material in materials:\r\n        {if material.material = required:\r\n            {return material}\r\n        }\r\n    }\r\n}\r\n\r\n{_ Fetch material from state }\r\n{set material to state.material}\r\n{if material:\r\n    {_ Fetch full material details }\r\n    {set material to MaterialDetails(material)}\r\n\r\n    {_ Context }\r\n    {SetState('eddi_context_last_subject', 'material')}\r\n    {SetState('eddi_context_material_name', material.name)}\r\n}\r\n\r\n{if !material:\r\n    {_ Fetch from context }\r\n    {set material to MaterialDetails(state.eddi_context_material_name)}\r\n}\r\n\r\n{set inventory to _inventory(material.name)}\r\n\r\n\r\n{if inventory:\r\n    {if inventory.minimum && inventory.minimum > inventory.amount:\r\n        {set under to inventory.minimum - inventory.amount}\r\n        {if under > 1:\r\n            Necesita {under} unidades de {SetState(\"altair_material\", inventory.material)}\r\n            {F(\"Altair materials\")} para alcanzar el nivel mínimo.\r\n        |elif under = 1:\r\n            Necesita 1 unidad de {SetState(\"altair_material\", inventory.material)}\r\n            {F(\"Altair materials\")} para alcanzar el nivel mínimo.\r\n        }\r\n    |elif inventory.desired && inventory.desired > inventory.amount:\r\n        {set under to inventory.desired - inventory.amount}\r\n        {if under > 1:\r\n            Necesita {under} unidades de {SetState(\"altair_material\", inventory.material)}\r\n            {F(\"Altair materials\")} Para alcanzar el nivel deseado.\r\n        |elif under = 1:\r\n            Necesita 1 unidad de {SetState(\"altair_material\", inventory.material)}\r\n            {F(\"Altair materials\")} para alcanzar el nivel deseado.\r\n        }\r\n    |elif inventory.desired:\r\n        Está por encima del nivel deseado de {SetState(\"altair_material\", inventory.material)}\r\n            {F(\"Altair materials\")}.\r\n    |elif inventory.minimum :\r\n        Está por encima del nivel mínimo de {SetState(\"altair_material\", inventory.material)}\r\n            {F(\"Altair materials\")}.\r\n    |else:\r\n        No ha fijado ningún nivel para {SetState(\"altair_material\", inventory.material)}\r\n            {F(\"Altair materials\")}.\r\n    }\r\n}\r\n\r\n",
      "default": false,
      "name": "Material required report",
      "description": "Report on how many of a material are required to reach 'desired' level"
    },
    "Material threshold": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if event.level = 'Minimum':\r\n    {_ Gone below the minimum level }\r\n    {OneOf(\"el suministro\", \"el estock\", \"la cantidad almacenada\")} de {SetState(\"altair_material\", event.material.name)}\r\n            {F(\"Altair materials\")} ha bajado por debajo del mínimo fijado.\r\n|elif event.level = 'Maximum':\r\n  {_ Gone above the maximum level }\r\n    {OneOf(\"el suministro\", \"el estock\", \"la cantidad almacenada\")} de {SetState(\"altair_material\", event.material.name)}\r\n            {F(\"Altair materials\")} ha aumentado por encima del máximo fijado.\r\n|else:\r\n    {_ Moved around the desired level }\r\n    {if event.change = 'Increase':\r\n        Ha alcanzado el nivel deseado de {SetState(\"altair_material\", event.material.name)}\r\n            {F(\"Altair materials\")}.\r\n    |else:\r\n        Está por debajo del nivel deseado de {SetState(\"altair_material\", event.material.name)}\r\n            {F(\"Altair materials\")}.\r\n    }\r\n}\r\n\r\n{OneOf(\"La cantidad almacenada es de {event.amount}\",\r\n       \"Actualmente transportamos {event.amount}\",\r\n       \"{event.amount} a bordo\")}.",
      "default": false,
      "name": "Material threshold",
      "description": "Se activa cuando un material alcanza el umbral"
    },
    "Material traded": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Material traded",
      "description": "Se activa cuando se comercializa con un comerciante de materiales"
    },
    "Material use report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch material from state }\r\n{set material to state.material}\r\n\r\n{_ función para traducción inversa del español al inglés del nombre del material que hemos pasado desde voiceattack en español para que pueda trabajar con él internamente }\r\n    \r\n    {SetState(\"altair_material\", material)}\r\n    {F(\"Altair materials inversa\")} \r\n    {set material to state.altair_material2}\r\n\r\n{if material:\r\n    {_ Fetch full material details }\r\n    {set material to MaterialDetails(material)}\r\n\r\n    {_ Context }\r\n    {SetState('eddi_context_last_subject', 'material')}\r\n    {SetState('eddi_context_material_name', material.name)}\r\n}\r\n\r\n{if !material:\r\n    {_ Fetch from context }\r\n    {set material to MaterialDetails(state.eddi_context_material_name)}\r\n}\r\n\r\n{if material && material.name:\r\n    {set uses to len(material.blueprints)}\r\n    {if slice(material.name, len(material.name)-1) = 's':\r\n        {set plural to 'son'}\r\n    |else:\r\n        {set plural to 'es'}\r\n    }\r\n    {if uses = 0:\r\n      {SetState(\"altair_material\", material.name)}\r\n            {F(\"Altair materials\")} no es necesario para ningún plano\r\n    |elif uses = 1:\r\n        {set name to cat(material.blueprints[0].name, material.blueprints[0].modulename, 'grade', material.blueprints[0].grade)}\r\n        {SetState(\"altair_material\", material.name)}\r\n            {F(\"Altair materials\")} se usa para el plano {name} \r\n    |elif uses = 2:\r\n        {set name0 to cat(material.blueprints[0].name, material.blueprints[0].modulename, 'grade', material.blueprints[0].grade)}\r\n        {set name1 to cat(material.blueprints[1].name, material.blueprints[1].modulename, 'grade', material.blueprints[1].grade)}\r\n        {SetState(\"altair_material\", material.name)}\r\n            {F(\"Altair materials\")} se usa para los planos {name0} y {name1} \r\n    |else:\r\n        {SetState(\"altair_material\", material.name)}\r\n            {F(\"Altair materials\")} se usa para los planos {len(material.blueprints)}.  Estos son \r\n        {set cur to 0}\r\n        {while cur < len(material.blueprints):\r\n            {set name to cat(material.blueprints[cur].name, material.blueprints[cur].modulename, 'grade', material.blueprints[cur].grade)}\r\n            {if cur = 0:\r\n                {name}\r\n            |elif cur < len(material.blueprints) - 1:\r\n                , {name}\r\n            |else:\r\n                , y {name}\r\n            }\r\n            {set cur to cur + 1}\r\n        }\r\n    }\r\n|else:\r\n    No tengo ninguna información sobre ese material\r\n}.\r\n",
      "default": false,
      "name": "Material use report",
      "description": "Report on the use of a material"
    },
    "Materials discard report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "\r\n{_ Find those that are above maximum, desired and minimum}\r\n{set shoulddiscardmaterials to []}\r\n{set coulddiscardmaterials to []}\r\n{set lastdiscardmaterials to []}\r\n\r\n{for material in materials:\r\n    {if material.maximum && material.amount > material.maximum:\r\n      {set shoulddiscardmaterials to cat(shoulddiscardmaterials, [material])}\r\n    |elif material.desired && material.amount > material.desired:\r\n      {set coulddiscardmaterials to cat(coulddiscardmaterials, [material])}\r\n    |elif material.minimum && material.amount > material.minimum:\r\n      {set lastdiscardmaterials to cat(lastdiscardmaterials, [material])}\r\n    }\r\n}\r\n\r\n{if len(shoulddiscardmaterials) > 0:\r\n    Está por encimadel máximo de {if len(shoulddiscardmaterials) = 1: 1 material |else: {len(shoulddiscardmaterials)} materiales}.  Puede deshacerse de \r\n    {if len(shoulddiscardmaterials) = 1:\r\n        {shoulddiscardmaterials[0].amount - shoulddiscardmaterials[0].maximum} {SetState(\"altair_material\", shoulddiscardmaterials[0].material)}\r\n            {F(\"Altair materials\")}\r\n    |elif len(shoulddiscardmaterials) = 2:\r\n        {shoulddiscardmaterials[0].amount - shoulddiscardmaterials[0].maximum} {SetState(\"altair_material\", shoulddiscardmaterials[0].material)}\r\n            {F(\"Altair materials\")} y {shoulddiscardmaterials[1].amount - shoulddiscardmaterials[1].maximum} {SetState(\"altair_material\", shoulddiscardmaterials[1].material)}\r\n            {F(\"Altair materials\")}\r\n    |else:\r\n        {set cur to 0}\r\n        {while cur < len(shoulddiscardmaterials):\r\n            {if cur = 0:\r\n                {shoulddiscardmaterials[cur].amount - shoulddiscardmaterials[cur].maximum} {SetState(\"altair_material\", shoulddiscardmaterials[cur].material)}\r\n            {F(\"Altair materials\")}\r\n            |elif cur < len(shoulddiscardmaterials) - 1:\r\n                , {shoulddiscardmaterials[cur].amount - shoulddiscardmaterials[cur].maximum} {SetState(\"altair_material\", shoulddiscardmaterials[cur].material)}\r\n            {F(\"Altair materials\")}\r\n            |else:\r\n                , y {shoulddiscardmaterials[cur].amount - shoulddiscardmaterials[cur].maximum} {SetState(\"altair_material\", shoulddiscardmaterials[cur].material)}\r\n            {F(\"Altair materials\")}\r\n            }\r\n            {set cur to cur + 1}\r\n        }\r\n    }.\r\n|elif len(coulddiscardmaterials) > 0:\r\n    Está por encima del nivel deseado de {if len(coulddiscardmaterials) = 1: 1 material |else: {len(coulddiscardmaterials)} materiales}.  Puede deshacerse de\r\n    {if len(coulddiscardmaterials) = 1:\r\n        {coulddiscardmaterials[0].amount - coulddiscardmaterials[0].desired} {SetState(\"altair_material\", coulddiscardmaterials[0].material)}\r\n            {F(\"Altair materials\")}\r\n    |elif len(coulddiscardmaterials) = 2:\r\n        {coulddiscardmaterials[0].amount - coulddiscardmaterials[0].desired} {SetState(\"altair_material\", coulddiscardmaterials[0].material)}\r\n            {F(\"Altair materials\")} y {coulddiscardmaterials[1].amount - coulddiscardmaterials[1].desired} {SetState(\"altair_material\", coulddiscardmaterials[1].material)}\r\n            {F(\"Altair materials\")}\r\n    |else:\r\n        {set cur to 0}\r\n        {while cur < len(coulddiscardmaterials):\r\n            {if cur = 0:\r\n                {coulddiscardmaterials[cur].amount - coulddiscardmaterials[cur].desired} {SetState(\"altair_material\", coulddiscardmaterials[cur].material)}\r\n            {F(\"Altair materials\")}\r\n            |elif cur < len(coulddiscardmaterials) - 1:\r\n                , {coulddiscardmaterials[cur].amount - coulddiscardmaterials[cur].desired} {SetState(\"altair_material\", coulddiscardmaterials[cur].material)}\r\n            {F(\"Altair materials\")}\r\n            |else:\r\n                , y {coulddiscardmaterials[cur].amount - coulddiscardmaterials[cur].desired} {SetState(\"altair_material\", coulddiscardmaterials[cur].material)}\r\n            {F(\"Altair materials\")}\r\n            }\r\n            {set cur to cur + 1}\r\n        }\r\n    }.\r\n|elif len(lastdiscardmaterials) > 0:\r\n    Está por encima del nivel mínimo de {if len(lastdiscardmaterials) = 1: 1 material |else: {len(lastdiscardmaterials)} materiales}.  Puede deshacerse de \r\n    {if len(lastdiscardmaterials) = 1:\r\n        {lastdiscardmaterials[0].amount - lastdiscardmaterials[0].minimum} {SetState(\"altair_material\", lastdiscardmaterials[0].material)}\r\n            {F(\"Altair materials\")}\r\n    |elif len(lastdiscardmaterials) = 2:\r\n        {lastdiscardmaterials[0].amount - lastdiscardmaterials[0].minimum} {SetState(\"altair_material\", lastdiscardmaterials[0].material)}\r\n            {F(\"Altair materials\")} y {lastdiscardmaterials[1].amount - lastdiscardmaterials[1].minimum} {SetState(\"altair_material\", lastdiscardmaterials[1].material)}\r\n            {F(\"Altair materials\")}\r\n    |else:\r\n        {set cur to 0}\r\n        {while cur < len(lastdiscardmaterials):\r\n            {if cur = 0:\r\n                {lastdiscardmaterials[cur].amount - lastdiscardmaterials[cur].minimum} {SetState(\"altair_material\", lastdiscardmaterials[cur].material)}\r\n            {F(\"Altair materials\")}\r\n            |elif cur < len(lastdiscardmaterials) - 1:\r\n                , {lastdiscardmaterials[cur].amount - lastdiscardmaterials[cur].minimum} {SetState(\"altair_material\", lastdiscardmaterials[cur].material)}\r\n            {F(\"Altair materials\")}\r\n            |else:\r\n                , y {lastdiscardmaterials[cur].amount - lastdiscardmaterials[cur].minimum} {SetState(\"altair_material\", lastdiscardmaterials[cur].material)}\r\n            {F(\"Altair materials\")}\r\n            }\r\n            {set cur to cur + 1}\r\n        }\r\n    }.\r\n|else:\r\n    Ningún material puede ser eliminado manteniendo los niveles mínimos.\r\n}\r\n",
      "default": false,
      "name": "Materials discard report",
      "description": "Report on which materials can be discarded"
    },
    "Materials required report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{set required to []}\r\n\r\n{for material in materials:\r\n  {if material.desired && material.amount < material.desired:\r\n    {set required to cat(required, [material])}\r\n }\r\n}\r\n\r\n{if len(required) > 0:\r\n    Necesita \r\n    {if len(required) = 1:\r\n        {required[0].desired - required[0].amount} {SetState(\"altair_material\", required[0].material)}\r\n            {F(\"Altair materials\")}\r\n    |elif len(required) = 2:\r\n        {required[0].desired - required[0].amount} {SetState(\"altair_material\", required[0].material)}\r\n            {F(\"Altair materials\")} y {required[1].desired - required[1].amount} {SetState(\"altair_material\", required[1].material)}\r\n            {F(\"Altair materials\")}\r\n    |else:\r\n        {set cur to 0}\r\n        {while cur < len(required):\r\n            {if cur = 0:\r\n                {required[cur].desired - required[cur].amount} {SetState(\"altair_material\", required[cur].material)}\r\n            {F(\"Altair materials\")}\r\n            |elif cur < len(required) - 1:\r\n                , {required[cur].desired - required[cur].amount} {SetState(\"altair_material\", required[cur].material)}\r\n            {F(\"Altair materials\")}\r\n            |else:\r\n                , y {required[cur].desired - required[cur].amount} {SetState(\"altair_material\", required[cur].material)}\r\n            {F(\"Altair materials\")}\r\n            }\r\n            {set cur to cur + 1}\r\n        }\r\n    }.\r\n|else:\r\n    Tiene todos los materiales deseados.\r\n}",
      "default": false,
      "name": "Materials required report",
      "description": "Report on how many of each material are required to reach 'desired' level"
    },
    "Message received": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'message')}\r\n{SetState('eddi_context_last_action', 'receive')}\r\n{SetState('eddi_context_message_name', event.from)}\r\n{SetState('eddi_context_message_content', event.message)}\r\n\r\n{if event.player = true:\r\n    {if event.message = \"o7\":\r\n        El comandante {event.from}\r\n        {if event.channel = \"player\":\r\n            te\r\n        } manda saludos.\r\n    |else:\r\n        Mensaje de {event.from}: {event.message}.\r\n    }\r\n|elif event.source != \"Station\":\r\n    Mensaje de {event.from}: {event.message}.\r\n}\r\n",
      "default": false,
      "name": "Message received",
      "description": "Se activa cuando recibes un mensaje"
    },
    "Message sent": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'message')}\r\n{SetState('eddi_context_last_action', 'send')}\r\n{SetState('eddi_context_message_name', event.to)}\r\n{SetState('eddi_context_message_content', event.message)}\r\n\r\n{OneOf(\"Mensaje fuera\", \"mensaje enviado\", \"enviado\")}.",
      "default": false,
      "name": "Message sent",
      "description": "Se activa cuando envías un mensaje"
    },
    "Mission abandoned": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Misión abandonada.",
      "default": true,
      "name": "Mission abandoned",
      "description": "Se activa cuando abandonas una misión"
    },
    "Mission accepted": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if event.communal:\r\n    Objetivo de la comunidad aceptado.\r\n|else:\r\n    Misión para la facción {event.faction} aceptada.\r\n    {if event.passengerswanted:\r\n        {set wanteddescription to OneOf(\"pasajeros buscados\", \"conocidos criminales\", \"criminales buscados\")}\r\n        Precaución: {OneOf(\"Estamos transportando {wanteddescription}\",\"{wanteddescription} a bordo.\")}.\r\n    }\r\n}",
      "default": false,
      "name": "Mission accepted",
      "description": "Se activa cuando aceptas una misión"
    },
    "Mission completed": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": "\r\n{commodityreward.commodity}\r\n{if event.reward > 0:\r\n    Pago de {event.reward} créditos {Occasionally(2, 'de la facción {event.faction}')} {OneOf('recibido.', 'confirmado.')}.\r\n|elif event.donation > 0:\r\n    {OneOf(\"Efectuada donación de {Occasionally(2, '{event.donation} créditos')} a {Occasionally(2, 'los agradecidos miembros de ')} {event.faction}\",\r\n                 \"{event.faction} ha recibido {Occasionally(2, 'gratamente')} su donativo {Occasionally(2, 'de {event.donation} créditos')}\",\r\n                 \"{event.faction} le agradece su donativo {Occasionally(2, 'de {event.donation} créditos')}\"\r\n    )}.\r\n|else:\r\n    Misión completada.\r\n}\r\n{for commodityreward in event.commodityrewards:\r\n  {SetState(\"altair_commodity\", commodityreward.commodity)}\r\n  {commodityreward.amount} toneladas de {F(\"Altair commodities\")} {OneOf(\"a bordo\", \"recibidas también\", \"confirmadas a bordo\")}.\r\n}",
      "default": false,
      "name": "Mission completed",
      "description": "Se activa cuando completas una misión"
    },
    "Mission failed": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Mission failed",
      "description": "Se activa cuando fallas una misión"
    },
    "Mission redirected": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Misión redirigida desde\r\n{if event.olddestinationstation:\r\n   {event.olddestinationstation} en {event.olddestinationsystem} \r\n   a {event.newdestinationstation} en {event.newdestinationsystem}\r\n|else:\r\n   {event.olddestinationsystem} a {event.newdestinationsystem}\r\n}",
      "default": false,
      "name": "Mission redirected",
      "description": "Se activa cuando una misión es redirigida"
    },
    "Modification applied": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Modification applied",
      "description": "Se activa cuando aplicas una modificación a un módulo"
    },
    "Modification crafted": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Modification crafted",
      "description": "Se activa cuando creas una modificación a un módulo"
    },
    "Module arrived": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Occasionally(2, '{F(\\'Honorific\\')}, ')}\nSu {event.module.name} ha\n\n{OneOf('llegado{if station.name != event.station && event.station: a}', \n       'completado su transferencia {if station.name != event.station && event.station: en}')}\n\n{if station.name != event.station && event.station:\n   {event.station}\n   {if system.name != event.system && event.system:\n      en el sistema {event.system}\n   }\n}.",
      "default": true,
      "name": "Module arrived",
      "description": "Se aplica cuando se completa una transferencia de módulo"
    },
    "Module purchased": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": "Adquirido un {event.buymodule.name} de clase {event.buymodule.class}-{event.buymodule.grade}\n\n{if type(event.buymodule.mount) != \"vacío\":\n    {for index, value in event.buymodule.mount: {set mount to value}}\n    {if mount = 0:\n        fijo\n    |elif mount = 1:\n        guiado\n    |elif mount = 2:\n        torreta\n    }\n}\n, por {event.buyprice} créditos\n\n{if type(event.sellmodule) != \"vacío\":\n    , y vendido un {event.sellmodule.name} de clase {event.sellmodule.class}-{event.sellmodule.grade},\n\n    {if type(event.sellmodule.mount) != \"vacío\":\n        {for index, value in event.sellmodule.mount: {set mount to value}}\n        {if mount = 0:\n            fijo\n        |elif mount = 1:\n            guiado\n       |elif mount = 2:\n            torreta\n        }\n    }\n    , por {event.sellprice} créditos\n\n|elif type(event.storedmodule) != \"vacío\":\n    , y almacenado un {event.storedmodule.name} de clase {event.storedmodule.class}-{event.storedmodule.grade},\n\n    {if type(event.storedmodule.mount) != \"vacío\":\n        {for index, value in event.storedmodule.mount: {set mount to value}}\n        {if mount = 0:\n            fijo\n        |elif mount = 1:\n            guiado\n       |elif mount = 2:\n            torreta\n        }\n    }\n}",
      "default": true,
      "name": "Module purchased",
      "description": "Se activa cuando compras un módulo"
    },
    "Module retrieved": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": "Recuperado {event.module.name} de clase {event.module.class}{event.module.grade} \n\n{if type(event.module.mount) != \"vacío\":\n    {for index, value in event.module.mount: {set mount to value}}\n    {if mount = 0:\n        fijo\n    |elif mount = 1:\n        guiado\n    |elif mount = 2:\n        torreta\n    }\n}\n\n del almacén,\n\n{if type(event.swapoutmodule) != \"vacío\":\n    y almacenado un {event.swapoutmodule.name} de clase {event.swapoutmodule.class}-{event.swapoutmodule.grade}\n\n    {if type(event.swapoutmodule.mount) != \"vacío\":\n        {for index, value in event.swapoutmodule.mount: {set mount to value}}\n        {if mount = 0:\n            fijo\n        |elif mount = 1:\n            guiado\n       |elif mount = 2:\n            torreta\n        }\n    }\n    \n},\n\n{if type(event.cost) != \"vacío\": por un coste de {event.cost} créditos}",
      "default": true,
      "name": "Module retrieved",
      "description": "Se activa cuando busca un módulo previamente almacenado"
    },
    "Module sold": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": "Ha vendido su {event.module.name} de clase {event.module.class}-{event.module.grade}\n\n{if type(event.module.mount) != \"vacío\":\n    {for index, value in event.module.mount: {set mount to value}}\n    {if mount = 0:\n        fijo\n    |elif mount = 1:\n        guiado\n    |elif mount = 2:\n        torreta\n    }\n},\n\n por {event.price} créditos.",
      "default": true,
      "name": "Module sold",
      "description": "Se activa cuando vende un módulo instalado en la nave"
    },
    "Module sold from storage": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": "Ha vendido su {event.module.name} de clase {event.module.class}-{event.module.grade}\n\n{if type(event.module.mount) != \"vacío\":\n    {for index, value in event.module.mount: {set mount to value}}\n    {if mount = 0:\n        fijo\n    |elif mount = 1:\n        guiado\n    |elif mount = 2:\n        torreta\n    }\n},\n\ndesde su almacén, por {event.price} créditos.",
      "default": true,
      "name": "Module sold from storage",
      "description": "Se activa cuando vende un módulo almacenado"
    },
    "Module stored": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": "Almacenado {event.module.name} de clase {event.module.class}-{event.module.grade}\n\n{if type(event.module.mount) != \"vacío\":\n    {for index, value in event.module.mount: {set mount to value}}\n    {if mount = 0:\n        fijo\n    |elif mount = 1:\n        guiado\n    |elif mount = 2:\n        torreta\n    }\n}\n\n\n\n{if type(event.cost) = \"vacío\": . |else: por un coste de {event.cost} créditos.}",
      "default": true,
      "name": "Module stored",
      "description": "Se activa cuando almacena un módulo"
    },
    "Module swapped": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": "Ha intercambiado las posiciones de su {event.frommodule.name} de clase {event.frommodule.class}-{event.frommodule.grade}\n\n{if type(event.frommodule.mount) != \"void\":\n    {for index, value in event.frommodule.mount: {set mount to value}}\n    {if mount = 0:\n        de montura fija\n    |elif mount = 1:\n        de montura guiada\n    |elif mount = 2:\n        de torreta\n    }\n},\n\n por \n\n{if event.tomodule:\n    un {event.tomodule.name} de clase {event.tomodule.class}-{event.tomodule.grade},\n    {if type(event.tomodule.mount) != \"void\":\n        {for index, value in event.tomodule.mount: {set mount to value}}\n        {if mount = 0:\n            de montura fija\n        |elif mount = 1:\n            de montura guiada\n        |elif mount = 2:\n            de torreta\n        }\n    }\n    .\n|else: \n    en un anclaje vacío.\n}",
      "default": true,
      "name": "Module swapped",
      "description": "Se activa cuando se intercambian módulos entre ubicaciones de la nave"
    },
    "Module transfer": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": "Transferido {event.module.name} de clase {event.module.class}-{event.module.grade}\n\n{if event.module.mount:\n    {for index, value in event.module.mount: {set mount to value}}\n    {if mount = 0:\n        de montura fija\n    |elif mount = 1:\n        de montura guiada\n    |elif mount = 2:\n        de torreta\n    }\n},\n\n\n{if event.transfercost: por un importe de {event.transfercost} créditos.}\n\n{set t_remaining to event.transfertime}\n\n{if t_remaining:\n\n   {Pause(1000)}\n   Llegada prevista, en \n\n   {if t_remaining > (60*60*24):\n      {set t_days to floor(t_remaining/(60*60*24))}\n      {t_days} días,\n      {set t_remaining to t_remaining-(t_days*(60*60*24))}\n   }\n\n   {if t_remaining > 3600:\n      {set t_hours to floor(t_remaining/3600)}\n      {t_hours} horas,\n      {set t_remaining to t_remaining-(t_hours*(60*60))}\n   }\n\n   {if t_remaining > 60:\n      {if t_days || t_hours: y }\n      {set t_minutes to round(t_remaining/(60),0)}\n      {t_minutes} minutos.\n   }\n}",
      "default": true,
      "name": "Module transfer",
      "description": "Se activa cuando se transfiere un módulo almacenado a otra estación espacial"
    },
    "Modules stored": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": "Ha almacenado los siguientes módulos:\n\n{for module in event.modules:\n\n    {module.name} de clase {module.class}-{module.grade},\n\n    {if type(module.mount) != \"void\":\n        {for index, value in module.mount: {set mount to value}}\n        {if mount = 0:\n            de montura fija\n        |elif mount = 1:\n            de montura guiada\n        |elif mount = 2:\n            de torreta\n        }\n    }\n    \n    {Pause(400)}\n}",
      "default": true,
      "name": "Modules stored",
      "description": "Se activa cuando se almacenan múltiples módulos"
    },
    "Music": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Music",
      "description": "Se activa cuando la música ambiental cambia"
    },
    "Nav beacon scan": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context _}\r\n{SetState('eddi_context_last_subject', 'nav beacon')}\r\n{SetState('eddi_context_last_action', 'scan')}\r\n{SetState('eddi_context_star_system', system.name)}\r\n{SetState('eddi_context_nav_scans', event.numbodies)}\r\n\r\n\r\n{OneOf(\"Esta baliza de navegación ha transferido detalles de {event.numbodies} cuerpos en este sistema.\",\r\n \"Detalles de {event.numbodies} cuerpos en este sistema recibidos.\")}\r\n\r\n{Pause(500)}",
      "default": false,
      "name": "Nav beacon scan",
      "description": "Se activa cuando se escanea una baliza de navegación, antes de que los datos de escaneo de todos los cuerpos celestes del sistema se escriban en el diario"
    },
    "Near surface": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Near surface",
      "description": "Se activa cuando se entra o se sale de la órbita de la superficie de un planeta"
    },
    "NPC attack commenced": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "\r\n{OneOf('Alerta. estamos siendo atacados por {F(\"Altair tipo NPC\")}','Alerta. nos está atacando {F(\"Altair tipo NPC\")}','Alerta. ataque detectado por parte de {F(\"Altair tipo NPC\")}', 'Alerta: {F(\"Altair tipo NPC\")} nos está atacando', 'Alerta: {F(\"Altair tipo NPC\")} ha iniciado un ataque contra nosotros')}\r\n\r\n .\r\n",
      "default": false,
      "name": "NPC attack commenced",
      "description": "Se activa cuando se detecta un ataque de un NPC sobre su nave"
    },
    "NPC cargo scan commenced": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "\r\n{_ See if we are carrying non-limpet cargo}\r\n{set carryingvaluablecargo to 0}\r\n{for cargo in ship.cargo:\r\n    {if cargo.commodity != 'Limpet':\r\n        {set carryingvaluablecargo to 1}\r\n    }\r\n}\r\n\r\n{if carryingvaluablecargo = 1:\r\n  {OneOf ('cuidado: detecto {F(\"Altair tipo NPC\")} escaneando nuestra carga', 'cuidado: {F(\"Altair tipo NPC\")} está escaneando nuestra carga') }.\r\n}\r\n",
      "default": false,
      "name": "NPC cargo scan commenced",
      "description": "Se activa cuando se detecta un escaneo de la carga de su nave por un NPC"
    },
    "NPC interdiction commenced": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{OneOf ('Alerta: detectado intento de interdicción por parte de {F(\"Altair tipo NPC\")}','Alarma: estamos siendo interdictados por {F(\"Altair tipo NPC\")}','alarma: {F(\"Altair tipo NPC\")} está intentando interdictarnos')}.\r\n\r\n{Occasionally(3, \"Debemos intentar evitarlo, o reducir la velocidad.\")}",
      "default": false,
      "name": "NPC interdiction commenced",
      "description": "Se activa cuando se detecta un intento de interdicción de su nave por un NPC"
    },
    "Power commodity delivered": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": "{SetState(\"altair_commodity\", event.commodity)}\r\n{SetState(\"altair_potencia\", event.power)}\r\n\r\n\r\n{event.amount} unidades de {F(\"Altair commodities\")} entregadas {OneOf(' ','a {F(\"Altair nombres potencias\")}')}.",
      "default": false,
      "name": "Power commodity delivered",
      "description": "Se activa cuando un Comandante entrega una mercancía a una potencia"
    },
    "Power commodity fast tracked": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{SetState(\"altair_potencia\", event.power)}\r\n\r\n{event.amount} créditos gastados en acelerar mercancías {OneOf(' ','para {F(\"Altair nombres potencias\")}')}.",
      "default": false,
      "name": "Power commodity fast tracked",
      "description": "Se activa cuando un Comandante rastrea rápidamente una mercancía de una potencia"
    },
    "Power commodity obtained": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": "{SetState(\"altair_commodity\", event.commodity)}\r\n{SetState(\"altair_potencia\", event.power)}\r\n\r\n\r\nobtenidas {event.amount} unidades de {F(\"Altair commodities\")} {OneOf(' ','para {F(\"Altair nombres potencias\")}')}.\r\n",
      "default": false,
      "name": "Power commodity obtained",
      "description": "Se activa cuando un Comandante obtiene una mercancía de una potencia"
    },
    "Power defected": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "\r\n\r\nHa desertado de \r\n{SetState(\"altair_potencia\", event.frompower)}\r\n{F(\"Altair nombres potencias\")}\r\n hacia\r\n{SetState(\"altair_potencia\", event.topower)}\r\n{F(\"Altair nombres potencias\")}\r\n.",
      "default": false,
      "name": "Power defected",
      "description": "Se activa cuando deserta de una potencia para unirse a otra"
    },
    "Power expansion vote cast": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Voto registrado",
      "default": false,
      "name": "Power expansion vote cast",
      "description": "Se activa cuando un Comandante vota a favor de la expansión de un sistema"
    },
    "Power joined": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{SetState(\"altair_potencia\", event.power)}\r\n\r\nAhora estamos alineados con {F(\"Altair nombres potencias\")}",
      "default": false,
      "name": "Power joined",
      "description": "Se activa cuando se une a una potencia"
    },
    "Power left": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{SetState(\"altair_potencia\", event.power)}\r\n\r\nHemos dejado de estar alineados con {F(\"Altair nombres potencias\")}",
      "default": false,
      "name": "Power left",
      "description": "Se activa cuando abandona una potencia"
    },
    "Power preparation vote cast": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": "Voto\n{OneOf(\"emitido\", \"registrado\")}",
      "default": true,
      "name": "Power preparation vote cast",
      "description": "Se activa cuando un Comandante vota por la preparación de un sistema"
    },
    "Power salary claimed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{SetState(\"altair_potencia\", event.power)}\r\n\r\nSalario de {event.amount}  créditos reclamado {OneOf(' ','a {F(\"Altair nombres potencias\")}')}.",
      "default": false,
      "name": "Power salary claimed",
      "description": "Se activa cuando un Comandante reclama su salario de una potencia"
    },
    "Power voucher received": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Power voucher received",
      "description": "Se activa cuando se entrega un bono de combate en contra de una potencia opositora"
    },
    "Repair drone": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{set systemsrepaired to []}\r\n\r\n{if event.hull:\r\n   {set systemsrepaired to cat(systemsrepaired, [\"el casco\"])} \r\n}\r\n{if event.cockpit:\r\n   {set systemsrepaired to cat(systemsrepaired, [\"la cabina\"])} \r\n}\r\n{if event.corrosion:\r\n   {set systemsrepaired to cat(systemsrepaired, [OneOf(\"sistemas corroidos\", \"sistemas afectados por corrosión\")])} \r\n}\r\n\r\n{if len(systemsrepaired) > 0:\r\n\r\n    {set remote to Occasionally(2, \"remotas\")}\r\n    {set sequence to OneOf(\"secuencia completada\", \"ciclo completado\")}\r\n    {OneOf(\r\n        \"El drón ha completado sus reparaciones {remote} a\", \r\n        \"{sequence}, se han hecho reparaciones a\"\r\n    )}\r\n\r\n    {set cur to 0}\r\n    {while cur < len(systemsrepaired):\r\n        {if cur = 0:\r\n        |elif cur < len(systemsrepaired) - 1:\r\n            , \r\n        |else:\r\n            y\r\n        }\r\n        {systemsrepaired[cur]}\r\n        {set cur to cur + 1}\r\n    }\r\n}.\r\n",
      "default": false,
      "name": "Repair drone",
      "description": "Se activa cuando su nave es reparada por medio de un controlador de drones"
    },
    "Repeat last speech": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{state.eddi_context_last_speech}",
      "default": true,
      "name": "Repeat last speech",
      "description": "Repeat the last thing said"
    },
    "Report last scan value": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Context }\n{set scanValue to state.eddi_context_last_scan_estimated_value}\n\n{if scanValue:\n   {OneOf(\"Esto\", \"Esta información\", \"Este escaneo\")} \n   {OneOf(\"podría\", \"puede\", \"debería\") } \n   {OneOf(\"venderse por\", \"valer\", \"reportarle\", \"ponerse en venta por\")}\n   {Humanise(scanValue)} créditos.\n}\n",
      "default": true,
      "name": "Report last scan value",
      "description": "Report the estimated value of the last body scanned"
    },
    "Screenshot": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Screenshot",
      "description": "Se activa cuando se toma una captura de pantalla"
    },
    "Search and rescue": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": "{OneOf(\"recuperado\", \"salvado\")}{if event.amount > 1:s}\n{event.amount}\n{if event.commodity.rare: raro}\n\n{if event.commodity.name = \"Cajas negras\":\n   {if event.amount > 1:\n      {OneOf(\" registros de vuelo\", \" cajas negras\")}\n   |else: \n      {OneOf(\" registro de vuelo\", \"a caja negra\")}\n   }\n\n|elif event.commodity.name = \"Cápsula de escape dañada\":\n   {if event.amount > 1:\n   {OneOf(\" cápsulas criogénicas dañadas\", \" cápsulas de escápe dañadas\")}\n   |else:\n   {OneOf(\"a cápsula criogénica dañada\", \"a cápsula de escápe dañada\")}\n   }\n\n|elif event.commodity.name = \"Cápsula de escape ocupada\":\n   {if event.amount > 1:\n   {OneOf(\" cápsulas criogénicas ocupadas\", \" cápsulas de escápe ocupadas\")}\n   |else:\n   {OneOf(\"a cápsula criogénica ocupada\", \"a cápsula de escápe ocupada\")}\n   }\n\n|elif event.commodity.name = \"Efectos personales\":\n   {OneOf(\"conjunto\", \"bulto\")}{if event.amount > 1:s} de\n   {OneOf(\"objetos personales\", \"recuerdos personales\")}\n\n|elif event.commodity.name = \"Restos de accidentes\":\n   {set wreckage to OneOf(\"escombros\", \"restos\", \"resíduos\", basura espacial)}\n   {set fragment to tonelada}\n   {OneOf(\"{fragment}{if event.amount > 1:s} de {wreckage}\", \n          \"{fragment}{if event.amount > 1:s} de {wreckage} provenientes de accidentes\")}\n\n|elif event.commodity.name = \"Rehenes\":\n   {OneOf(\"rehen\")}{if event.amount > 1:es}\n\n|else:\n   tonelada{if event.amount > 1:s} de {event.commodity.name},\n}\n\npor {(event.reward)} créditos\n",
      "default": true,
      "name": "Search and rescue",
      "description": "Se activa cuando se entregan elementos a un contacto de Búsqueda y Rescate"
    },
    "Security presence report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{if system.population > 0:\r\n    {OneOf ('los sensores detectan','detecto')} \r\n\r\n    {if system.security = \"None\":\r\n        OneOf(\"una falta total\",\"una ausencia total\", \"la inexistencia\")\r\n    |elif system.security = \"Low\":\r\n        {OneOf(\"una mínima presencia\", \"una baja presencia\", \"muy poca presencia\",\"escasa presencia\")}\r\n    |elif system.security = \"Medium\":\r\n        {OneOf(\"un nivel medio\", \"alguna presencia\", \"cierta presencia\")}\r\n    |elif system.security = \"High\":\r\n        {OneOf(\"una alta presencia\", \"una fuerte presencia\", \"una abundante presencia\")}\r\n    |else:\r\n        {system.security}\r\n    } \r\n    {OneOf(\"de fuerzas policiales\", \"de seguridad\", \"de agentes de la ley\",\"de agentes de seguridad\")} {OneOf(\"aquí\", \"en este sistema\", \"en esta localización\")}.\r\n}",
      "default": false,
      "name": "Security presence report",
      "description": "Function to report on the details of system security"
    },
    "Self destruct": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Secuencia de autodestrucción iniciada. Cerrando orificios de ventilación.",
      "default": true,
      "name": "Self destruct",
      "description": "Se activa cuando comienza la secuencia de auto destrucción"
    },
    "Settlement approached": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Settlement approached",
      "description": "Se activa cuando se aproxima a un asentamiento"
    },
    "Shields down": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Alarma: Escudos {OneOf('desactivados','sin energía','fuera de línea')}.",
      "default": false,
      "name": "Shields down",
      "description": "Se activa cuando los escudos de la nave se desconectan"
    },
    "Shields up": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Escudos {OneOf('en línea','activados')}.",
      "default": false,
      "name": "Shields up",
      "description": "Se activa cuando los escudos de la nave se activan"
    },
    "Ship arrived": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Occasionally(2, '{F(\\'Honorific\\')}, ')}\nSu {event.ship} ha \n\n{OneOf('llegado a {if station.name != event.station && event.station:}', \n       'completado su transferencia a {if station.name != event.station && event.station:}')}\n\n{if station.name != event.station && event.station:\n   {event.station}\n   {if system.name != event.system && event.system:\n      en el sistema  {event.system}\n   }\n}.",
      "default": true,
      "name": "Ship arrived",
      "description": "Se activa cuando se completa la transferencia de una nave a otro sistema"
    },
    "Ship delivered": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Entrega de la nave completada.",
      "default": false,
      "name": "Ship delivered",
      "description": "Se activa cuando se le hace entrega de una nave recién comprada"
    },
    "Ship fsd": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Ship fsd",
      "description": "Se activa cuando hay un cambio en el estado del FSD de su nave"
    },
    "Ship interdicted": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Ship interdicted",
      "description": "Se activa cuando su nave es interdictada por otra"
    },
    "Ship interdiction": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Iniciada maniobra de interdicción.",
      "default": false,
      "name": "Ship interdiction",
      "description": "Se activa cuando interdicta a otra nave"
    },
    "Ship loadout": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Ship loadout",
      "description": "Se activa cuando obtienes carga a tu nave"
    },
    "Ship low fuel": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Bajo combustible de la nave",
      "description": "Se activa cuando el combustible de la nave cae por debajo del 25%"
    },
    "Ship purchased": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Nueva nave adquirida.",
      "default": false,
      "name": "Ship purchased",
      "description": "Se activa cuando compra una nave"
    },
    "Ship rebooted": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Ship rebooted",
      "description": "Se activa cuando efectúa un reinicio o una reparación en su nave"
    },
    "Ship refuelled": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "\r\n{Pause(3000)}\r\n\r\n{if ship.fueltanktotalcapacity = event.total:\r\n  {OneOf (ShipName(),\"Nave\")} totalmente {OneOf ('reabastecida','recargada')} de combustible\r\n\r\n|else:\r\n  {OneOf (ShipName(),\"Nave\")} {OneOf ('reabasteciéndose','recargándose')} de combustible\r\n   \r\n}",
      "default": false,
      "name": "Ship refuelled",
      "description": "Se activa cuando se reposta combustible en su nave"
    },
    "Ship renamed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{ShipName()} registrada en {system.faction}.  Su identificación es {ICAO(event.ident)}.",
      "default": true,
      "name": "Ship renamed",
      "description": "Se activa cuando se cambia el nombre de una nave"
    },
    "Ship repaired": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": "{ShipName()} reparada.",
      "default": true,
      "name": "Ship repaired",
      "description": "Se activa cuando se repara su nave"
    },
    "Ship repurchased": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Ship repurchased",
      "description": "Se activa cuando se recompra su nave"
    },
    "Ship restocked": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{OneOf (ShipName(),\"Nave\")} {OneOf(\"recargada\",\"rearmada\")}.",
      "default": false,
      "name": "Ship restocked",
      "description": "Se activa cuando se recarga la munición de su nave"
    },
    "Ship shutdown": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Ship shutdown",
      "description": "Se activa cuando se desconectan los sistemas de su nave"
    },
    "Ship sold": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{OneOf(\"Retirada {ShipName(event.shipid, event.ship)} del servicio activo.\",\r\n             \"{ShipName(event.shipid, event.ship)} Dada de baja .\",\r\n             \"{ShipName(event.shipid, event.ship)} vendida .\",)}\r\n\r\n{if event.system != system.name:\r\n   en el sistema {event.system}\r\n}",
      "default": false,
      "name": "Ship sold",
      "description": "Se activa cuando se vende una nave"
    },
    "Ship sold on rebuy": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Nave vendida en {event.system} por {event.price} créditos.",
      "default": false,
      "name": "Ship sold on rebuy",
      "description": "Se activa cuando se vende una nave para obtener fondos para el seguro o recompra de la nave"
    },
    "Ship swapped": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if event.storedship:\r\n    {SetState(\"altair_nombrenave\", event.storedship)}\r\n    {OneOf(\"Almacenando\", \"Estacionando\", \"Aparcando\")} \r\n    {F(\"Altair naves\")} \r\n    y \r\n|elif event.soldship:\r\n    {SetState(\"altair_nombrenave\", event.soldship)}\r\n    vendiendo \r\n    {F(\"Altair naves\")}\r\n    y\r\n}\r\n{SetState(\"altair_nombrenave\", event.ship)}\r\n{OneOf(\"trasladándose a\",\"embarcando en\",\"transfiriéndose a\")} \r\n{F(\"Altair naves\")}.",
      "default": false,
      "name": "Ship swapped",
      "description": "Se activa cuando se cambia de nave"
    },
    "Ship transfer initiated": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{SetState(\"altair_nombrenave\", event.ship)}\r\n\r\n \r\n{F(\"Altair naves\")} \r\n \r\n{OneOf(\"está en camino\",\"está siendo transferida\", \"está siendo transportada\", \"está siendo enviada\", \"está de camino\")} desde {event.system}.\r\n\r\n{if event.transfercost: por un coste de {event.price} créditos.}\r\n\r\n{set t_remaining to event.time}\r\n\r\n{if t_remaining:\r\n\r\n   {Pause(1000)}\r\n   Llegada prevista en:\r\n\r\n   {if t_remaining > (60*60*24):\r\n      {set t_days to floor(t_remaining/(60*60*24))}\r\n      {t_days} dias,\r\n      {set t_remaining to t_remaining-(t_days*(60*60*24))}\r\n   }\r\n\r\n   {if t_remaining > 3600:\r\n      {set t_hours to floor(t_remaining/3600)}\r\n      {t_hours} horas,\r\n      {set t_remaining to t_remaining-(t_hours*(60*60))}\r\n   }\r\n\r\n   {if t_remaining > 60:\r\n      {if t_days || t_hours: y}\r\n      {set t_minutes to round(t_remaining/(60),0)}\r\n      {t_minutes} minutos.\r\n   }\r\n}",
      "default": false,
      "name": "Ship transfer initiated",
      "description": "Se activa cuando se inicia la transferencia de una nave a otro sistema"
    },
    "Shutdown": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Shutdown",
      "description": "Se activa cuando se hace un cierre limpio del juego"
    },
    "SRV docked": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": "{OneOf(\"Buggy\", \"uve erre ese\")} {OneOf(\"embarcado\",\"recogido\")} {Occasionally (2,OneOf(\"comandante\",\"señor\"))}.",
      "default": false,
      "name": "SRV docked",
      "description": "Se activa cuando embarca un VRS en su nave"
    },
    "SRV launched": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": "{OneOf(\"Buggy\", \"uve erre ese\")} {OneOf(\"lanzado\", \"fuera\",\"desplegado\")} {Occasionally (2,OneOf(\"comandante\",\"señor\"))}.",
      "default": false,
      "name": "SRV launched",
      "description": "Se activa cuando se desembarca un VRS desde su nave"
    },
    "SRV turret": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "SRV turret",
      "description": "Se activa cuando despliega o repliega la torreta de armas de su VRS"
    },
    "SRV turret deployable": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if !event.deployable:\n   {OneOf(\"Bugui\", \"VRS\")} esperando para embarque.\n}",
      "default": true,
      "name": "SRV turret deployable",
      "description": "Se activa cuando su VRS entra o sale de la zona de seguridad de alrededor de su nave"
    },
    "SRV under ship": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{OneOf(\"Buggy\", \"SRV\")} standing by for recovery.",
      "default": true,
      "name": "SRV under ship",
      "description": "Triggered when your SRV enters the recovery zone under your ship"
    },
    "Star report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch from context }\r\n{set reportbody to BodyDetails(state.eddi_context_star_star, state.eddi_context_star_system)}\r\n\r\n{if !reportbody.name || reportbody.name = \"\":\r\n    I'm not sure which star you are asking about.\r\n|else:\r\n    {set mainsequence to 0}\r\n    {reportbody.name} es\r\n    {if reportbody.stellarclass = \"O\":\r\n        an incredibly rare main sequence star\r\n        {set mainsequence to 1}\r\n    |elif reportbody.stellarclass = \"B\":\r\n        a very rare main sequence star\r\n        {set mainsequence to 1}\r\n    |elif reportbody.stellarclass = \"A\":\r\n        a rare main sequence star\r\n        {set mainsequence to 1}\r\n    |elif reportbody.stellarclass = \"F\":\r\n        an uncommon main sequence star\r\n        {set mainsequence to 1}\r\n    |elif reportbody.stellarclass = \"G\":\r\n        a common main sequence star\r\n        {set mainsequence to 1}\r\n    |elif reportbody.stellarclass = \"K\":\r\n        a common main sequence star\r\n        {set mainsequence to 1}\r\n    |elif reportbody.stellarclass = \"M\":\r\n        a very common main sequence star\r\n        {set mainsequence to 1}\r\n    |elif reportbody.stellarclass = \"L\":\r\n        a brown dwarf\r\n    |elif reportbody.stellarclass = \"T\":\r\n        a brown dwarf\r\n    |elif reportbody.stellarclass = \"Y\":\r\n        a brown dwarf\r\n    |elif reportbody.stellarclass = \"TTS\":\r\n        a T tauri star in the process of gravitational contraction\r\n    |elif reportbody.stellarclass = \"AeBe\":\r\n        a very young proto-star yet to enter main sequence {Occasionally(4, \"but on the way to becoming an A or B class star\")}\r\n    |elif reportbody.stellarclass = \"W\":\r\n        an old star {Occasionally(4, \"nearing the end of its lifecycle and no longer burning hydrogen\")}\r\n    |elif reportbody.stellarclass = \"WN\":\r\n        an old star {Occasionally(4, \"nearing the end of its lifecycle and no longer burning hydrogen\")}\r\n    |elif reportbody.stellarclass = \"WNC\":\r\n        an old star {Occasionally(4, \"nearing the end of its lifecycle and no longer burning hydrogen\")}\r\n    |elif reportbody.stellarclass = \"WC\":\r\n        an old star {Occasionally(4, \"nearing the end of its lifecycle and no longer burning hydrogen\")}\r\n    |elif reportbody.stellarclass = \"WO\":\r\n        an old star {Occasionally(4, \"nearing the end of its lifecycle and no longer burning hydrogen\")}\r\n    |elif reportbody.stellarclass = \"CS\":\r\n        a carbon star\r\n    |elif reportbody.stellarclass = \"C\":\r\n        a {Occasionally(2, \"late-sequence\")} carbon star {Occasionally(4, \"with an atmosphere dominated by carbon\")}\r\n    |elif reportbody.stellarclass = \"CN\":\r\n        a {Occasionally(2, \"late-sequence\")} carbon star {Occasionally(4, \"with an atmosphere dominated by carbon\")}\r\n    |elif reportbody.stellarclass = \"CJ\":\r\n        a {Occasionally(2, \"late-sequence\")} carbon star {Occasionally(2, \"with high levels of carbon 13 in its atmosphere\")}\r\n    |elif reportbody.stellarclass = \"CH\":\r\n        a {Occasionally(2, \"late-sequence\")} carbon star {Occasionally(4, \"with an atmosphere dominated by carbon\")}\r\n    |elif reportbody.stellarclass = \"CHd\":\r\n        a {Occasionally(2, \"late-sequence\")} carbon star {Occasionally(4, \"with an atmosphere dominated by carbon\")}\r\n    |elif reportbody.stellarclass = \"MS\":\r\n        a late sequence star {Occasionally(4, \"that was once an M class star and is on the way to becoming a carbon star\")}\r\n    |elif reportbody.stellarclass = \"S\":\r\n        a late sequence star {Occasionally(4, \"that was once an M class star and is becoming a carbon star\")}\r\n    |elif reportbody.stellarclass = \"D\":\r\n        a white dwarf\r\n    |elif reportbody.stellarclass = \"DA\":\r\n        a white dwarf {Occasionally(4, \"with a hydrogen-rich atmosphere\")}\r\n    |elif reportbody.stellarclass = \"DAB\":\r\n        a white dwarf {Occasionally(4, \"with an atmosphere rich in hydrogen and helium\")}\r\n    |elif reportbody.stellarclass = \"DAO\":\r\n        a white dwarf\r\n    |elif reportbody.stellarclass = \"DAZ\":\r\n        a white dwarf\r\n    |elif reportbody.stellarclass = \"DAV\":\r\n        a white dwarf\r\n    |elif reportbody.stellarclass = \"DB\":\r\n        a white dwarf\r\n    |elif reportbody.stellarclass = \"DBZ\":\r\n        a white dwarf\r\n    |elif reportbody.stellarclass = \"DBV\":\r\n        a white dwarf\r\n    |elif reportbody.stellarclass = \"DO\":\r\n        a white dwarf\r\n    |elif reportbody.stellarclass = \"DOV\":\r\n        a white dwarf\r\n    |elif reportbody.stellarclass = \"DQ\":\r\n        a white dwarf\r\n    |elif reportbody.stellarclass = \"DC\":\r\n        a white dwarf\r\n    |elif reportbody.stellarclass = \"DCV\":\r\n        a white dwarf\r\n    |elif reportbody.stellarclass = \"DX\":\r\n        a white dwarf\r\n    |elif reportbody.stellarclass = \"N\":\r\n        a neuutron star {Occasionally(4, \"that has a dangerously high-density core\")}\r\n    |elif reportbody.stellarclass = \"H\":\r\n        a black hole\r\n    |elif reportbody.stellarclass = \"X\":\r\n        an exotic stellar entity\r\n    |elif reportbody.stellarclass = \"SuperMassiveBlackHole\":\r\n         a supermassive black hole\r\n    |elif reportbody.stellarclass = \"A_BlueWhiteSuperGiant\":\r\n        a blue-white supergiant {Occasionally(4, \"that is expanding towards being a red supergiant\")}\r\n    |elif reportbody.stellarclass = \"F_WhiteSuperGiant\":\r\n        a yellow-white supergiant {Occasionally(4, \"that is expanding towards being a red supergiant\")}\r\n    |elif reportbody.stellarclass = \"M_RedSuperGiant\":\r\n        a red supergiant {Occasionally(4, \"in its helium burning phase\")}\r\n    |elif reportbody.stellarclass = \"M_RedGiant\":\r\n        a red giant {Occasionally(4, \"that is expanding towards being a red supergiant\")}\r\n    |elif reportbody.stellarclass = \"K_OrangeGiant\":\r\n        an orange giant {Occasionally(4, \"that is expanding as it heads towards the end of its life\")}\r\n    |elif reportbody.stellarclass = \"RoguePlanet\":\r\n        a rogue planet\r\n    |elif reportbody.stellarclass = \"Nebula\":\r\n        a nebula\r\n    |elif reportbody.stellarclass = \"StellarRemnantNebula\":\r\n        a nebula remnant\r\n    }\r\n\r\n    {OneOf(\"that has been around for {Humanise(reportbody.age)} years\",\r\n           \"that is {Humanise(reportbody.age)} years old\",\r\n           \"of {Humanise(reportbody.age)} years\",\r\n    )}\r\n    {if reportbody.age < 1000000:\r\n        making it one of the youngest stars in the galaxy\r\n    |elif reportbody.age >14000000000:\r\n        making it one of the oldest stars in the galaxy\r\n    }.\r\n\r\n    {if mainsequence = 1:\r\n        {Occasionally(2,\"As you can see, it emits a {reportbody.chromaticity} light.\")}\r\n\r\n        {set notables to []}\r\n\r\n        {if reportbody.massprobability < 0.01:\r\n            {set notables to cat(notables, [cat(\"an incredibly low solar mass of \", Humanise(reportbody.solarmass))])}\r\n        |elif reportbody.massprobability <0.1:\r\n            {set notables to cat(notables, [cat(\"an extremely low solar mass of \", Humanise(reportbody.solarmass))])}\r\n        |elif reportbody.massprobability <1:\r\n            {set notables to cat(notables, [\"an unusually low solar mass\"])}\r\n        |elif reportbody.massprobability <10:\r\n            {set notables to cat(notables, [\"lower than average solar mass\"])}\r\n        |elif reportbody.massprobability > 99.99:\r\n            {set notables to cat(notables, [cat(\"an incredibly high solar mass of \", Humanise(reportbody.solarmass))])}\r\n        |elif reportbody.massprobability > 99.9:\r\n            {set notables to cat(notables, [cat(\"an extremely high solar mass of \", Humanise(reportbody.solarmass))])}\r\n        |elif reportbody.massprobability > 99:\r\n            {set notables to cat(notables, [\"an unusually high solar mass\"])}\r\n        |elif reportbody.massprobability > 90:\r\n            {set notables to cat(notables, [\"higher than average solar mass\"])}\r\n        }\r\n\r\n        {if reportbody.radiusprobability < 0.01:\r\n            {set notables to cat(notables, [cat(\"an incredibly low solar radius of \", Humanise(reportbody.solarradius))])}\r\n        |elif reportbody.radiusprobability <0.1:\r\n            {set notables to cat(notables, [cat(\"an extremely low solar radius of \", Humanise(reportbody.solarradius))])}\r\n        |elif reportbody.radiusprobability <1:\r\n            {set notables to cat(notables, [\"an unusually low solar radius\"])}\r\n        |elif reportbody.radiusprobability <10:\r\n            {set notables to cat(notables, [\"lower than average solar radius\"])}\r\n        |elif reportbody.radiusprobability > 99.99:\r\n            {set notables to cat(notables, [cat(\"an extremely high solar radius of \", Humanise(reportbody.solarradius))])}\r\n        |elif reportbody.radiusprobability > 99.9:\r\n            {set notables to cat(notables, [cat(\"an incredibly high solar radius of \", Humanise(reportbody.solarradius))])}\r\n        |elif reportbody.radiusprobability > 99:\r\n            {set notables to cat(notables, [\"an unusually high solar radius\"])}\r\n        |elif reportbody.radiusprobability > 90:\r\n            {set notables to cat(notables, [\"higher than average solar radius\"])}\r\n        }\r\n\r\n        {if reportbody.tempprobability < 0.01:\r\n            {set notables to cat(notables, [cat(\"an incredibly low surface temperature of \", Humanise(reportbody.temperature), \" kelvin\")])}\r\n        |elif reportbody.tempprobability <0.1:\r\n            {set notables to cat(notables, [cat(\"an extremely low surface temperature of \", Humanise(reportbody.temperature), \" kelvin\")])}\r\n        |elif reportbody.tempprobability <1:\r\n            {set notables to cat(notables, [\"an unusually low surface temperature\"])}\r\n        |elif reportbody.tempprobability <10:\r\n            {set notables to cat(notables, [\"lower than average surface temperature\"])}\r\n        |elif reportbody.tempprobability > 99.99:\r\n            {set notables to cat(notables, [cat(\"an extremely high surface temperature of \", Humanise(reportbody.temperature), \" kelvin\")])}\r\n        |elif reportbody.tempprobability > 99.9:\r\n            {set notables to cat(notables, [cat(\"an incredibly high surface temperature of \", Humanise(reportbody.temperature), \" kelvin\")])}\r\n        |elif reportbody.tempprobability > 99:\r\n            {set notables to cat(notables, [\"an unusually high surface temperature\"])}\r\n        |elif reportbody.tempprobability > 90:\r\n            {set notables to cat(notables, [\"higher than average surface temperature\"])}\r\n        }\r\n\r\n        {if len(notables) = 0:\r\n            {OneOf(\"\", \"This is a typical example of this class of star.\", \"There is nothing particularly notable about this star.\", \"It is an average example for such a star.\")}\r\n        |else:\r\n            {OneOf('Compared to other stars in its class', 'In comparison to other {reportbody.stellarclass}-class stars', 'Relative to other {reportbody.stellarclass}-class stars')}, this star is\r\n            {if len(notables) = 1:\r\n                notable for having {notables[0]}.\r\n            |elif len(notables) = 2:\r\n                {OneOf('interesting', 'unusual')}, with {notables[0]} and {notables[1]}.\r\n            |elif len(notables) = 3:\r\n                {OneOf('exceptional', 'remarkable')}, with {notables[0]}, {notables[1]} and {notables[2]}.\r\n            }\r\n        }\r\n    }    \r\n}",
      "default": false,
      "name": "Star report",
      "description": "Function to report on the details of the contextual body"
    },
    "Star scanned": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'star')}\r\n{SetState('eddi_context_last_action', 'scan')}\r\n{SetState('eddi_context_star_system', system.name)}\r\n{SetState('eddi_context_star_star', event.name)}\r\n\r\n{Pause(1000)}\r\n\r\nCompletado escaneo de estrella clase {Spacialise(event.stellarclass)}, llamada {event.name}.\r\n\r\n{set mainsequence to 0}\r\n. {OneOf('Es ','Se trata de ','Estamos ante ','Nos encontramos ante ')}\r\n{if event.stellarclass = \"O\":\r\n    una estrella de secuencia principal increiblemente rara\r\n    {set mainsequence to 1}\r\n|elif event.stellarclass = \"B\":\r\n    una estrella de secuencia principal muy rara\r\n    {set mainsequence to 1}\r\n|elif event.stellarclass = \"A\":\r\n    una rara estrella de secuencia principal\r\n    {set mainsequence to 1}\r\n|elif event.stellarclass = \"F\":\r\n    una estrella de secuencia principal poco común\r\n    {set mainsequence to 1}\r\n|elif event.stellarclass = \"G\":\r\n    una estrella común de secuencia principal\r\n    {set mainsequence to 1}\r\n|elif event.stellarclass = \"K\":\r\n    una estrella común de secuencia principal\r\n    {set mainsequence to 1}\r\n|elif event.stellarclass = \"M\":\r\n    una estrella muy común de secuencia principal\r\n    {set mainsequence to 1}\r\n|elif event.stellarclass = \"L\":\r\n    una enana marrón\r\n|elif event.stellarclass = \"T\":\r\n    una enana marrón\r\n|elif event.stellarclass = \"Y\":\r\n    una enana marrón\r\n|elif event.stellarclass = \"TTS\":\r\n    Una estrella T Tauri en proceso de contracción gravitacional\r\n|elif event.stellarclass = \"AeBe\":\r\n    una proto estrella muy joven aun por entrar en la secuencia principal {Occasionally(4, \"pero en proceso de convertirse en una estrella de clase A o B\")}\r\n|elif event.stellarclass = \"W\":\r\n    una estrella tipo wuolf rayet {Occasionally(2, \"de rápida combustión\")}\r\n    {Occasionally(2, \", diseminando una masa considerable y exponiendo elementos pesados en su núcleo, \")}\r\n|elif event.stellarclass = \"WN\":\r\n    una estrella tipo wuolf rayet rica en helio y nitrógeno {Occasionally(2, \"de rápida combustión\")}\r\n    {Occasionally(2, \", diseminando una masa considerable y exponiendo helio y nitrógeno ionizados en su núcleo, \")}\r\n|elif event.stellarclass = \"WNC\":\r\n    una estrella tipo wuolf rayet {Occasionally(2, \"de rápida combustión\")}\r\n    {Occasionally(2, \", diseminando una masa considerable y exponiendo carbono, nitrógeno, oxígeno y helio ionizados en su núcleo, \")}\r\n|elif event.stellarclass = \"WC\":\r\n    una estrella tipo wuolf rayet rica en carbono {Occasionally(2, \"de rápida combustión\")}\r\n    {Occasionally(2, \", diseminando una masa considerable y exponiendo carbono ionizado en su núcleo, \")}\r\n|elif event.stellarclass = \"WO\":\r\n    una estrella tipo wuolf rayet rica en oxígeno {Occasionally(2, \"de rápida combustión\")}\r\n    {Occasionally(2, \", diseminando una masa considerable y exponiendo oxígeno ionizado en su núcleo, \")}\r\n|elif event.stellarclass = \"CS\":\r\n    una estrella de carbono\r\n|elif event.stellarclass = \"C\":\r\n    una  estrella de carbono {Occasionally(2, \"de secuencia tardía \")} {Occasionally(4, \"con una atmósfera dominada por carbono\")}\r\n|elif event.stellarclass = \"CN\":\r\n    una  estrella de carbono {Occasionally(2, \"de secuencia tardía \")} {Occasionally(4, \"con una atmósfera dominada por carbono\")}\r\n|elif event.stellarclass = \"CJ\":\r\n    una estrella de carbono {Occasionally(2, \"de secuencia tardía \")} {Occasionally(2, \"con altos niveles de carbono 13 en su atmósfera\")}\r\n|elif event.stellarclass = \"CH\":\r\n    una estrella de carbono {Occasionally(2, \"de secuencia tardía \")} {Occasionally(4, \"con una atmósfera dominada por carbono\")}\r\n|elif event.stellarclass = \"CHd\":\r\n    una estrella de carbono {Occasionally(2, \"de secuencia tardía \")} {Occasionally(4, \"con una atmósfera dominada por carbono\")}\r\n|elif event.stellarclass = \"MS\":\r\n    una estrella de secuencia tardía {Occasionally(4, \"que una vez fué una estrella de clase M y está en proceso de convertirse en una estrella de carbono\")}\r\n|elif event.stellarclass = \"S\":\r\n    una estrella de secuencia tardía {Occasionally(4, \"que una vez fue una estrella de clase M y se está convirtiendo en una estrella de carbono\")}\r\n|elif event.stellarclass = \"D\":\r\n    una enana blanca\r\n|elif event.stellarclass = \"DA\":\r\n    una enana blanca {Occasionally(4, \"con una atmósfera rica en hidrógeno\")}\r\n|elif event.stellarclass = \"DAB\":\r\n    una enana blanca {Occasionally(4, \"con una atmósfera rica en hidrógeno y helio\")}\r\n|elif event.stellarclass = \"DAO\":\r\n    una enana blanca\r\n|elif event.stellarclass = \"DAZ\":\r\n    una enana blanca\r\n|elif event.stellarclass = \"DAV\":\r\n    una enana blanca\r\n|elif event.stellarclass = \"DB\":\r\n    una enana blanca\r\n|elif event.stellarclass = \"DBZ\":\r\n    una enana blanca\r\n|elif event.stellarclass = \"DBV\":\r\n    una enana blanca\r\n|elif event.stellarclass = \"DO\":\r\n    una enana blanca\r\n|elif event.stellarclass = \"DOV\":\r\n    una enana blanca\r\n|elif event.stellarclass = \"DQ\":\r\n    una enana blanca\r\n|elif event.stellarclass = \"DC\":\r\n    una enana blanca\r\n|elif event.stellarclass = \"DCV\":\r\n    una enana blanca\r\n|elif event.stellarclass = \"DX\":\r\n    una enana blanca\r\n|elif slice(reportbody.stellarclass, 0, 1) = \"N\":\r\n    una estrella de neutrones {Occasionally(4, \"con un peligroso núcleo de alta densidad\")}\r\n|elif event.stellarclass = \"H\":\r\n    un agujero negro\r\n|elif event.stellarclass = \"X\":\r\n    una entidad estelar exótica\r\n|elif event.stellarclass = \"SuperMassiveBlackHole\":\r\n     un agujero negro supermasivo\r\n|elif event.stellarclass = \"A_BlueWhiteSuperGiant\":\r\n    una supergigante blanco-azulada {Occasionally(4, \"que se está expandiendo para ser una supergigante roja\")}\r\n|elif event.stellarclass = \"F_WhiteSuperGiant\":\r\n    una supergigante blanco-amarilla {Occasionally(4, \"que se está expandiendo para ser una supergigante roja\")}\r\n|elif event.stellarclass = \"M_RedSuperGiant\":\r\n    una supergigante roja {Occasionally(4, \"en su fase de combustión de helio\")}\r\n|elif event.stellarclass = \"M_RedGiant\":\r\n    una gigante roja {Occasionally(4, \"que se está expandiendo para ser una supergigante roja\")}\r\n|elif event.stellarclass = \"K_OrangeGiant\":\r\n    una gigante naranja {Occasionally(4, \"que se está expandiendo a medida que avanza hacia el final de su vida\")}\r\n|elif event.stellarclass = \"RoguePlanet\":\r\n    un planeta errante\r\n|elif event.stellarclass = \"Nebula\":\r\n    una nebulosa\r\n|elif event.stellarclass = \"StellarRemnantNebula\":\r\n    un remanente de nebulosa\r\n|else:\r\n    una estrella clase {Spacialise(reportbody.stellarclass)}\r\n\r\n}\r\n{set ageInYears to event.age * 1000000}\r\n\r\n{if event.age > 0:\r\n      {OneOf(\" que ha estado aquí desde hace {event.age} años\",\r\n             \" que tiene {event.age} años de antigüedad\",\r\n             \" de {event.age} años\",)\r\n      }\r\n|else:\r\n      que lleva existiendo menos de un millón de años,\r\n} \r\n{if event.age < 1000000:\r\n    lo que la convierte en una de las estrellas más jóvenes de la galaxia.\r\n|elif event.age >14000000000:\r\n    lo que la convierte en una de las estrellas más antiguas de la galaxia.\r\n}.\r\n\r\n{if mainsequence = 1:\r\n   {if event.chromacity = \"blue\":\r\n       {Occasionally(2,\".Como puede ver, emite una luz azul.\")}\r\n   |elif event.chromacity = \"blue-white\":\r\n       {Occasionally(2,\".Como puede ver, emite una luz blanco azulada.\")}\r\n   |elif event.chromacity = \"white\":\r\n       {Occasionally(2,\".Como puede ver, emite una luz blanca.\")}\r\n   |elif event.chromacity = \"yellow-white\":\r\n       {Occasionally(2,\".Como puede ver, emite una luz blanco amarillenta.\")}\r\n   |elif event.chromacity = \"yellow-orange\":\r\n       {Occasionally(2,\".Como puede ver, emite una luz amarillo anaranjada.\")}\r\n   |elif event.chromacity = \"orange-red\":\r\n       {Occasionally(2,\".Como puede ver, emite una luz rojo anaranjada.\")}\r\n   }\r\n    {set notables to []}\r\n\r\n    {if event.massprobability < 0.01:\r\n        {set notables to cat(notables, [cat(\"una increiblemente baja masa solar de \", event.solarmass)])}\r\n    |elif event.massprobability <0.1:\r\n        {set notables to cat(notables, [cat(\"una extremadamente baja masa solar de \", event.solarmass)])}\r\n    |elif event.massprobability <1:\r\n        {set notables to cat(notables, [\"una infrecuentemente baja masa solar\"])}\r\n    |elif event.massprobability <10:\r\n        {set notables to cat(notables, [\"una masa solar por debajo de la media\"])}\r\n    |elif event.massprobability > 99.99:\r\n        {set notables to cat(notables, [cat(\"una increiblemente alta masa solar de \", event.solarmass)])}\r\n    |elif event.massprobability > 99.9:\r\n        {set notables to cat(notables, [cat(\"una extremadamente alta masa solar de \", event.solarmass)])}\r\n    |elif event.massprobability > 99:\r\n        {set notables to cat(notables, [\"una infrecuentemente alta masa solar\"])}\r\n    |elif event.massprobability > 90:\r\n        {set notables to cat(notables, [\"una masa solar por encima de la media\"])}\r\n    }\r\n\r\n    {if event.radiusprobability < 0.01:\r\n        {set notables to cat(notables, [cat(\"un increiblemente bajo radio solar de \", event.solarradius)])}\r\n    |elif event.radiusprobability <0.1:\r\n        {set notables to cat(notables, [cat(\"un extremadamente bajo radio solar de \", event.solarradius)])}\r\n    |elif event.radiusprobability <1:\r\n        {set notables to cat(notables, [\"un radio solar infrecuentemente bajo\"])}\r\n    |elif event.radiusprobability <10:\r\n        {set notables to cat(notables, [\"un radio solar por debajo de la media\"])}\r\n    |elif event.radiusprobability > 99.99:\r\n        {set notables to cat(notables, [cat(\"un extremadamente alto radio solar de \", event.solarradius)])}\r\n    |elif event.radiusprobability > 99.9:\r\n        {set notables to cat(notables, [cat(\"un increiblemente alto radio solar de \", event.solarradius)])}\r\n    |elif event.radiusprobability > 99:\r\n        {set notables to cat(notables, [\"un infrecuentemente alto radio solar\"])}\r\n    |elif event.radiusprobability > 90:\r\n        {set notables to cat(notables, [\"un radio solar por encima de la media\"])}\r\n    }\r\n\r\n    {if event.tempprobability < 0.01:\r\n        {set notables to cat(notables, [cat(\"una increiblemente baja temperatura superficial de \", event.temperature, \" grados kelvin\")])}\r\n    |elif event.tempprobability <0.1:\r\n        {set notables to cat(notables, [cat(\"una extremadamente baja temperatura superficial de \", event.temperature, \" grados kelvin\")])}\r\n    |elif event.tempprobability <1:\r\n        {set notables to cat(notables, [\"una temperatura superficial infrecuentemente baja\"])}\r\n    |elif event.tempprobability <10:\r\n        {set notables to cat(notables, [\"una temperatura superficial por debajo de la media\"])}\r\n    |elif event.tempprobability > 99.99:\r\n        {set notables to cat(notables, [cat(\"una extremadamente alta temperatura superficial de \", event.temperature, \" grados kelvin\")])}\r\n    |elif event.tempprobability > 99.9:\r\n        {set notables to cat(notables, [cat(\"una increiblemente alta temperatura superficial de \", event.temperature, \" grados kelvin\")])}\r\n    |elif event.tempprobability > 99:\r\n        {set notables to cat(notables, [\"una temperatura superficial infrecuentemente alta\"])}\r\n    |elif event.tempprobability > 90:\r\n        {set notables to cat(notables, [\"una temperatura superficial por encima de la media\"])}\r\n    }\r\n\r\n    {if len(notables) = 0:\r\n        {OneOf(\"\", \"Este es un ejemplo típico de este tipo de estrellas.\", \"No hay nada especialmente destacable en esta estrella.\", \"Es una muestra normal de este tipo de estrellas.\")}\r\n    |else:\r\n        {OneOf('comparada con otras estrellas de esta clase', 'En comparación con otras estrellas de clase {event.stellarclass}', 'En relación con otras estrellas de clase {event.stellarclass}')}, esta estrella  \r\n        {if len(notables) = 1:\r\n            destaca por tener {notables[0]}.\r\n        |elif len(notables) = 2:\r\n            {OneOf('es interesante', 'es poco frecuente')}, con {notables[0]} y {notables[1]}.\r\n        |elif len(notables) = 3:\r\n            {OneOf('excepcional', 'muy destacable')}, con {notables[0]}, {notables[1]} y {notables[2]}.\r\n        }\r\n    }\r\n}\r\n",
      "default": false,
      "name": "Star scanned",
      "description": "Se activa cuando completa un escaneo de un cuerpo estelar"
    },
    "Station no fire zone entered": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Station no fire zone entered",
      "description": "Se activa cuando su nave entra en la zona de seguridad de una estación espacial"
    },
    "Station no fire zone exited": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Station no fire zone exited",
      "description": "Se activa cuando su nave abandona la zona de seguridad de una estación espacial"
    },
    "Station report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{P(station.name)}, está controlada por la facción {P(station.faction)} , \r\n{if station.state = \"Boom\":\r\nLa estación está en áuge; {OneOf('por lo que podría obtener aquí buenos beneficios comerciales','por lo que puede haber buenas oportunidades comerciales aquí','puede haber interesantes oportunidades de negocio aquí')}.\r\n|elif station.state = \"Civil War\":\r\nEsta estación está en guerra civil; debe tener cuidado. Puede aceptar misiones de una facción que vayan en contra de los intereses de otra.\r\n|elif station.state = \"Famine\":\r\nEsta estación está sufriendo una hambruna; se recomienda precaución.\r\n|elif station.state = \"Lockdown\":\r\nEsta estación está en quiebra; se recomienda precaución.\r\n|elif station.state = \"Outbreak\":\r\nEsta estación está intentando contener una epidemia; se recomienda precaución.\r\n|elif station.state = \"War\":\r\nEsta estación está en guerra; se recomienda precaución.\r\n|elif station.state = \"Expansion\":\r\nEsta estación se está preparando para expandirse a otro sistema.\r\n|elif reportstation.state = \"Bust\":\r\nEsta estación está en quiebra financiera.\r\n|elif reportstation.state = \"Election\":\r\nEsta estación está eligiendo nuevos líderes.\r\n|elif reportstation.state = \"Investment\":\r\nEsta estación está realizando inversiones en sus infraestructuras.\r\n}.\r\n\r\nSu sistema de gobierno es \r\n{if station.government=\"Anarchy\":\r\nanárquico \r\n|elif station.government=\"Colony\":\r\ncolonial \r\n|elif station.government=\"Communism\":\r\ncomunista \r\n|elif station.government=\"Confederacy\":\r\nde confederación \r\n|elif station.government=\"Cooperative\":\r\nuna cooperativa \r\n|elif station.government=\"Corporate\":\r\ncorporativo \r\n|elif station.government=\"Democracy\":\r\ndemocrático \r\n|elif station.government=\"Dictatorship\":\r\nuna dictadura \r\n|elif station.government=\"Feudal\":\r\nfeudal \r\n|elif station.government=\"Imperial\":\r\nimperial \r\n|elif station.government=\"Patronage\":\r\nun patronazgo \r\n|elif station.government=\"Prison Colony\":\r\nel de una colonia penitenciaria \r\n|elif station.government=\"Theocracy\":\r\nteocrático \r\n|elif station.government=\"Workshop\":\r\nel de un sistema taller \r\n|elif station.government=\"Engineer\":\r\nel de un sistema de ingeniero \r\n|else:\r\nindeterminado \r\n} .\r\n\r\nEs \r\n{if station.model = \"Coriolis Starport\":\r\nuna estación del tipo coriólis\r\n|elif station.model = \"Ocellus Starport\":\r\nuna estación de tipo océlus\r\n|elif station.model = \"Orbis Starport\":\r\nuna estación del tipo órbis\r\n|elif station.model = \"Civilian Outpost\":\r\nun puesto civil avanzado\r\n|elif station.model = \"Commercial Outpost\":\r\nun puesto comercial avanzado\r\n|elif station.model = \"Industrial Outpost\":\r\nun puesto industrial avanzado\r\n|elif station.model = \"Military Outpost\":\r\nun puesto militar avanzado\r\n|elif station.model = \"Mining Outpost\":\r\nun puesto minero avanzado\r\n|elif station.model = \"Scientific Outpost\":\r\nun puesto científico avanzado\r\n|elif station.model = \"Planetary Port\":\r\nun puerto planetario\r\n|elif station.model = \"Planetary Outpost\":\r\nun puesto planetario avanzado\r\n|elif station.model = \"Planetary Settlement\":\r\nun asentamiento planetario\r\n|elif station.model = \"Planetary Engineer Base\":\r\nun puesto planetario de ingeniería avanzada\r\n|elif station.model = \"Orbital Engineer Base\":\r\nuna estación orbital de ingeniería avanzada\r\n|elif station.model = \"Asteroid Base\":\r\nuna base asteroidal\r\n|elif station.model = \"Capital Ship Dock\":\r\nun puerto de aterrizaje para naves capitales\r\n|elif station.model = \"Installation\":\r\nuna instalación\r\n|else:\r\nuna estación de tipo indeterminado\r\n},\r\n\r\nque se encuentra a {(station.distancefromstar)} segundos luz de la estrella y\r\n{if station.allegiance = \"Federation\":\r\nes aliada de la Federación\r\n|elif station.allegiance = \"Empire\":\r\nes aliada del imperio\r\n|elif station.allegiance = \"Alliance\":\r\nestá bajo jurisdicción de la alianza\r\n|elif station.allegiance = \"Independent\":\r\nes independiente\r\n|else:\r\nno está colonizada\r\n}.\r\n\r\n\r\nSu tipo de economía se basa en\r\n{if station.primaryeconomy = \"Extraction\":\r\nla extracción de minerales\r\n|elif station.primaryeconomy = \"Refinery\":\r\nla refinería\r\n|elif station.primaryeconomy = \"Industrial\":\r\nla industria\r\n|elif station.primaryeconomy = \"Agriculture\":\r\nla agricultura\r\n|elif station.primaryeconomy = \"Terraforming\":\r\nla terraformación\r\n|elif station.primaryeconomy = \"High Tech\":\r\nla alta tecnología\r\n|elif station.primaryeconomy = \"Colony\":\r\nla economía colonial\r\n|elif station.primaryeconomy = \"Service\":\r\nlos servicios\r\n|elif station.primaryeconomy = \"Tourism\":\r\nel turismo\r\n|elif station.primaryeconomy = \"Military\":\r\nel equipo de grado militar\r\n|elif station.primaryeconomy = \"Rescue\":\r\nel rescate\r\n|elif station.primaryeconomy = \"Damaged\":\r\nbienes concretos al encontrarse dañada\r\n|elif station.primaryeconomy = \"Repair\":\r\nreparaciones\r\n|else:\r\ndatos que no consigo analizar\r\n}.",
      "default": false,
      "name": "Station report",
      "description": "Function to report on the details of the current station"
    },
    "Swapout check": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Function to find a given module in outfitting}\r\n{set outfitting(module) to:\r\n    {for outfittingmodule in station.outfitting:\r\n        {if outfittingmodule.EDDBID = module.EDDBID:\r\n            {return outfittingmodule}\r\n        }\r\n    }\r\n}\r\n\r\n{_ Function to report if a module is cheaper in outfitting that on the ship}\r\n{set reportIfCheaper(shipmodule) to:\r\n    {_ Only consider if this has no modifications}\r\n    {if !shipmodule.modified:\r\n        {set outfittingmodule to outfitting(shipmodule)}\r\n        {if outfittingmodule:\r\n            {if outfittingmodule.price < shipmodule.price:\r\n                {set saving to shipmodule.price - outfittingmodule.price}\r\n                {_ Only bother if it's a relatively good saving}\r\n                {if saving / cmdr.credits > 0.001:\r\n                    Puede ahorrar {saving} créditos cambiando su {shipmodule.name} aquí.\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n{reportIfCheaper(ship.powerplant)}\r\n{reportIfCheaper(ship.thrusters)}\r\n{reportIfCheaper(ship.frameshiftdrive)}\r\n{reportIfCheaper(ship.lifesupport)}\r\n{reportIfCheaper(ship.powerdistributor)}\r\n{reportIfCheaper(ship.sensors)}\r\n{for hardpoint in ship.hardpoints:\r\n    {if hardpoint.module:\r\n        {reportIfCheaper(hardpoint.module)}\r\n    }\r\n}\r\n{for compartment in ship.compartments:\r\n    {if compartment.module:\r\n        {reportIfCheaper(compartment.module)}\r\n    }\r\n}\r\n",
      "default": true,
      "name": "Swapout check",
      "description": "Check to see if any fitted modules are available more cheaply here"
    },
    "Synthesised": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Síntesis completada.",
      "default": true,
      "name": "Synthesised",
      "description": "Se activa cuando se realiza alguna síntesis utilizando materiales"
    },
    "System distance report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch from context }\r\n{set reportsystem to SystemDetails(state.eddi_context_system_system)}\r\n\r\n{if !reportsystem.name || reportbody.name = \"\":\r\n    No estoy segura de a qué sistema se refiere comandante.\r\n|else:\r\n    La distancia hasta {reportsystem.name} es de {Distance(reportsystem.x, reportsystem.y, reportsystem.z, system.x, system.y, system.z)} años luz.\r\n}\r\n\r\n\r\n\r\n",
      "default": false,
      "name": "System distance report",
      "description": "Function to report on the distance to the contextual system"
    },
    "System faction changed": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "System faction changed",
      "description": "Se activa cuando hay algún cambio en la facción que controla un sistema vigilado"
    },
    "System report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "\r\n{SetState(\"altair_potencia\", system.power)}\r\n\r\n{OneOf(\"Este es\", \"Este sistema es\", \"el sistema {system.name} es\")}\r\n{if system.government=\"Anarchy\":\r\n    un sistema anárquico \r\n|elif system.government=\"Colony\":\r\n    una colonia \r\n|elif system.government=\"Communism\":\r\n    un sistema comunista \r\n|elif system.government=\"Confederacy\":\r\n    una confederación \r\n|elif system.government=\"Cooperative\":\r\n    una cooperativa \r\n|elif system.government=\"Corporate\":\r\n    un sistema corporativo \r\n|elif system.government=\"Democracy\":\r\n    una democracia \r\n|elif system.government=\"Dictatorship\":\r\n    una dictadura \r\n|elif system.government=\"Feudal\":\r\n    un sistema feudal    \r\n|elif system.government=\"Imperial\":\r\n    un sistema imperial \r\n|elif system.government=\"Patronage\":\r\n    un patronazgo \r\n|elif system.government=\"Prison Colony\":\r\n    una colonia penitenciaria \r\n|elif system.government=\"Theocracy\":\r\n    un sistema teocrático \r\n|elif system.government=\"Workshop\":\r\n    un sistema taller \r\n|elif system.government=\"Engineer\":\r\n    un sistema de ingeniero   \r\n|else:\r\n  un sistema \r\n}\r\n\r\n{if system.allegiance = \"Federation\":\r\n    de la Federación\r\n|elif system.allegiance = \"Empire\":\r\n    del imperio\r\n|elif system.allegiance = \"Alliance\":\r\n    de la alianza\r\n|elif system.allegiance = \"Independent\":\r\n    independiente\r\n|else:\r\n    no colonizado\r\n},\r\n{if (!system.population || system.population=0):\r\n    {OneOf(\"Completamente deshabitado\",\"Totalmente despoblado\",\"que carece de población humana\" )}\r\n|else:\r\n    {OneOf(\"con una población de\", \"hogar de\", \"que mantiene a\")} {system.population} {OneOf(\"personas\",   \"individuos\")}\r\n}\r\n{if system.power:\r\n    , {OneOf(\"alineado con\", \"aliado con\", \"controlado por\")} {F(\"Altair nombres potencias\")}\r\n}.\r\n\r\n{if system.faction:\r\n  {OneOf(\"la potencia\", \"la facción\")} {system.faction} es la que {OneOf(\"tiene el control\", \"posee el control\")}.\r\n}\r\n\r\n{if len(system.stations) = 0:\r\n  No hay estaciones \r\n|else:\r\n    {if len(system.orbitalstations) = 0:\r\n        {if len(system.planetarystations) = 1:\r\n            Hay {OneOf(\"una única\", \"una solitaria\", \"solo una\", \"una\")} estación planetaria\r\n        |else:\r\n            Hay {len(system.planetarystations)} estaciones planetarias\r\n        }\r\n    |elif len(system.orbitalstations) = 1:\r\n        Hay {OneOf(\"una única\", \"una solitaria\", \"solo una\", \"una\")} estación orbital \r\n        {if len(system.planetarystations) = 1:\r\n            y {OneOf(\"una solitaria\", \"una única\", \"una\",\"solo una\")} estación planetaria\r\n        |elif len(system.planetarystations) > 1:\r\n            y {len(system.planetarystations)} estaciones planetarias \r\n        }\r\n    |else:\r\n        Hay {len(system.orbitalstations)} estaciones orbitales \r\n        {if len(system.planetarystations) = 1:\r\n            y {OneOf(\"una solitaria\", \"una única\", \"una\", \"solo una\")} estación planetaria\r\n        |elif len(system.planetarystations) > 1:\r\n            y {len(system.planetarystations)} estaciones planetarias \r\n        }\r\n    }\r\n}\r\n{OneOf(\"aquí\", \"en este sistema\")}.\r\n\r\n{if system.state = \"Boom\":\r\n    El sistema está en auge; {OneOf('por lo que podría obtener aquí buenos beneficios comerciales','por lo que puede haber buenas oportunidades comerciales aquí','puede haber interesantes oportunidades de negocio aquí')}.\r\n|elif system.state = \"Civil War\":\r\n    Este sistema está en guerra civil; debe tener cuidado.\r\n|elif system.state = \"Famine\":\r\n    Este sistema está sufriendo una hambruna; se recomienda precaución.\r\n|elif system.state = \"Lockdown\":\r\n    Este sistema está en quiebra; se recomienda precaución.\r\n|elif system.state = \"Outbreak\":\r\n    Este sistema está intentando contener una epidemia; se recomienda precaución.\r\n|elif system.state = \"War\":\r\n    Este sistema está en guerra; se recomienda precaución.\r\n|elif system.state = \"Expansion\":\r\n    Este sistema se está preparando para expandirse a otro sistema.\r\n|elif reportsystem.state = \"Bust\":\r\n    Este sistema está en quiebra financiera.\r\n|elif reportsystem.state = \"Election\":\r\n    Este sistema está eligiendo nuevos líderes.\r\n|elif reportsystem.state = \"Investment\":\r\n    Este sistema está realizando inversiones en sus infraestructuras.\r\n}\r\n\r\n",
      "default": false,
      "name": "System report",
      "description": "Function to report on the details of the current star system"
    },
    "System state changed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": false,
      "name": "System state changed",
      "description": "Se activa cuando hay un cambio en el estado de un sistema vigilado"
    },
    "System state report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch from context }\r\n{set reportsystem to SystemDetails(state.eddi_context_system_system)}\r\n\r\n{if !reportsystem.name || reportbody.name = \"\":\r\n    I'm not sure which system you are asking about.\r\n|else:\r\n    {P(reportsystem.name)}\r\n    {if reportsystem.state = \"None\":\r\n      is not in any particular state at current\r\n    |elif reportsystem.state = \"Retreat\":\r\n        is in retreat\r\n    |elif reportsystem.state = \"War\":\r\n        is at war; caution is advised\r\n    |elif reportsystem.state = \"Boom\":\r\n        is undergoing a boom; there might be good trading profits to be made here\r\n    |elif reportsystem.state = \"Civil War\":\r\n        is experiencing civil unrest; caution is advised\r\n    |elif reportsystem.state = \"Civil War\":\r\n        is in civil war; caution is advised\r\n    |elif reportsystem.state = \"Famine\":\r\n        is in a state of famine; caution is advised\r\n    |elif reportsystem.state = \"Lockdown\":\r\n        is in lockdown; caution is advised\r\n    |elif reportsystem.state = \"Outbreak\":\r\n        is attempting to contain an outbreak of disease; caution is advised\r\n    |elif reportsystem.state = \"Expansion\":\r\n        is gearing up to expand to another system\r\n    |elif reportsystem.state = \"Bust\":\r\n        is financially bust\r\n    |elif reportsystem.state = \"Election\":\r\n        is electing new leaders\r\n    |elif reportsystem.state = \"Investment\":\r\n        is investing in its infrastructure\r\n    |else:\r\n    }\r\n    .\r\n}",
      "default": false,
      "name": "System state report",
      "description": "Report on the current state of the contextual system"
    },
    "Technology broker": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Technology broker",
      "description": "Se activa cuando se utiliza el Broker de Tecnología para desbloquear nuevos elementos"
    },
    "Touchdown": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{set body to BodyDetails(state.eddi_context_body_name, state.eddi_context_system_name)}\r\n\r\n{if event.playercontrolled = true:\r\n  Hemos aterrizado {if body.name: en{body.name} }.\r\n|else:\r\n  {ShipName()} ha aterrizado\r\n  {if body.name: en {body.name} }.\r\n}\r\n\r\n\r\n{Pause(2000)}\r\n\r\n{if type(event.latitude) != \"void\" && type(event.longitude) != \"void\" :\r\n   Las coordenadas son  {round(event.latitude, 2)} grados de latitud, {round(event.longitude, 2)} grados de longitud.\r\n}",
      "default": false,
      "name": "Touchdown",
      "description": "Se activa cuando su nave aterriza en la superficie de un planeta"
    },
    "Trade data purchased": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'tradedata')}\r\n{SetState('eddi_context_last_action', 'buy')}\r\n{SetState('eddi_context_tradedata_name', event.system)}\r\n\r\n{OneOf(\"Adquiridos datos de comercio de {event.system}\",\r\n            \"Datos comerciales de {event.system} disponibles\",\"Datos comerciales de {event.system} recibidos correctamente\"\r\n            \"Recibidos datos comerciales de {event.system} desde los servicios de la estación\",\r\n            \"Recepción de datos comerciales de {event.system} confirmada\")}.",
      "default": false,
      "name": "Trade data purchased",
      "description": "Se activa cuando compra datos de comercio"
    },
    "Trade promotion": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Se ha reconocido su habilidad como comerciante comandante.",
      "default": false,
      "name": "Trade promotion",
      "description": "Se activa cuando aumenta su rango de comercio"
    },
    "Trade voucher redeemed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'trade_voucher')}\r\n{SetState('eddi_context_last_action', 'redeem')}\r\n{SetState('eddi_context_trade_voucher_amount', event.amount)}\r\n\r\nDevengados {event.amount} créditos en vales de comercio\r\n{Occasionally(2, \"\r\n  {if len(event.rewards) = 1:\r\n    por parte de la facción {event.rewards[0].faction}\r\n  |else:\r\n    por parte de \r\n    {set cur to 0}\r\n    {while cur < len(event.rewards):\r\n        {if cur = 0:\r\n        |elif cur < len(event.rewards) - 1:\r\n            , \r\n        |else:\r\n            y\r\n        }\r\n        {event.rewards[cur].faction}\r\n        {set cur to cur + 1}\r\n    }\r\n  }\r\n\")}.\r\n",
      "default": true,
      "name": "Trade voucher redeemed",
      "description": "Se activa cuando canjea un bono comercial"
    },
    "Under attack": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Under attack",
      "description": "Se activa cuando está siendo atacado (al mismo tiempo que el mensaje de voz de Bajo Ataque)"
    },
    "Undocked": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": "{OneOf(\"Reestablecido control total de la nave\", \"Amarres liberados\", \"Desconectando de la red local\")}.\r\n\r\n{Pause(5000)}\r\n\r\n{F(\"Limpet check\")}\r\n",
      "default": false,
      "name": "Undocked",
      "description": "Se activa cuando su nave despega de una estación espacial o puesto avanzado"
    },
    "VA initialized": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "VA initialized",
      "description": "Se activa cuando se inicializa el plugin de Voice Attack"
    },
    "Vehicle destroyed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Pause(2000)}\n{OneOf(\"Enlace neuronal\", \"Enlace\", \"Nexo\", \"Vínculo\")} {OneOf(\"finalizado\", \"desactivado\")}.",
      "default": true,
      "name": "Vehicle destroyed",
      "description": "Se activa cuando su vehículo ha resultado destruido"
    }
  }
}