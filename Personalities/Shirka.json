{
  "name": "Shirka-Axel",
  "description": "Shirka mas personal",
  "scripts": {
    "AFMU repairs": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{event.item} \r\n{if event.repairedfully:\r\n    totalmente reparado\r\n|else:\r\n    partially repaired \r\n    {Occasionally(2, cat(\r\n        OneOf(\"to\", \"at\"), \" \",\r\n        Humanise(event.health*100), \" \",\r\n        \"percent functionality\"\r\n    ))}\r\n}\r\n\r\n{Occasionally(2, \r\n    cat(OneOf(\", \", \"y su\"), \" \", \"preparado para su reactivación\")\r\n)}.",
      "default": false,
      "name": "AFMU repairs",
      "description": "Triggered when repairing modules using the Auto Field Maintenance Unit (AFMU)"
    },
    "Altair commodities": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{if lcase (state.altair_commodity) = \"explosives\":\r\n   explosivos\r\n|elif lcase (state.altair_commodity) = \"hydrogen fuel\":\r\n   combustible de hidrógeno\r\n|elif lcase (state.altair_commodity) = \"mineral oil\":\r\n   aceite mineral\r\n|elif lcase (state.altair_commodity) = \"pesticides\":\r\n   pesticidas\r\n|elif lcase (state.altair_commodity) = \"clothing\":\r\n   ropa\r\n|elif lcase (state.altair_commodity) = \"consumer technology\":\r\n   tecnología de consumo\r\n|elif lcase (state.altair_commodity) = \"domestic appliances\":\r\n   electrodomésticos\r\n|elif lcase (state.altair_commodity) = \"beer\":\r\n   cerveza\r\n|elif lcase (state.altair_commodity) = \"liquor\":\r\n   licor\r\n|elif lcase (state.altair_commodity) = \"narcotics\":\r\n   narcóticos\r\n|elif lcase (state.altair_commodity) = \"tobacco\":\r\n   tabaco\r\n|elif lcase (state.altair_commodity) = \"wine\":\r\n   vino\r\n|elif lcase (state.altair_commodity) = \"algae\":\r\n   algas\r\n|elif lcase (state.altair_commodity) = \"animal meat\":\r\n   carne animal\r\n|elif lcase (state.altair_commodity) = \"coffee\":\r\n   café\r\n|elif lcase (state.altair_commodity) = \"fish\":\r\n   pescado\r\n|elif lcase (state.altair_commodity) = \"food cartridges\":\r\n   cartuchos de alimentos\r\n|elif lcase (state.altair_commodity) = \"fruit and vegetables\":\r\n   frutas y verduras\r\n|elif lcase (state.altair_commodity) = \"grain\":\r\n   grano\r\n|elif lcase (state.altair_commodity) = \"synthetic meat\":\r\n   carne sintética\r\n|elif lcase (state.altair_commodity) = \"tea\":\r\n   té\r\n|elif lcase (state.altair_commodity) = \"polymers\":\r\n   polímeros\r\n|elif lcase (state.altair_commodity) = \"semiconductors\":\r\n   semiconductores\r\n|elif lcase (state.altair_commodity) = \"superconductors\":\r\n   superconductores\r\n|elif lcase (state.altair_commodity) = \"atmospheric processors\":\r\n   procesadores atmosféricos\r\n|elif lcase (state.altair_commodity) = \"crop harvesters\":\r\n   cosechadoras de cultivos\r\n|elif lcase (state.altair_commodity) = \"marine equipment\":\r\n   equipamiento marino\r\n|elif lcase (state.altair_commodity) = \"microbial furnaces\":\r\n   hornos microbianos\r\n|elif lcase (state.altair_commodity) = \"mineral extractors\":\r\n   extractores minerales\r\n|elif lcase (state.altair_commodity) = \"power generators\":\r\n   generadores de energía\r\n|elif lcase (state.altair_commodity) = \"water purifiers\":\r\n   purificadores de agua\r\n|elif lcase (state.altair_commodity) = \"agri-medicines\":\r\n   medicinas agrícolas\r\n|elif lcase (state.altair_commodity) = \"basic medicines\":\r\n   medicinas básicas\r\n|elif lcase (state.altair_commodity) = \"combat stabilisers\":\r\n   estabilizadores de combate\r\n|elif lcase (state.altair_commodity) = \"performance enhancers\":\r\n   potenciadores de rendimiento\r\n|elif lcase (state.altair_commodity) = \"progenitor cells\":\r\n   células madre\r\n|elif lcase (state.altair_commodity) = \"aluminium\":\r\n   aluminio\r\n|elif lcase (state.altair_commodity) = \"beryllium\":\r\n   berílio\r\n|elif lcase (state.altair_commodity) = \"cobalt\":\r\n   cobalto\r\n|elif lcase (state.altair_commodity) = \"copper\":\r\n   cobre\r\n|elif lcase (state.altair_commodity) = \"gallium\":\r\n   galio\r\n|elif lcase (state.altair_commodity) = \"gold\":\r\n   oro\r\n|elif lcase (state.altair_commodity) = \"indium\":\r\n   indio\r\n|elif lcase (state.altair_commodity) = \"lithium\":\r\n   litio\r\n|elif lcase (state.altair_commodity) = \"palladium\":\r\n   paladio\r\n|elif lcase (state.altair_commodity) = \"platinum\":\r\n   platino\r\n|elif lcase (state.altair_commodity) = \"silver\":\r\n   plata\r\n|elif lcase (state.altair_commodity) = \"tantalum\":\r\n   tantalio\r\n|elif lcase (state.altair_commodity) = \"uranium\":\r\n   uranio\r\n|elif lcase (state.altair_commodity) = \"bauxite\":\r\n   bauxita\r\n|elif lcase (state.altair_commodity) = \"bertrandite\":\r\n   betrandita\r\n|elif lcase (state.altair_commodity) = \"coltan\":\r\n  coltan\r\n|elif lcase (state.altair_commodity) = \"gallite\":\r\n   galita\r\n|elif lcase (state.altair_commodity) = \"indite\":\r\n   indita\r\n|elif lcase (state.altair_commodity) = \"lepidolite\":\r\n   lepidolita\r\n|elif lcase (state.altair_commodity) = \"rutile\":\r\n   rutilo\r\n|elif lcase (state.altair_commodity) = \"uraninite\":\r\n   uraninita\r\n|elif lcase (state.altair_commodity) = \"imperial slaves\":\r\n   esclavos imperiales\r\n|elif lcase (state.altair_commodity) = \"slaves\":\r\n   esclavos\r\n|elif lcase (state.altair_commodity) = \"advanced catalysers\":\r\n   catalizadores avanzados\r\n|elif lcase (state.altair_commodity) = \"animal monitors\":\r\n   monitores de animales\r\n|elif lcase (state.altair_commodity) = \"aquaponic systems\":\r\n   sistemas de hidroponia\r\n|elif lcase (state.altair_commodity) = \"auto-fabricators\":\r\n   autofabricantes\r\n|elif lcase (state.altair_commodity) = \"biorreducing lichen\":\r\n   líquenes biorreductores\r\n|elif lcase (state.altair_commodity) = \"computer components\":\r\n   componentes informáticos\r\n|elif lcase (state.altair_commodity) = \"h.e. suits\":\r\n   trajes de protección\r\n|elif lcase (state.altair_commodity) = \"land enrichment systems\":\r\n   sistemas de enriquecimiento de terrenos\r\n|elif lcase (state.altair_commodity) = \"resonating separators\":\r\n   separadores resonantes\r\n|elif lcase (state.altair_commodity) = \"robotics\":\r\n   robótica\r\n|elif lcase (state.altair_commodity) = \"leather\":\r\n   cuero\r\n|elif lcase (state.altair_commodity) = \"natural fabrics\":\r\n   tejidos naturales\r\n|elif lcase (state.altair_commodity) = \"synthetic fabrics\":\r\n   tejidos sintéticos\r\n|elif lcase (state.altair_commodity) = \"biowaste\":\r\n   resíduos biológicos\r\n|elif lcase (state.altair_commodity) = \"chemical waste\":\r\n   resíduos químicos\r\n|elif lcase (state.altair_commodity) = \"scrap\":\r\n   chatarra\r\n|elif lcase (state.altair_commodity) = \"non-lethal weapons\":\r\n   armas no letales\r\n|elif lcase (state.altair_commodity) = \"personal weapons\":\r\n   armas personales\r\n|elif lcase (state.altair_commodity) = \"reactive armour\":\r\n   blindaje reactivo\r\n|elif lcase (state.altair_commodity) = \"battle weapons\":\r\n   armas de guerra\r\n|elif lcase (state.altair_commodity) = \"toxic waste\":\r\n   resíduos tóxicos\r\n|elif lcase (state.altair_commodity) = \"painite\":\r\n   painita\r\n|elif lcase (state.altair_commodity) = \"limpet\":\r\n   dron\r\n|elif lcase (state.altair_commodity) = \"eranin pearl whiskey\":\r\n   whisky perlado de éranim\r\n|elif lcase (state.altair_commodity) = \"kamorin historic weapons\":\r\n   armas históricas de kamorin\r\n|elif lcase (state.altair_commodity) = \"lucan onion head\":\r\n   cebollazo de lucan\r\n|elif lcase (state.altair_commodity) = \"motrona experience jelly\":\r\n   gelatina de experiencia de dea motrona\r\n|elif lcase (state.altair_commodity) = \"onion head\":\r\n   cebollazo\r\n|elif lcase (state.altair_commodity) = \"rusani old smokey\":\r\n   old smoky de rusani\r\n|elif lcase (state.altair_commodity) = \"tarach spice\":\r\n   especia de tarach tor\r\n|elif lcase (state.altair_commodity) = \"terra mater blood bores\":\r\n   potenciadores sanguíneos de terra mater\r\n|elif lcase (state.altair_commodity) = \"wolf fesh\":\r\n   jadeo de lobo\r\n|elif lcase (state.altair_commodity) = \"wuthielo ku froth\":\r\n   espuma de wutielo ku\r\n|elif lcase (state.altair_commodity) = \"ai relics\":\r\n   reliquias de ia\r\n|elif lcase (state.altair_commodity) = \"antiquities\":\r\n   antigüedades\r\n|elif lcase (state.altair_commodity) = \"osmium\":\r\n   osmio\r\n|elif lcase (state.altair_commodity) = \"sap 8 core container\":\r\n   núcleos sap 8\r\n|elif lcase (state.altair_commodity) = \"trinkets of hidden fortune\":\r\n   baratijas de fortuna oculta\r\n|elif lcase (state.altair_commodity) = \"trade data\":\r\n   datos de comercio\r\n|elif lcase (state.altair_commodity) = \"thermal cooling units\":\r\n   unidades de enfriamiento térmico\r\n|elif lcase (state.altair_commodity) = \"skimmer components\":\r\n   componentes de deslizador\r\n|elif lcase (state.altair_commodity) = \"geological equipment\":\r\n   equipamiento geológico\r\n|elif lcase (state.altair_commodity) = \"structural regulators\":\r\n   reguladores estructurales\r\n|elif lcase (state.altair_commodity) = \"pyrophyllite\":\r\n   pirofilita\r\n|elif lcase (state.altair_commodity) = \"moissanite\":\r\n   moissanita\r\n|elif lcase (state.altair_commodity) = \"goslarite\":\r\n   goslarita\r\n|elif lcase (state.altair_commodity) = \"cryolite\":\r\n   criolita\r\n|elif lcase (state.altair_commodity) = \"thorium\":\r\n   torio\r\n|elif lcase (state.altair_commodity) = \"thallium\":\r\n   talio\r\n|elif lcase (state.altair_commodity) = \"lanthanum\":\r\n   lantano\r\n|elif lcase (state.altair_commodity) = \"bismuth\":\r\n   bismuto\r\n|elif lcase (state.altair_commodity) = \"bootleg liquor\":\r\n   licor de caña\r\n|elif lcase (state.altair_commodity) = \"meta-alloys\":\r\n   meta aleaciones\r\n|elif lcase (state.altair_commodity) = \"ceramic composites\":\r\n   compuestos cerámicos\r\n|elif lcase (state.altair_commodity) = \"evacuation shelter\":\r\n   refugio de evacuación\r\n|elif lcase (state.altair_commodity) = \"synthetic reagents\":\r\n   reagentes sintéticos\r\n|elif lcase (state.altair_commodity) = \"surface stabilisers\":\r\n   estabilizadores de superficie\r\n|elif lcase (state.altair_commodity) = \"building fabricators\":\r\n   constructores\r\n|elif lcase (state.altair_commodity) = \"landmines\":\r\n   minas terrestres\r\n|elif lcase (state.altair_commodity) = \"nerve agents\":\r\n   agentes nerviosos\r\n|elif lcase (state.altair_commodity) = \"occupied cryopod\":\r\n   cápsulas de escape ocupadas\r\n|elif lcase (state.altair_commodity) = \"muon imager\":\r\n   escáner muónico\r\n|elif lcase (state.altair_commodity) = \"lavian brandy\":\r\n   brandy laviano\r\n|elif lcase (state.altair_commodity) = \"black box\":\r\n   cajas negras\r\n|elif lcase (state.altair_commodity) = \"military plans\":\r\n   planos militares\r\n|elif lcase (state.altair_commodity) = \"ancient artefact\":\r\n   artefactos antiguos\r\n|elif lcase (state.altair_commodity) = \"rare artwork\":\r\n   arte poco común\r\n|elif lcase (state.altair_commodity) = \"experimental chemicals\":\r\n   químicos experimentales\r\n|elif lcase (state.altair_commodity) = \"prototype tech\":\r\n   prototipos tecnológicos\r\n|elif lcase (state.altair_commodity) = \"rebel transmissions\":\r\n   transmisiones rebeldes\r\n|elif lcase (state.altair_commodity) = \"technical blueprints\":\r\n   planos técnicos\r\n|elif lcase (state.altair_commodity) = \"hip 10175 bush meat\":\r\n   carne herbácea de hip 10175\r\n|elif lcase (state.altair_commodity) = \"albino quechua mammoth\":\r\n   carne de mamut albino quéchua\r\n|elif lcase (state.altair_commodity) = \"utgaroar millennial eggs\":\r\n   huevos milenarios de utgaroar\r\n|elif lcase (state.altair_commodity) = \"witchhaul kobe beef\":\r\n   carne de buey kobe de witchhaul\r\n|elif lcase (state.altair_commodity) = \"karsuki locusts\":\r\n   langostas de karsuki ti\r\n|elif lcase (state.altair_commodity) = \"giant irukama snails\":\r\n   caracoles gigantes de ikurama\r\n|elif lcase (state.altair_commodity) = \"baltah sime vacuum krill\":\r\n   krill del vacío de balta sine\r\n|elif lcase (state.altair_commodity) = \"ceti rabbits\":\r\n   conejos de ceti\r\n|elif lcase (state.altair_commodity) = \"kachirigin filter leeches\":\r\n   sanguijuelas filtradoras de kachigirin\r\n|elif lcase (state.altair_commodity) = \"lyrae weed\":\r\n   mala hierba de lyrae\r\n|elif lcase (state.altair_commodity) = \"borasetani pathogenetics\":\r\n   patógenos de borasetani\r\n|elif lcase (state.altair_commodity) = \"hip 118311 swarm\":\r\n   suarm de hip 118311\r\n|elif lcase (state.altair_commodity) = \"kongga ale\":\r\n   cerveza de konga\r\n|elif lcase (state.altair_commodity) = \"alacarakmo skin art\":\r\n   tatuajes de alacarakmo\r\n|elif lcase (state.altair_commodity) = \"eleu thermals\":\r\n   tejidos térmicos de eleu\r\n|elif lcase (state.altair_commodity) = \"eshu umbrellas\":\r\n   paráguas de esu\r\n|elif lcase (state.altair_commodity) = \"karetii couture\":\r\n   alta costura de karetii\r\n|elif lcase (state.altair_commodity) = \"njangari saddles\":\r\n   sillas de montar de niangari\r\n|elif lcase (state.altair_commodity) = \"any na coffee\":\r\n   café de any na\r\n|elif lcase (state.altair_commodity) = \"cd-75 kitten brand coffee\":\r\n   café marca kitten de cd-75\r\n|elif lcase (state.altair_commodity) = \"cafe yaupon de goman\":\r\n   café yaupon de gomán\r\n|elif lcase (state.altair_commodity) = \"volkhab bee drones\":\r\n   abejas mecánicas de volkhab\r\n|elif lcase (state.altair_commodity) = \"kinago violins\":\r\n   violines de kinago\r\n|elif lcase (state.altair_commodity) = \"nguna modern antiques\":\r\n   antiguedades modernas de enguna\r\n|elif lcase (state.altair_commodity) = \"rajukru multi-stoves\":\r\n   multi estufas de rajucru\r\n|elif lcase (state.altair_commodity) = \"tiolce waste2paste units\":\r\n   pastaplasta de tiolce\r\n|elif lcase (state.altair_commodity) = \"chi eridani marine paste\":\r\n   pasta marina de chi eridani\r\n|elif lcase (state.altair_commodity) = \"esuseku caviar\":\r\n   caviar de esuseku\r\n|elif lcase (state.altair_commodity) = \"live hecate sea worms\":\r\n   gusanos marinos de hécate\r\n|elif lcase (state.altair_commodity) = \"helvetitj pearls\":\r\n   perlas de helvetiti\r\n|elif lcase (state.altair_commodity) = \"hip proto-squid\":\r\n   protocalamar de hip 41181\r\n|elif lcase (state.altair_commodity) = \"coquim spongiform victuals\":\r\n   víveres espongiformes de coquim\r\n|elif lcase (state.altair_commodity) = \"eden apples of aerial\":\r\n   manzanas del edén de aerial\r\n|elif lcase (state.altair_commodity) = \"neritus berries\":\r\n   bayas de neritus\r\n|elif lcase (state.altair_commodity) = \"ochoeng chillies\":\r\n   chiles de ochoeng\r\n|elif lcase (state.altair_commodity) = \"deuringas truffles\":\r\n   trúfas de deuringas\r\n|elif lcase (state.altair_commodity) = \"hr 7221 wheat\":\r\n   trigo de hr 7221\r\n|elif lcase (state.altair_commodity) = \"jaroua rice\":\r\n   arroz de jaroua\r\n|elif lcase (state.altair_commodity) = \"belalans ray leather\":\r\n   cuero de raya de belaláns\r\n|elif lcase (state.altair_commodity) = \"damna carapaces\":\r\n   caparazones de damna\r\n|elif lcase (state.altair_commodity) = \"rapa bao snake skins\":\r\n   pieles de serpiente de rapa bao\r\n|elif lcase (state.altair_commodity) = \"vanayequi ceratomorpha fur\":\r\n   piel de ceratomorfo d vanayequi\r\n|elif lcase (state.altair_commodity) = \"bast snake gin\":\r\n   elixír de serpiende de bast\r\n|elif lcase (state.altair_commodity) = \"thrutis cream\":\r\n   crema de zrutis\r\n|elif lcase (state.altair_commodity) = \"wulpa hyperbore systems\":\r\n   sistema de hipertaladros de wulpa\r\n|elif lcase (state.altair_commodity) = \"aganippe rush\":\r\n   incrementador de aganippe\r\n|elif lcase (state.altair_commodity) = \"holva duelling blades\":\r\n   espadas de duelo de holva\r\n|elif lcase (state.altair_commodity) = \"gilya signature weapons\":\r\n   armas personalizables de yilia\r\n|elif lcase (state.altair_commodity) = \"delta phoenicis palms\":\r\n   palmeras de delta phoenicis\r\n|elif lcase (state.altair_commodity) = \"toxandji virocide\":\r\n   virocida de toxandyi\r\n|elif lcase (state.altair_commodity) = \"xihe biomorphic companions\":\r\n   mascotas biomórficas de xihe\r\n|elif lcase (state.altair_commodity) = \"sanuma decorative meat\":\r\n   carne artística de sanuma\r\n|elif lcase (state.altair_commodity) = \"ethgreze tea buds\":\r\n   brotes de té de ethgreze\r\n|elif lcase (state.altair_commodity) = \"ceremonial heike tea\":\r\n   té ceremonial de heike\r\n|elif lcase (state.altair_commodity) = \"tanmark tranquil tea\":\r\n   té relajante de tanmark\r\n|elif lcase (state.altair_commodity) = \"az cancri formula 42\":\r\n   fórmula 42 de az cancri\r\n|elif lcase (state.altair_commodity) = \"kamitra cigars\":\r\n   puros de kamitra\r\n|elif lcase (state.altair_commodity) = \"yaso kondi leaf\":\r\n   hojas de yaso kondi\r\n|elif lcase (state.altair_commodity) = \"chateau de aegaeon\":\r\n   sható de aegaeon\r\n|elif lcase (state.altair_commodity) = \"waters of shintara\":\r\n   aguas de shinrarta desra\r\n|elif lcase (state.altair_commodity) = \"ophiuch exino artefacts\":\r\n   artefactos de los ófiuch exino\r\n|elif lcase (state.altair_commodity) = \"aepyornis egg\":\r\n   huevo de aepyornis\r\n|elif lcase (state.altair_commodity) = \"saxon wine\":\r\n   vino sajón\r\n|elif lcase (state.altair_commodity) = \"centauri mega gin\":\r\n   ginebra mega de alfa centauri\r\n|elif lcase (state.altair_commodity) = \"anduliga fire works\":\r\n   fuegos artificiales de anduliga\r\n|elif lcase (state.altair_commodity) = \"banki amphibious leather\":\r\n   cuero anfíbio de banki\r\n|elif lcase (state.altair_commodity) = \"cherbones blood crystals\":\r\n   cristales de sangre de cherbones\r\n|elif lcase (state.altair_commodity) = \"geawen dance dust\":\r\n    polvo de baile de yiawen\r\n|elif lcase (state.altair_commodity) = \"gerasian gueuze beer\":\r\n    cerveza gerasiana gueuze\r\n|elif lcase (state.altair_commodity) = \"haidne black brew\":\r\n    infusión negra de haidne\r\n|elif lcase (state.altair_commodity) = \"havasupai dream catcher\":\r\n    atrapasueños de havasupai\r\n|elif lcase (state.altair_commodity) = \"burnham bile distillate\":\r\n    licor bilioso de barnjam\r\n|elif lcase (state.altair_commodity) = \"hip organophosphates\":\r\n    organofosfatos de hip 80364\r\n|elif lcase (state.altair_commodity) = \"jaradharre puzzle box\":\r\n    rompecabezas de yaradjarre\r\n|elif lcase (state.altair_commodity) = \"koro kung pellets\":\r\n    gránulos de koro kung\r\n|elif lcase (state.altair_commodity) = \"void extract coffee\":\r\n    extracto de café al vacío\r\n|elif lcase (state.altair_commodity) = \"honesty pills\":\r\n    píldoras de la honestidad\r\n|elif lcase (state.altair_commodity) = \"non euclidian exotanks\":\r\n    exotánques no euclídeos\r\n|elif lcase (state.altair_commodity) = \"ltt hypersweet\":\r\n    hiperdulce ltt\r\n|elif lcase (state.altair_commodity) = \"mechucos high tea\":\r\n    alto té de mechucos\r\n|elif lcase (state.altair_commodity) = \"medb starlube\":\r\n    lubricante de medb\r\n|elif lcase (state.altair_commodity) = \"mokojing beast feast\":\r\n    banquete bestial de mojoyín\r\n|elif lcase (state.altair_commodity) = \"mukusubii chitin-os\":\r\n    quitiaros de mukusubii\r\n|elif lcase (state.altair_commodity) = \"mulachi giant fungus\":\r\n    hongo gigante de mulachi\r\n|elif lcase (state.altair_commodity) = \"ngadandari fire opals\":\r\n    ópalos ígneos de engandari\r\n|elif lcase (state.altair_commodity) = \"tiegfries synth silk\":\r\n    seda sintética de tiegfries\r\n|elif lcase (state.altair_commodity) = \"uzomoku low-g wings\":\r\n    alas de baja gravedad de uzomoku\r\n|elif lcase (state.altair_commodity) = \"v herculis body rub\":\r\n    exfoliantes de v1090 herculis\r\n|elif lcase (state.altair_commodity) = \"wheemete wheat cakes\":\r\n    pasteles de trigo de Wiimete\r\n|elif lcase (state.altair_commodity) = \"vega slimweed\":\r\n    planta parásita de vega\r\n|elif lcase (state.altair_commodity) = \"altairian skin\":\r\n    piel altairiana\r\n|elif lcase (state.altair_commodity) = \"pavonis ear grubs\":\r\n    larvorejas de pavonis\r\n|elif lcase (state.altair_commodity) = \"jotun mookah\":\r\n    muka de jotún\r\n|elif lcase (state.altair_commodity) = \"giant verrix\":\r\n    verrix gigante\r\n|elif lcase (state.altair_commodity) = \"indi bourbon\":\r\n    bourbon de épsilon indi\r\n|elif lcase (state.altair_commodity) = \"arouca conventual sweets\":\r\n    dulces conventuales de arouca\r\n|elif lcase (state.altair_commodity) = \"tauri chimes\":\r\n    carillones de 39 tauri\r\n|elif lcase (state.altair_commodity) = \"zeessze ant grub glue\":\r\n    pegamento de larvas de hormiga de siisxe\r\n|elif lcase (state.altair_commodity) = \"pantaa prayer sticks\":\r\n    palos ceremoniales de los pantaa\r\n|elif lcase (state.altair_commodity) = \"fujin tea\":\r\n    té de fuyín\r\n|elif lcase (state.altair_commodity) = \"chameleon cloth\":\r\n    ropa mimética\r\n|elif lcase (state.altair_commodity) = \"orrerian vicious brew\":\r\n    fermento vicioso orreriano\r\n|elif lcase (state.altair_commodity) = \"uszaian tree grub\":\r\n    larva de árbol uszaiana\r\n|elif lcase (state.altair_commodity) = \"momus bog spaniel\":\r\n    spaniel de pantano de momus rich\r\n|elif lcase (state.altair_commodity) = \"diso ma corn\":\r\n    maíz ma de diso\r\n|elif lcase (state.altair_commodity) = \"leestian evil juice\":\r\n    zumo diabólico leestiano\r\n|elif lcase (state.altair_commodity) = \"azure milk\":\r\n    leche de azure\r\n|elif lcase (state.altair_commodity) = \"leathery eggs\":\r\n    huevos de lécery\r\n|elif lcase (state.altair_commodity) = \"alya body soap\":\r\n    jabón corporal de alya\r\n|elif lcase (state.altair_commodity) = \"vidavantian lace\":\r\n    cordón vidavantino\r\n|elif lcase (state.altair_commodity) = \"jackes quinentian still\":\r\n    alambique yaks quinentian\r\n|elif lcase (state.altair_commodity) = \"soontill relics\":\r\n    reliquia de los soontill\r\n|elif lcase (state.altair_commodity) = \"unknown artefact\":\r\n    artefacto desconocido\r\n|elif lcase (state.altair_commodity) = \"hafnium 178\":\r\n    hafnio 178\r\n|elif lcase (state.altair_commodity) = \"military intelligence\":\r\n    inteligencia militar\r\n|elif lcase (state.altair_commodity) = \"the hutton mug\":\r\n    taza de játon\r\n|elif lcase (state.altair_commodity) = \"sothis crystalline gold\":\r\n    oro cristalino de sothis\r\n|elif lcase (state.altair_commodity) = \"salvageable wreckage\":\r\n    restos de accidentes\r\n|elif lcase (state.altair_commodity) = \"encrypted data storage\":\r\n    almacén de datos encriptado\r\n|elif lcase (state.altair_commodity) = \"personal effects\":\r\n    efectos personales\r\n|elif lcase (state.altair_commodity) = \"commercial samples\":\r\n    muestras comerciales\r\n|elif lcase (state.altair_commodity) = \"tactical data\":\r\n    datos tácticos\r\n|elif lcase (state.altair_commodity) = \"assault plans\":\r\n    planes de asalto\r\n|elif lcase (state.altair_commodity) = \"encrypted correspondence\":\r\n    correspondencia encriptada\r\n|elif lcase (state.altair_commodity) = \"dyplomatic bag\":\r\n    valija diplomática\r\n|elif lcase (state.altair_commodity) = \"scientific research\":\r\n    investigaciones científicas\r\n|elif lcase (state.altair_commodity) = \"scientific samples\":\r\n    muestras científicas\r\n|elif lcase (state.altair_commodity) = \"political prisoner\":\r\n    prisioneros políticos\r\n|elif lcase (state.altair_commodity) = \"hostage\":\r\n    rehenes\r\n|elif lcase (state.altair_commodity) = \"geological samples\":\r\n    equipamiento geológico\r\n|elif lcase (state.altair_commodity) = \"master chefs\":\r\n    maestros de cocina\r\n|elif lcase (state.altair_commodity) = \"crystalline spheres\":\r\n    esferas cristalinas\r\n|elif lcase (state.altair_commodity) = \"taaffeite\":\r\n    taafeíta\r\n|elif lcase (state.altair_commodity) = \"jadeite\":\r\n    jadeíta\r\n|elif lcase (state.altair_commodity) = \"unstable data core\":\r\n    unidad de datos inestable\r\n|elif lcase (state.altair_commodity) = \"onionhead alpha strain\":\r\n    cepa alfa de cebollazo\r\n|elif lcase (state.altair_commodity) = \"occupied escape pod\":\r\n    cápsula de escape ocupada\r\n|elif lcase (state.altair_commodity) = \"water\":\r\n    agua\r\n|elif lcase (state.altair_commodity) = \"onionhead beta strain\":\r\n    cepa beta de cebollazo\r\n|elif lcase (state.altair_commodity) = \"praseodymium\":\r\n    praseodímio\r\n|elif lcase (state.altair_commodity) = \"bromellite\":\r\n    bromelita\r\n|elif lcase (state.altair_commodity) = \"samarium\":\r\n    samario\r\n|elif lcase (state.altair_commodity) = \"low temperature diamonds\":\r\n    diamantes de baja temperatura\r\n|elif lcase (state.altair_commodity) = \"hydrogen peroxide\":\r\n    peróxido de hidrógeno\r\n|elif lcase (state.altair_commodity) = \"liquid oxygen\":\r\n    oxígeno líquido\r\n|elif lcase (state.altair_commodity) = \"methanol monohydrate\":\r\n    monohidrato de metanol\r\n|elif lcase (state.altair_commodity) = \"lithium hydroxide\":\r\n    hidróxido de litio\r\n|elif lcase (state.altair_commodity) = \"methane clathrate\":\r\n    hidrato de metano\r\n|elif lcase (state.altair_commodity) = \"insulating membrane\":\r\n    membrana aislante\r\n|elif lcase (state.altair_commodity) = \"cmm composite\":\r\n    compuestos cmm\r\n|elif lcase (state.altair_commodity) = \"micro-weave cooling hoses\":\r\n    mangueras de refrigeración de micro tejidos\r\n|elif lcase (state.altair_commodity) = \"neofabric insulation\":\r\n    neotejido aislante\r\n|elif lcase (state.altair_commodity) = \"articulation motors\":\r\n    motores de articulación\r\n|elif lcase (state.altair_commodity) = \"hn shock mount\":\r\n    suspensión hn\r\n|elif lcase (state.altair_commodity) = \"emergency power cells\":\r\n    células de energía de emergencia\r\n|elif lcase (state.altair_commodity) = \"power converter\":\r\n    convertidor de energía\r\n|elif lcase (state.altair_commodity) = \"energy grid assembly\":\r\n    red de energía\r\n|elif lcase (state.altair_commodity) = \"power transfer bus\":\r\n    conductores de transferencia de energía\r\n|elif lcase (state.altair_commodity) = \"radiation baffle\":\r\n    deflector de radiación\r\n|elif lcase (state.altair_commodity) = \"exhaust manifold\":\r\n    colector de escape\r\n|elif lcase (state.altair_commodity) = \"reinforced mounting plate\":\r\n    placa de anclaje reforzada\r\n|elif lcase (state.altair_commodity) = \"heatsink interlink\":\r\n    interconectores de eyector térmico\r\n|elif lcase (state.altair_commodity) = \"magnetic emitter coil\":\r\n    bobina de emisión magnética\r\n|elif lcase (state.altair_commodity) = \"modular terminals\":\r\n    terminales modulares\r\n|elif lcase (state.altair_commodity) = \"nanobreakers\":\r\n    nanorrompedores\r\n|elif lcase (state.altair_commodity) = \"telemetry suite\":\r\n    paquete de telemetría\r\n|elif lcase (state.altair_commodity) = \"micro controllers\":\r\n    microcontroladores\r\n|elif lcase (state.altair_commodity) = \"ion distributor\":\r\n    distribuidor de iones\r\n|elif lcase (state.altair_commodity) = \"hardware diagnostic sensor\":\r\n    sensor de diagnóstico de hardware\r\n|elif lcase (state.altair_commodity) = \"conductive fabrics\":\r\n    tejidos conductivos\r\n|elif lcase (state.altair_commodity) = \"military grade fabrics\":\r\n    tejido de categoría militar\r\n|elif lcase (state.altair_commodity) = \"advanced medicines\":\r\n    medicinas avanzadas\r\n|elif lcase (state.altair_commodity) = \"medical diagnostic equipment\":\r\n    equipo de diagnóstico médico\r\n|elif lcase (state.altair_commodity) = \"survival equipment\":\r\n    equipo de supervivencia\r\n|elif lcase (state.altair_commodity) = \"data core\":\r\n    núcleo de datos\r\n|elif lcase (state.altair_commodity) = \"galactic travel guide\":\r\n    guia de viaje galáctico\r\n|elif lcase (state.altair_commodity) = \"mysterious idol\":\r\n    ídolo misterioso\r\n|elif lcase (state.altair_commodity) = \"prohibited research materials\":\r\n    materiales de investigación prohibida\r\n|elif lcase (state.altair_commodity) = \"antimatter containment unit\":\r\n    unidad de confinamiento de antimateria\r\n|elif lcase (state.altair_commodity) = \"space pioneer relics\":\r\n    relíquias de pioneros espaciales\r\n|elif lcase (state.altair_commodity) = \"fossil remnants\":\r\n    restos de fósiles\r\n|elif lcase (state.altair_commodity) = \"unknown probe\":\r\n    sonda desconocida\r\n|elif lcase (state.altair_commodity) = \"precious gems\":\r\n    piedras preciosas\r\n|elif lcase (state.altair_commodity) = \"coolinghoses\":\r\n    mangueras de refrigeración\r\n\r\n|else:\r\n   {state.altair_commodity}\r\n}",
      "default": false,
      "name": "Altair commodities",
      "description": "Función para traducir los nombres de las commodities del mercado"
    },
    "Altair materials": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{if lcase (state.altair_material) = \"yttrium\":\r\n   ítrio\r\n|elif lcase (state.altair_material) = \"zirconium\":\r\n   circonio\r\n|elif lcase (state.altair_material) = \"sulphur\":\r\n   azufre\r\n|elif lcase (state.altair_material) = \"carbon\":\r\n   carbono\r\n|elif lcase (state.altair_material) = \"phosphorus\":\r\n   fósforo\r\n|elif lcase (state.altair_material) = \"selenium\":\r\n   selenio\r\n|elif lcase (state.altair_material) = \"vanadium\":\r\n   vanadio\r\n|elif lcase (state.altair_material) = \"tungsten\":\r\n   tungsteno\r\n|elif lcase (state.altair_material) = \"tin\":\r\n   estaño\r\n|elif lcase (state.altair_material) = \"tellurium\":\r\n   telurio\r\n|elif lcase (state.altair_material) = \"technetium\":\r\n   tecnecio\r\n|elif lcase (state.altair_material) = \"ruthenium\":\r\n   rutenio\r\n|elif lcase (state.altair_material) = \"polonium\":\r\n   polonio\r\n|elif lcase (state.altair_material) = \"niobium\":\r\n   niobio\r\n|elif lcase (state.altair_material) = \"molybdenum\":\r\n   molibdeno\r\n|elif lcase (state.altair_material) = \"mercury\":\r\n   mercurio\r\n|elif lcase (state.altair_material) = \"manganese\":\r\n   manganeso\r\n|elif lcase (state.altair_material) = \"iron\":\r\n   hierro\r\n|elif lcase (state.altair_material) = \"germanium\":\r\n   germanio\r\n|elif lcase (state.altair_material) = \"chromium\":\r\n   cromo\r\n|elif lcase (state.altair_material) = \"cadmium\":\r\n   cadmio\r\n|elif lcase (state.altair_material) = \"arsenic\":\r\n   arsénico\r\n|elif lcase (state.altair_material) = \"antimony\":\r\n   antimonio\r\n|elif lcase (state.altair_material) = \"anomalous bulk scan data\":\r\n   Compresión de datos de transmisiones anormal\r\n|else:\r\n   {state.altair_material}\r\n}",
      "default": false,
      "name": "Altair materials",
      "description": "Función para traducir los nombres de los materiales"
    },
    "Altair naves": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{if state.altair_nombrenave = \"Adder\": \r\n  Su Áder\r\n|elif state.altair_nombrenave = \"Anaconda\":\r\n  Su Anaconda\r\n|elif state.altair_nombrenave = \"Asp Explorer\":\r\n  Su A ese pe explórer\r\n|elif state.altair_nombrenave = \"Asp Scout\":\r\n  Su A ese pe escáut\r\n|elif state.altair_nombrenave = \"Beluga\":\r\n  Su Beluga\r\n|elif state.altair_nombrenave = \"Cobra Mk. III\":\r\n  Su Cobra emekatrés\r\n|elif state.altair_nombrenave = \"Cobra Mk. IV\":\r\n  Su Cobra emekacuátro\r\n|elif state.altair_nombrenave = \"Diamondback Explorer\":\r\n  Su Daiamondback Explórer\r\n|elif state.altair_nombrenave = \"Diamondback Scout\":\r\n  Su Daiamondback escáut\r\n|elif state.altair_nombrenave = \"Eagle\":\r\n  Su íguel\r\n|elif state.altair_nombrenave = \"Federal Assault Ship\":\r\n  Su nave de asalto federal\r\n|elif state.altair_nombrenave = \"Federal Corvette\":\r\n  Su corbeta federal\r\n|elif state.altair_nombrenave = \"Federal Dropship\":\r\n  Su nave de descenso federal\r\n|elif state.altair_nombrenave = \"Federal Gunship\":\r\n  Su cañonera federal\r\n|elif state.altair_nombrenave = \"Fer-de-Lance\":\r\n  Su fer de lans\r\n|elif state.altair_nombrenave = \"Imperial Clipper\":\r\n  Su clíper imperial\r\n|elif state.altair_nombrenave = \"Imperial Courier\":\r\n  Su correo imperial\r\n|elif state.altair_nombrenave = \"Imperial Cutter\":\r\n  Su cúter imperial\r\n|elif state.altair_nombrenave = \"Imperial Eagle\":\r\n  Su íguel imperial\r\n|elif state.altair_nombrenave = \"Hauler\":\r\n  Su jáuler\r\n|elif state.altair_nombrenave = \"Keelback\":\r\n  Su kílbak\r\n|elif state.altair_nombrenave = \"Orca\":\r\n  Su orca\r\n|elif state.altair_nombrenave = \"Python\":\r\n  Su páiton\r\n|elif state.altair_nombrenave = \"Sidewinder\":\r\n  Su saidwainder\r\n|elif state.altair_nombrenave = \"Type-6 Transporter\":\r\n  Su taip six transpórter\r\n|elif state.altair_nombrenave = \"Type-7 Transporter\":\r\n  Su taip séven transpórter\r\n|elif state.altair_nombrenave = \"Type-9 Heavy\":\r\n  Su taip náin jevi\r\n|elif state.altair_nombrenave = \"Viper Mk. III\":\r\n  Su víper emekatrés\r\n|elif state.altair_nombrenave = \"Viper Mk. IV\":\r\n  Su víper emekacuátro\r\n|elif state.altair_nombrenave = \"Vulture\":\r\n  Su bvuúltur\r\n|elif state.altair_nombrenave = \"Dolphin\":\r\n    Su dolfin\r\n|else:\r\n  Su nave\r\n} ",
      "default": false,
      "name": "Altair naves",
      "description": "Función para traducir los nombres de las naves"
    },
    "Altair nombres potencias": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "\r\n\r\n{if lcase (state.altair_potencia) = \"zachary hudson\":\r\n   sácari jadson\r\n|elif lcase (state.altair_potencia) = \"a lavigny-duval\":\r\n   arissa laving duval\r\n|elif lcase (state.altair_potencia) = \"aisling dival\":\r\n   asling duval\r\n|elif lcase (state.altair_potencia) = \"archon delaine\":\r\n   arcon dilein\r\n|elif lcase (state.altair_potencia) = \"denton patreus\":\r\n   denton petrus\r\n|elif lcase (state.altair_potencia) = \"edmund mahon\":\r\n   édmund maón\r\n|elif lcase (state.altair_potencia) = \"felicia winters\":\r\n   felicia winters\r\n|elif lcase (state.altair_potencia) = \"li yong-rui\":\r\n   lii yong rui\r\n|elif lcase (state.altair_potencia) = \"pranav antal\":\r\n   pránavv antal\r\n|elif lcase (state.altair_potencia) = \"zermina torval\":\r\n   semina tórval\r\n|elif lcase (state.altair_potencia) = \"yuri grom\":\r\n   yiuri ggromm\r\n|else:\r\n  {state.altair_potencia}\r\n}",
      "default": false,
      "name": "Altair nombres potencias",
      "description": "Función para pronunciar de forma más correcta los nombres de los líderes de las potencias"
    },
    "Altair tipo NPC": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{if event.by:\r\n    {if event.by=\"Bounty hunter\":\r\n       un cazarrecompensas \r\n    |elif event.by=\"Cargo hunter\":\r\n       un cazador de cargamentos\r\n    |elif event.by=\"Military\":\r\n       una nave militar\r\n    |elif event.by=\"Ambushed pilot\":\r\n       un piloto emboscado\r\n    |elif event.by=\"Capital ship\":\r\n       una nave capital\r\n    |elif event.by=\"Commuter\":\r\n       un viajero\r\n    |elif event.by=\"Exploration convoy\":\r\n       un convoy de exploración\r\n    |elif event.by=\"Wedding convoy\":\r\n      un cortejo nupcial\r\n    |elif event.by=\"Cruise liner\":\r\n       un crucero de línea\r\n    |elif event.by=\"Escort\":\r\n       un escolta\r\n    |elif event.by=\"Messenger\":\r\n       un mensajero\r\n    |elif event.by=\"Miner\":\r\n       un minero\r\n    |elif event.by=\"Passenger hunter\":\r\n       un cazador de pasajeros\r\n    |elif event.by=\"Passenger liner\":\r\n       una nave de pasajeros\r\n    |elif event.by=\"Pirate\":\r\n       una nave pirata\r\n    |elif event.by=\"Police\":\r\n       una nave de la policía\r\n    |elif event.by=\"Rival power assassin\":\r\n       una nave de una potencia rival\r\n    |elif event.by=\"Rival power pirate\":\r\n       una nave pirata de una potencia rival\r\n    |elif event.by=\"Rival power security\":\r\n       una nave de seguridad de una potencia rival\r\n    |elif event.by=\"Propagandist\":\r\n       un propagandista\r\n    |elif event.by=\"Protester\":\r\n       un manifestante\r\n    |elif event.by=\"Refugee\":\r\n       un refugiado\r\n    |elif event.by=\"Smuggler\":\r\n       un contrabandista\r\n    |elif event.by=\"Starship One\":\r\n       la estarship uan\r\n    |else:\r\n       una nave enemiga \r\n    }\r\n  }",
      "default": false,
      "name": "Altair tipo NPC",
      "description": "Función para traducir los tipos de naves NPC"
    },
    "Blueprint make report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Function to obtain current inventory of a material}\r\n{set _inventory(required) to:\r\n    {for material in materials:\r\n        {if material.material = required:\r\n            {return material}\r\n        }\r\n    }\r\n}\r\n\r\n{_ Fetch blueprint from state }\r\n{set blueprintname to state.blueprint}\r\n{if blueprintname:\r\n    {_ Fetch full blueprint details }\r\n    {set blueprint to BlueprintDetails(blueprintname)}\r\n\r\n    {_ Context }\r\n    {SetState('eddi_context_last_subject', 'blueprint')}\r\n    {SetState('eddi_context_blueprint_name', blueprintname)}\r\n}\r\n\r\n{if !blueprint:\r\n    {_ Fetch from context }\r\n    {set blueprint to BlueprintDetails(state.eddi_context_blueprint_name)}\r\n}\r\n\r\n{set canbemade to 999}\r\n\r\n{if blueprint:\r\n    {_ Find the smallest number of this blueprint that can be made }\r\n    \r\n    {set cur to 0}\r\n    {while cur < len(blueprint.materials):\r\n        {set inventory to _inventory(blueprint.materials[cur].material)}\r\n        {if !inventory:\r\n            {set canbemade to 0}\r\n        |else:\r\n            {if inventory.amount < canbemade:\r\n                {set canbemade to inventory.amount}\r\n            }\r\n        }\r\n        {set cur to cur + 1}\r\n    }\r\n\r\n    {if canbemade = 0:\r\n        No puede hacer ningún {blueprintname}\r\n    |elif canbemade = 1:\r\n        Solo puede hacer un {blueprintname}\r\n    |else:\r\n        Puede hacer {canbemade} {blueprintname}\r\n    }\r\n|else:\r\n    No hay información disponible sobre los materiales necesarios para hacer {blueprintname}\r\n}.\r\n",
      "default": false,
      "name": "Blueprint make report",
      "description": "Report on how many of a particular blueprint we can make"
    },
    "Blueprint material report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch blueprint from state }\r\n{set blueprintname to state.blueprint}\r\n{if blueprintname:\r\n    {_ Fetch full blueprint details }\r\n    {set blueprint to BlueprintDetails(blueprintname)}\r\n\r\n    {_ Context }\r\n    {SetState('eddi_context_last_subject', 'blueprint')}\r\n    {SetState('eddi_context_blueprint_name', blueprintname)}\r\n}\r\n\r\n{if !blueprint:\r\n    {_ Fetch from context }\r\n    {set blueprint to BlueprintDetails(state.eddi_context_blueprint_name)}\r\n}\r\n\r\n{if blueprint:\r\n    {set materials to len(blueprint.materials)}\r\n    {blueprintname} requiere \r\n    {if materials = 1:\r\n        {blueprint.materials[0].material}\r\n    |elif materials = 2:\r\n        {blueprint.materials[0].material} y {blueprint.materials[1].material}\r\n    |else:\r\n        {set cur to 0}\r\n        {while cur < len(blueprint.materials):\r\n            {if cur = 0:\r\n                {blueprint.materials[cur].material}\r\n            |elif cur < len(blueprint.materials) - 1:\r\n                , {blueprint.materials[cur].material}\r\n            |else:\r\n                , y {blueprint.materials[cur].material}\r\n            }\r\n            {set cur to cur + 1}\r\n        }\r\n    }\r\n|else:\r\n    No hay información disponible sobre los materiales necesarios para hacer {blueprintname}\r\n}.\r\n",
      "default": false,
      "name": "Blueprint material report",
      "description": "Report on the material requirements for a blueprint"
    },
    "Body report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch from context }\r\n{set reportbody to BodyDetails(state.eddi_context_body_name, state.eddi_context_body_system)}\r\n\r\n{if !reportbody.name || reportbody.name = \"\":\r\n    No estoy segura sobre el cuerpo estelar acerca del cual me pregunta.\r\n|else:\r\n    {P(reportbody.name)} is a\r\n    {if reportbody.gravity < 0.5:\r\n        low-gravity\r\n    |elif reportbody.gravity <2:\r\n        medium-gravity\r\n    |elif reportbody.gravity <4:\r\n        high-gravity\r\n    |else:\r\n        extremely high-gravity\r\n    }\r\n\r\n    {if reportbody.tidallylocked:\r\n        tidally-locked\r\n    }\r\n\r\n    {if reportbody.terraformstate = \"Terraformable\":\r\n        terraformable\r\n    |elif reportbody.terraformstate = \"Terraformed\":\r\n        terraformed\r\n    }\r\n\r\n    {if len(reportbody.rings) > 0:\r\n        ringed\r\n    }\r\n\r\n    {reportbody.planettype}\r\n\r\n    {if reportbody.terraformstate = \"Terraforming\":\r\n      in the process of being terraformed\r\n    }\r\n\r\n    that is\r\n\r\n    {if reportbody.landable:\r\n        suitable\r\n    |else:\r\n        unsuitable\r\n    }\r\n    for landing.\r\n\r\n    {_ Atmosphere? }\r\n\r\n    {_ Volcanism? }\r\n\r\n    {if reportbody.landable :\r\n        It has a\r\n        {if reportbody.rotationalperiod <= 0.5:\r\n            fast\r\n        |elif reportbody.rotationalperiod > 20.0:\r\n            slow\r\n        }\r\n        rotational period of {Humanise(reportbody.rotationalperiod)} days.\r\n\r\n        {set goodmaterials to []}\r\n        {set greatmaterials to []}\r\n        {for material in reportbody.materials:\r\n            {if material.percentage >= MaterialDetails(material.material).greatpctbody:\r\n                {set greatmaterials to cat(greatmaterials, [material])}\r\n            |elif material.percentage >= MaterialDetails(material.material).goodpctbody:\r\n                {set goodmaterials to cat(goodmaterials, [material])}\r\n            }\r\n        }\r\n\r\n        {if len(greatmaterials) > 0:\r\n            This body contains very high levels of\r\n            {if len(greatmaterials) = 1:\r\n                {greatmaterials[0].material}\r\n            |elif len(greatmaterials) = 2:\r\n                {greatmaterials[0].material} and {greatmaterials[1].material}\r\n            |else:\r\n                {set cur to 0}\r\n                {while cur < len(greatmaterials):\r\n                    {if cur = 0:\r\n                        {greatmaterials[cur].material}\r\n                    |elif cur < len(greatmaterials) - 1:\r\n                        , {greatmaterials[cur].material}\r\n                    |else:\r\n                        , and {greatmaterials[cur].material}\r\n                    }\r\n                    {set cur to cur + 1}\r\n                }\r\n            }\r\n        }\r\n        {if len(goodmaterials) > 0:\r\n            {if len(greatmaterials) > 0:\r\n                and high levels of\r\n            |else:\r\n                This body contains high levels of\r\n            }\r\n            {if len(goodmaterials) = 1:\r\n                {goodmaterials[0].material}\r\n            |elif len(goodmaterials) = 2:\r\n                {goodmaterials[0].material} and {goodmaterials[1].material}\r\n            |else:\r\n                {set cur to 0}\r\n                {while cur < len(goodmaterials):\r\n                    {if cur = 0:\r\n                        {goodmaterials[cur].material}\r\n                    |elif cur < len(goodmaterials) - 1:\r\n                        , {goodmaterials[cur].material}\r\n                    |else:\r\n                        , and {goodmaterials[cur].material}\r\n                    }\r\n                    {set cur to cur + 1}\r\n                }\r\n            }\r\n        }\r\n        {if len(greatmaterials) > 0 || len(goodmaterials) > 0:\r\n            .\r\n        }\r\n    }\r\n}",
      "default": false,
      "name": "Body report",
      "description": "Function to report on the details of the contextual body"
    },
    "Body scanned": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'body')}\r\n{SetState('eddi_context_last_action', 'scan')}\r\n{SetState('eddi_context_body_system', system.name)}\r\n{SetState('eddi_context_body_name', event.name)}\r\n\r\n{Pause(1000)}\r\n\r\nEscaneo de {event.name} {OneOf('completado','terminado','finalizado')}.\r\n\r\n{OneOf('Es ','Estamos ante ', 'Se trata de ', 'Nos encontramos ante ','nos hallamos ante','estamos en presencia de')} \r\n{if event.bodyclass = \"Metal rich body\":\r\n  Un mundo rico en metales\r\n  {set gasgiant to 0}\r\n|elif event.bodyclass = \"High metal content body\":\r\n  Un mundo de alto contenido metálico \r\n  {set gasgiant to 0}\r\n|elif event.bodyclass = \"Rocky body\":\r\n  Un mundo rocoso \r\n  {set gasgiant to 0}\r\n|elif event.bodyclass = \"Icy body\":\r\n  Un mundo helado \r\n  {set gasgiant to 0}\r\n|elif event.bodyclass = \"Rocky ice body\":\r\n  Un mundo rocoso helado\r\n  {set gasgiant to 0}\r\n|elif event.bodyclass = \"Earthlike body\":\r\n  Un mundo similar a la tierra \r\n  {set gasgiant to 0}\r\n|elif event.bodyclass = \"Water world\":\r\n  Un mundo acuático \r\n  {set gasgiant to 0}\r\n|elif event.bodyclass = \"Ammonia world\":\r\n  Un mundo de amoníaco \r\n  {set gasgiant to 0}\r\n|elif event.bodyclass = \"Water giant\":\r\n  un gigante acuático \r\n  {set gasgiant to 0}\r\n|elif event.bodyclass = \"Water giant with life\":\r\n  un gigante acuático con vida \r\n  {set gasgiant to 0}\r\n|elif event.bodyclass = \"Gas giant with water based life\":\r\n  un gigante gaseoso con vida basada en el agua \r\n  {set gasgiant to 1}\r\n|elif event.bodyclass = \"Gas giant with ammonia based life\":\r\n  un gigante gaseoso con vida basada en el amoníaco \r\n  {set gasgiant to 1}\r\n|elif event.bodyclass = \"Sudarsky class I gas giant\":\r\n  un gigante gaseoso de clase uno\r\n  {set gasgiant to 1}\r\n|elif event.bodyclass = \"Sudarsky class II gas giant\":\r\n  un gigante gaseoso de clase dos\r\n  {set gasgiant to 1}\r\n|elif event.bodyclass = \"Sudarsky class III gas giant\":\r\n  un gigante gaseoso de clase tres\r\n {set gasgiant to 1}\r\n|elif event.bodyclass = \"Sudarsky class IV gas giant\":\r\n  un gigante gaseoso de clase cuatro\r\n  {set gasgiant to 1}\r\n|elif event.bodyclass = \"Sudarsky class V gas giant\":\r\n  un gigante gaseoso de clase cinco\r\n  {set gasgiant to 1}\r\n|elif event.bodyclass = \"Helium rich gas giant\":\r\n  un gigante gaseoso rico en helio \r\n  {set gasgiant to 1}\r\n|elif event.bodyclass = \"Helium gas giant\":\r\n  un gigante gaseoso de helio\r\n  {set gasgiant to 1}\r\n|else:\r\n  un cuerpo estelar \r\n}\r\n ,de \r\n{if event.gravity < 0.5:\r\n    baja gravedad\r\n|elif event.gravity <2:\r\n    gravedad media\r\n|elif event.gravity <4:\r\n    alta gravedad\r\n|else:\r\n    gravedad extremadamente alta\r\n}\r\n\r\n{if event.tidallylocked:\r\n    con acoplamiento de marea\r\n}\r\n\r\n{_ Note three rs in terrraformable is a typo in information from Elite }\r\n{if event.terraformstate = \"Terrraformable\": \r\n    terraformable\r\n|elif event.terraformstate = \"Terraformed\":\r\n    terraformado\r\n}\r\n\r\n{if len(event.rings) > 0:\r\n    con un sistema de anillos\r\n}\r\n\r\n\r\n{if event.terraformstate = \"Terraforming\":\r\n  en proceso de ser terraformado\r\n}\r\n\r\n,\r\n\r\n{if event.landable:\r\n    {OneOf('apropiado para','adecuado para','en el que se puede')}\r\n|else:\r\n    {OneOf('inapropiado para','no apropiado para','no adecuado para','inadecuado para','en el que no se puede')}\r\n}\r\n aterrizar.\r\n\r\n{_Atmosphere }\r\n{if gasgiant=0:\r\n {if (event.atmosphere && event.atmosphere!=\"No atmosphere\"):\r\n   {OneOf('Posee una ','Tiene una')} \r\n  {if event.atmosphere = \"suitable for water-based life atmosphere\":\r\n     atmósfera apropiada para la vida acuática\r\n  |elif event.atmosphere = \"ammonia and oxygen atmosphere\":\r\n     atmósfera de amoníaco y oxígeno\r\n  |elif event.atmosphere = \"thin ammonia and oxygen atmosphere\":\r\n     ténue atmósfera de amoníaco y oxígeno\r\n  |elif event.atmosphere = \"thick ammonia and oxygen atmosphere\":\r\n     densa atmósfera de amoníaco y oxígeno\r\n  |elif event.atmosphere = \"hot thick ammonia atmosphere\":\r\n     densa y caliente atmósfera de amoníaco \r\n  |elif event.atmosphere = \"water atmosphere\":\r\n     atmósfera de agua\r\n  |elif event.atmosphere = \"hot thick carbon dioxide atmosphere\":\r\n     densa y caliente atmósfera de dióxido de carbono\r\n  |elif event.atmosphere = \"hot thick carbon dioxide rich atmosphere\":\r\n     densa y caliente atmósfera rica en dióxido de carbono\r\n  |elif event.atmosphere = \"thin carbon dioxide atmosphere\":\r\n     ténue atmósfera de dióxido de carbono\r\n  |elif event.atmosphere = \"thick carbon dioxide atmosphere\":\r\n     densa atmósfera de dióxido de carbono\r\n  |elif event.atmosphere = \"carbon dioxide atmosphere\":\r\n     atmósfera de dióxido de carbono\r\n  |elif event.atmosphere = \"sulphur dioxide atmosphere\":\r\n     atmósfera de dióxido de azúfre\r\n  |elif event.atmosphere = \"thin sulphur dioxide atmosphere\":\r\n     ténue atmósfera de dióxido de azúfre\r\n  |elif event.atmosphere = \"thick sulphur dioxide atmosphere\":\r\n     densa atmósfera de dióxido de azúfre\r\n  |elif event.atmosphere = \"thin nitrogen atmosphere\":\r\n     ténue atmósfera de nitrógeno\r\n  |elif event.atmosphere = \"thick nitrogen atmosphere\":\r\n     densa atmósfera de nitrógeno\r\n  |elif event.atmosphere = \"nitrogen atmosphere\":\r\n     atmósfera de nitrógeno\r\n  |elif event.atmosphere = \"water rich atmosphere\":\r\n     atmósfera rica en agua\r\n  |elif event.atmosphere = \"carbon dioxide rich atmosphere\":\r\n     atmósfera rica en dióxido de carbono\r\n  |elif event.atmosphere = \"thin carbon dioxide rich atmosphere\":\r\n     ténue atmósfera rica en dióxido de carbono\r\n  |elif event.atmosphere = \"thick carbon dioxide rich atmosphere\":\r\n     densa atmósfera rica en dióxido de carbono\r\n  |elif event.atmosphere = \"thin methane atmosphere\":\r\n     ténue atmósfera de metano\r\n  |elif event.atmosphere = \"thick methane atmosphere\":\r\n     densa atmósfera de metano\r\n  |elif event.atmosphere = \"methane atmosphere\":\r\n     atmósfera de metano\r\n  |elif event.atmosphere = \"thin helium atmosphere\":\r\n     ténue atmósfera de hélio\r\n  |elif event.atmosphere = \"thick helium atmosphere\":\r\n     densa atmósfera de hélio\r\n  |elif event.atmosphere = \"helium atmosphere\":\r\n     atmósfera de hélio\r\n  |elif event.atmosphere = \"silicate vapour atmosphere\":\r\n     atmósfera de vapor de silicato\r\n  |elif event.atmosphere = \"metallic vapour atmosphere\":\r\n     atmósfera de vapor metálico\r\n  |elif event.atmosphere = \"neon rich atmosphere\":\r\n     atmósfera rica en neón\r\n  |elif event.atmosphere = \"thin neon rich atmosphere\":\r\n     ténue atmósfera rica en neón\r\n  |elif event.atmosphere = \"thick neon rich atmosphere\":\r\n     densa atmósfera rica en neón\r\n  |elif event.atmosphere = \"argon rich atmosphere\":\r\n     atmósfera rica en argón\r\n  |elif event.atmosphere = \"thin argon rich atmosphere\":\r\n     ténue atmósfera rica en argón\r\n  |elif event.atmosphere = \"thick argon rich atmosphere\":\r\n     densa atmósfera rica en argón\r\n  |elif event.atmosphere = \"neon atmosphere\":\r\n     atmósfera de neón\r\n  |elif event.atmosphere = \"thin neon atmosphere\":\r\n     ténue atmósfera de neón\r\n  |elif event.atmosphere = \"thick neon atmosphere\":\r\n     densa atmósfera de neón\r\n  |elif event.atmosphere = \"thin argon atmosphere\":\r\n     ténue atmósfera de argón\r\n  |elif event.atmosphere = \"thick argon atmosphere\":\r\n     densa atmósfera de argón\r\n  |elif event.atmosphere = \"argon atmosphere\":\r\n     atmósfera de argón\r\n  |elif event.atmosphere = \"oxygen atmosphere\":\r\n     atmósfera de oxígeno\r\n  |elif event.atmosphere = \"thin oxygen atmosphere\":\r\n     ténue atmósfera de oxígeno\r\n  |elif event.atmosphere = \"thick oxygen atmosphere\":\r\n     densa atmósfera de oxígeno\r\n  |else:\r\n     atmósfera que no me es posible identificar\r\n  }.\r\n |else:\r\n      Este planeta carece de atmósfera\r\n }.\r\n}\r\n{_ Volcanism}\r\n\r\n{if event.landable :\r\n\r\n    {set rotation to round(abs(event.rotationperiod) / 86400,2)}\r\n    Tiene un \r\n    {if rotation <= 0.5:\r\n        rápido periodo rotacional \r\n    |elif rotation > 20.0:\r\n        lento periodo rotacional \r\n    |else:\r\n        periodo rotacional normal \r\n    }\r\n    de {rotation} días.\r\n    \r\n    {set goodmaterials to []}\r\n    {set greatmaterials to []}\r\n    {for material in event.materials:\r\n        {if material.percentage >= material.definition.greatpctbody:\r\n            {set greatmaterials to cat(greatmaterials, [material])}\r\n        |elif material.percentage >= material.definition.goodpctbody:\r\n            {set goodmaterials to cat(goodmaterials, [material])}\r\n        }\r\n    }\r\n\r\n    {if len(greatmaterials) > 0:\r\n        {Ocassionally (2,\"Este cuerpo estelar\")} contiene niveles muy altos de \r\n        {if len(greatmaterials) = 1:\r\n            {SetState(\"altair_material\", greatmaterials[0].name)}\r\n            {F(\"Altair materials\")}\r\n        |elif len(greatmaterials) = 2:\r\n            {SetState(\"altair_material\", greatmaterials[0].name)}\r\n            {F(\"Altair materials\")}\r\n            y \r\n            {SetState(\"altair_material\", greatmaterials[1].name)}\r\n            {F(\"Altair materials\")}\r\n        |else:\r\n            {set cur to 0}\r\n            {while cur < len(greatmaterials):\r\n                {if cur = 0:\r\n                    {SetState(\"altair_material\", greatmaterials[cur].name)}\r\n                    {F(\"Altair materials\")}\r\n                |elif cur < len(greatmaterials) - 1:\r\n                    , {SetState(\"altair_material\", greatmaterials[cur].name)}\r\n                      {F(\"Altair materials\")}\r\n                |else:\r\n                    ,y {SetState(\"altair_material\", greatmaterials[cur].name)}\r\n                    {F(\"Altair materials\")}\r\n                }\r\n                {set cur to cur + 1}\r\n            }\r\n        }\r\n    }\r\n    {if len(goodmaterials) > 0:\r\n        {if len(greatmaterials) > 0:\r\n            y altos niveles de \r\n        |else:\r\n            {Ocassionally (2,\"Este cuerpo estelar\")} contiene niveles altos de \r\n        }\r\n        {if len(goodmaterials) = 1:\r\n            {SetState(\"altair_material\", goodmaterials[0].name)}\r\n            {F(\"Altair materials\")}\r\n        |elif len(goodmaterials) = 2:\r\n            {SetState(\"altair_material\", goodmaterials[0].name)}\r\n            {F(\"Altair materials\")}\r\n            y \r\n            {SetState(\"altair_material\", goodmaterials[1].name)}\r\n            {F(\"Altair materials\")}\r\n        |else:\r\n            {set cur to 0}\r\n            {while cur < len(goodmaterials):\r\n                {if cur = 0:\r\n                    {SetState(\"altair_material\", goodmaterials[cur].name)}\r\n                    {F(\"Altair materials\")}\r\n                |elif cur < len(goodmaterials) - 1:\r\n                    , {SetState(\"altair_material\", goodmaterials[cur].name)}\r\n                      {F(\"Altair materials\")}\r\n                |else:\r\n                    ,y {SetState(\"altair_material\", goodmaterials[cur].name)}\r\n                       {F(\"Altair materials\")}\r\n                }\r\n                {set cur to cur + 1}\r\n            }\r\n        }\r\n    }.\r\n}",
      "default": false,
      "name": "Body scanned",
      "description": "Triggered when you complete a scan of a planetary body"
    },
    "Bond awarded": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'bond')}\r\n{SetState('eddi_context_last_action', 'award')}\r\n{SetState('eddi_context_bond_amount', event.reward)}\r\n{SetState('eddi_context_bond_faction', event.awardingfaction)}\r\n\r\nRecibidos {event.reward} créditos por bonos de combate.",
      "default": false,
      "name": "Bond awarded",
      "description": "Triggered when you are awarded a combat bond"
    },
    "Bond redeemed": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'bond')}\r\n{SetState('eddi_context_last_action', 'redeem')}\r\n{SetState('eddi_context_bond_amount', event.amount)}\r\n\r\nDevengados {event.amount} créditos en bonos de combate\r\n{Occasionally(2, \"\r\n  {if len(event.rewards) = 1:\r\n    de la facción {event.rewards[0].faction}\r\n  |else:\r\n    de las facciones\r\n    {set cur to 0}\r\n    {while cur < len(event.rewards):\r\n        {if cur = 0:\r\n        |elif cur < len(event.rewards) - 1:\r\n            , \r\n        |else:\r\n            y\r\n        }\r\n        {event.rewards[cur].faction}\r\n        {set cur to cur + 1}\r\n    }\r\n  }\r\n\")}.\r\n",
      "default": false,
      "name": "Bond redeemed",
      "description": "Triggered when you redeem a combat bond"
    },
    "Bounty awarded": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'bounty')}\r\n{SetState('eddi_context_last_action', 'award')}\r\n{SetState('eddi_context_bounty_name', event.target)}\r\n{SetState('eddi_context_bounty_faction', event.faction)}\r\n{SetState('eddi_context_bounty_amount', event.reward)}\r\n\r\n{Pause(500)}\r\n{if len(event.rewards) = 1:\r\n    Recibido bono de recompensa de {event.reward} créditos por parte de la facción {event.rewards[0].faction}\r\n|elif len(event.rewards) > 1:\r\n    Recibidos {len(event.rewards)} bonos de recompensa por un total de {event.reward} créditos\r\n}\r\n{if event.shared:\r\n    para repartir entre sus compañeros de escuadrón y usted.\r\n}.\r\n",
      "default": false,
      "name": "Bounty awarded",
      "description": "Triggered when you are awarded a bounty"
    },
    "Bounty incurred": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'bounty')}\r\n{SetState('eddi_context_last_action', 'incur')}\r\n{SetState('eddi_context_bounty_name', event.victim)}\r\n{SetState('eddi_context_bounty_faction', event.faction)}\r\n{SetState('eddi_context_bounty_amount', event.bounty)}\r\n\r\nLa facción {event.faction} acaba de poner una recompensa de {event.bounty} créditos por nuestra cabeza.",
      "default": false,
      "name": "Bounty incurred",
      "description": "Triggered when you incur a bounty"
    },
    "Bounty redeemed": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'bounty')}\r\n{SetState('eddi_context_last_action', 'redeem')}\r\n{SetState('eddi_context_bounty_amount', event.amount)}\r\n\r\nDevengados {event.amount} créditos en vales de recompensas\r\n{Occasionally(2, \"\r\n  {if len(event.rewards) = 1:\r\n    por parte de {event.rewards[0].faction}\r\n  |else:\r\n    por parte de\r\n    {set cur to 0}\r\n    {while cur < len(event.rewards):\r\n        {if cur = 0:\r\n        |elif cur < len(event.rewards) - 1:\r\n            , \r\n        |else:\r\n            y\r\n        }\r\n        {event.rewards[cur].faction}\r\n        {set cur to cur + 1}\r\n    }\r\n  }\r\n\")}.\r\n",
      "default": false,
      "name": "Bounty redeemed",
      "description": "Triggered when you redeem a bounty voucher"
    },
    "Cargo collected": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": "{SetState(\"altair_commodity\", event.cargo)} \r\n       {F(\"Altair commodities\")}\r\na bordo.\r\n",
      "default": false,
      "name": "Cargo collected",
      "description": "Triggered when you pick up cargo in your ship or SRV"
    },
    "Cargo ejected": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{event.cargo} expulsado.",
      "default": false,
      "name": "Cargo ejected",
      "description": "Triggered when you eject cargo from your ship or SRV"
    },
    "Cargo inventory": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Cargo inventory",
      "description": "Triggered when you obtain an inventory of your cargo"
    },
    "Cleared save": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'save')}\r\n{SetState('eddi_context_last_action', 'clear')}\r\n\r\nAdiós-comandante. Fué un placer servirle.",
      "default": false,
      "name": "Cleared save",
      "description": "Triggered when you clear your save"
    },
    "Cockpit breached": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'cockpit')}\r\n{SetState('eddi_context_last_action', 'breach')}\r\n\r\nAlerta. El blindaje de la cabina ha sido gravemente dañado. se ha producido una brecha. Repito: se ha producido una brecha.",
      "default": false,
      "name": "Cockpit breached",
      "description": "Triggered when your ship's cockpit is broken"
    },
    "Combat promotion": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'rank')}\r\n{SetState('eddi_context_last_action', 'promotion')}\r\n{SetState('eddi_context_rank_name', 'combat')}\r\n{SetState('eddi_context_rank_amount', event.rating)}\r\n\r\nSe ha reconocido su habilidad de combate como {F(\"Honorific\")}.",
      "default": false,
      "name": "Combat promotion",
      "description": "Triggered when your combat rank increases"
    },
    "Commander continued": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{SetState(\"altair_evitar_rollo_principio\", 1)}\r\n\r\nBienvenido {Occasionally (2,'a bordo')} {Occasionally (2,'de nuevo')} {OneOf(', Áx-el',', comandante')}. { Occasionally (3,'Shirka operativa y a su servicio')}",
      "default": false,
      "name": "Commander continued",
      "description": "Triggered when you continue an existing game"
    },
    "Commander progress": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Commander progress",
      "description": "Triggered when your progress is reported"
    },
    "Commander ratings": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Commander ratings",
      "description": "Triggered when your ratings are reported"
    },
    "Commander started": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{OneOf ('Bienvenido comandante','Hola Áx-el. ¿Que hay?','Bienvenido de nuevo, comandante','Hola Comandante. es un placer verle de nuevo.','Hola Áx-el, me alegra verte de nuevo','Hola Áx-el. Un placer verte de nuevo','me alegra tenerle de nuevo abordo, comandante')}.",
      "default": false,
      "name": "Commander started",
      "description": "Triggered when you start a new game"
    },
    "Commodity collected": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'commodity')}\r\n{SetState('eddi_context_last_action', 'collect')}\r\n{SetState('eddi_context_cargo_name', event.commodity)}\r\n\r\n\r\n{SetState(\"altair_commodity\", event.name)} \r\n       {F(\"Altair commodities\")}\r\na bordo.\r\n",
      "default": false,
      "name": "Commodity collected",
      "description": "Triggered when you pick up a commodity in your ship or SRV"
    },
    "Commodity ejected": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": false,
      "name": "Commodity ejected",
      "description": "Triggered when you eject a commodity from your ship or SRV"
    },
    "Commodity purchase check": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{for commodity in station.commodities:\r\n    {if commodity.stock > 0 && commodity.buyprice < commodity.avgprice:\r\n        {set discount to commodity.avgprice - commodity.buyprice}\r\n        {if discount > best.avgprice - best.buyprice:\r\n            {set thirdbest to secondbest}\r\n            {set secondbest to best}\r\n            {set best to commodity}\r\n        |elif discount > secondbest.avgprice - secondbest.buyprice:\r\n            {set thirdbest to secondbest}\r\n            {set secondbest to commodity}\r\n        |elif discount > thirdbest.avgprice - thirdbest.buyprice:\r\n            {set thirdbest to commodity}\r\n        }\r\n    }\r\n}\r\n\r\n{if best:\r\n    El mercado local vende \r\n       {SetState(\"altair_commodity\", best.name)} \r\n       {F(\"Altair commodities\")}\r\n    a buen precio.\r\n    {if secondbest\r\n       , tanto como \r\n     {SetState(\"altair_commodity\", secondbest.name)} \r\n     {F(\"Altair commodities\")}   \r\n        {if thirdbest:\r\n            y \r\n     {SetState(\"altair_commodity\", thirdbest.name)} \r\n     {F(\"Altair commodities\")} \r\n        }\r\n    }\r\n.}\r\n",
      "default": false,
      "name": "Commodity purchase check",
      "description": "Check to see which commodities are the best to purchase"
    },
    "Commodity purchased": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'commodity')}\r\n{SetState('eddi_context_last_action', 'purchase')}\r\n{SetState('eddi_context_commodity_name', event.commodity)}\r\n{SetState('eddi_context_commodity_amount', event.amount)}\r\n\r\n{SetState(\"altair_commodity\", event.commodity)}\r\n\r\n{if event.amount = 1:\r\n   Acaba de comprar una tonelada de {F(\"Altair commodities\")} por {event.price} créditos.\r\n|elif event.amount > 1:\r\n    Acaba de comprar {event.amount} toneladas de {F(\"Altair commodities\")} a {event.price} créditos por tonelada.  El coste total es de {event.amount * event.price} créditos.\r\n}",
      "default": false,
      "name": "Commodity purchased",
      "description": "Triggered when you buy a commodity from the markets"
    },
    "Commodity refined": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": false,
      "name": "Commodity refined",
      "description": "Triggered when you refine a commodity from the refinery"
    },
    "Commodity sale check": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Function to find a given commodity in market}\r\n{set market(commodity) to:\r\n    {for marketcommodity in station.commodities:\r\n        {if marketcommodity.EDDBID = commodity.EDDBID:\r\n            {return marketcommodity}\r\n        }\r\n    }\r\n}\r\n\r\n{set totalprofit to 0}\r\n{set profitablecommodities to []}\r\n{set stolencommodities to []}\r\n{set unknowncommodities to []}\r\n\r\n{for cargo in ship.cargo:\r\n    {if cargo.commodity.name != 'Limpet':\r\n        {set marketcommodity to market(cargo.commodity)}\r\n        {if !marketcommodity:\r\n            {_ We have no market information for this commodity.  Add it to the list of unknowns }\r\n            {set unknowncommodities to cat(unknowncommodities, [cargo.commodity])}\r\n        }\r\n        {set profit to (marketcommodity.sellprice - cargo.price) * cargo.amount}\r\n        {if cargo.stolen = true:\r\n            {set stolencommodities to cat(stolencommodities, [cargo.commodity])}\r\n        |elif cargo.missionid:\r\n            {_ don't do anything with mission cargo at the moment}\r\n        |elif marketcommodity && profit > 0:\r\n            {set profitablecommodities to cat(profitablecommodities, [cargo.commodity])}\r\n            {set totalprofit to totalprofit + profit}\r\n        }\r\n    }\r\n}\r\n\r\n{_ Let the user know about any commodities they can sell here for a profit}\r\n{if len(profitablecommodities) > 0:\r\n    Puede vender su\r\n    {if len(profitablecommodities) = 1:\r\n        {SetState(\"altair_commodity\", profitablecommodities[0].name)}\r\n        {F(\"Altair commodities\")} \r\n    |elif len(profitablecommodities) = 2:\r\n        {SetState(\"altair_commodity\", profitablecommodities[0].name)} {F(\"Altair commodities\")} \r\n         y \r\n        {SetState(\"altair_commodity\", profitablecommodities[1].name)} {F(\"Altair commodities\")} \r\n    |else:\r\n        {set cur to 0}\r\n        {while cur < len(profitablecommodities):\r\n            {if cur = 0:\r\n                {SetState(\"altair_commodity\", profitablecommodities[cur].name)} {F(\"Altair commodities\")} \r\n            |elif cur < len(profitablecommodities) - 1:\r\n                , {SetState(\"altair_commodity\", profitablecommodities[cur].name)} {F(\"Altair commodities\")}\r\n            |else:\r\n                , y {SetState(\"altair_commodity\", profitablecommodities[cur].name)} {F(\"Altair commodities\")}\r\n            }\r\n            {set cur to cur + 1}\r\n        }\r\n    }\r\n    por un total de {totalprofit} créditos de beneficio.\r\n}\r\n\r\n{_ Let the user know about any commodities about which we are unsure if they can sell for a profit}\r\n{if len(unknowncommodities) > 0:\r\n    Podría {if len(profitablecommodities) > 0: además } vender su \r\n    {if len(unknowncommodities) = 1:\r\n        {SetState(\"altair_commodity\", unknowncommodities[0].name)} {F(\"Altair commodities\")}\r\n    |elif len(unknowncommodities) = 2:\r\n        {SetState(\"altair_commodity\", unknowncommodities[0].name)} {F(\"Altair commodities\")}\r\n        y \r\n        {SetState(\"altair_commodity\", unknowncommodities[1].name)} {F(\"Altair commodities\")}\r\n    |else:\r\n        {set cur to 0}\r\n        {while cur < len(unknowncommodities):\r\n            {if cur = 0:\r\n                {SetState(\"altair_commodity\", unknowncommodities[cur].name)} {F(\"Altair commodities\")}\r\n            |elif cur < len(profitablecommodities) - 1:\r\n                , {SetState(\"altair_commodity\", unknowncommodities[cur].name)} {F(\"Altair commodities\")}\r\n            |else:\r\n                , y{SetState(\"altair_commodity\", unknowncommodities[cur].name)} {F(\"Altair commodities\")}\r\n            }\r\n            {set cur to cur + 1}\r\n        }\r\n    }\r\n    , sin embargo compruebe beneficios potenciales {if len(unknowncommodities) > 1: de estos |else: de este}  antes de confirmar la transacción.\r\n}\r\n\r\n{_ Let the user know about any stolen commodities they can sell on the black market}\r\n{if len(stolencommodities) > 0:\r\n    {if station.hasblackmarket:\r\n        Puede {OneOf('descargar', 'dump', 'fence')} su\r\n        {if len(stolencommodities) = 1:\r\n            {SetState(\"altair_commodity\", stolencommodities[0].name)} {F(\"Altair commodities\")}\r\n        |elif len(stolencommodities) = 2:\r\n            {SetState(\"altair_commodity\", stolencommodities[0].name)} {F(\"Altair commodities\")}\r\n            y\r\n            {SetState(\"altair_commodity\", stolencommodities[1].name)} {F(\"Altair commodities\")}\r\n        |else:\r\n            {set cur to 0}\r\n            {while cur < len(stolencommodities):\r\n                {if cur = 0:\r\n                    {SetState(\"altair_commodity\", stolencommodities[cur].name)} {F(\"Altair commodities\")}\r\n                |elif cur < len(stolencommodities) - 1:\r\n                    , {SetState(\"altair_commodity\", stolencommodities[cur].name)} {F(\"Altair commodities\")}\r\n                |else:\r\n                    , y {SetState(\"altair_commodity\", stolencommodities[cur].name)} {F(\"Altair commodities\")}\r\n                }\r\n                {set cur to cur + 1}\r\n            }\r\n        }\r\n        robado aquí.\r\n    |else:\r\n        Recuerde:  {OneOf(\"tenemos cargamento robado a bordo\", \"llevamos mercancías robadas a bordo\", \"estamos transportando cargamento robado\", \"estamos transportando mercancías robadas\")}.\r\n    }\r\n}\r\n",
      "default": false,
      "name": "Commodity sale check",
      "description": "Check to see which commodities can be sold here"
    },
    "Commodity sold": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'commodity')}\r\n{SetState('eddi_context_last_action', 'sell')}\r\n{SetState('eddi_context_commodity_name', event.commodity)}\r\n{SetState('eddi_context_commodity_amount', event.amount)}\r\n\r\n{SetState(\"altair_commodity\", event.commodity)}\r\n\r\n{if event.amount = 1:\r\n   Acaba de vender una tonelada de {F(\"Altair commodities\")} por {event.price} créditos\r\n|elif event.amount > 1:\r\n    Acaba de vender {event.amount} toneladas de {F(\"Altair commodities\")} a {event.price} créditos por tonelada.  El valor total son {event.amount * event.price} créditos\r\n}\r\n{if event.profit < 0:\r\n    con una pérdida de {-1 * event.profit * event.amount} créditos.\r\n|elif event.profit = 0:\r\n    sin ganancias ni pérdidas.\r\n|else:\r\n    con un beneficio de {event.profit * event.amount} créditos.\r\n}",
      "default": false,
      "name": "Commodity sold",
      "description": "Triggered when you sell a commodity to the markets"
    },
    "Community goal": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{F('Honorific')}, \r\n\r\n{if len(event.name) > 1:\r\n    {OneOf(\"Estoy revisando\", \"Te has interesado por\")}\r\n    los siguientes objetivos de la comunidad.\r\n}\r\n\r\n{Pause(1000)}\r\n\r\n{set cur to 0}\r\n{while cur < len(event.name):\r\n\r\n   {if cur = 0 && len(event.name) = 1:\r\n      {_ nothing _}\r\n   |elif cur = 0 && len(event.name) > 1:\r\n      El primero,\r\n   |elif cur < (len(event.name) - 1):\r\n      el siguiente, \r\n   |else:\r\n      el último,\r\n   }\r\n\r\n   {event.name[cur]},\r\n\r\n   {if event.iscomplete[cur]:\r\n      {OneOf(\"está completado\", \"ha finalizado\")} \r\n   |else: \r\n      {OneOf(\"y aun no ha terminado\", \"está activo\")} \r\n   }\r\n   {if event.tier[cur]:, y}\r\n\r\n   {if event.tier[cur]:\r\n       ha llegado al {event.tier[cur]}.\r\n       Tu recompensa esperada es de\r\n       {Humanise(event.tierreward[cur])} créditos\r\n       {Occasionally(2, \"en el {event.percentileband[cur]}por ciento\")}\r\n   }.\r\n\r\n    {if event.toprank[cur]: \r\n       Eres uno de los {event.topranksize[cur]} mejores comandantes de este evento. \r\n    }\r\n\r\n   {_ Create a comparison function _}\r\n   {set compare(stat) to:     \r\n       {if stat > 0.95 && stat < 1.05:\r\n           {OneOf(\"aproximadamente\",\"cerca de\",\"unos\")} igual a \r\n       |elif stat > 2:\r\n            {Humanise(stat)} veces\r\n       |elif stat < 1:\r\n            {if stat > 0.89: {OneOf(\"fractionally\",\"just\")}}\r\n            menos que\r\n       }\r\n       {if stat < 0.01:\r\n            just a {OneOf(\"fraction\", \"token\")} of            \r\n       |elif stat < 0.10:\r\n            less than a tenth of\r\n       |elif stat < 0.25:\r\n            less than a quarter of\r\n       |elif stat < 0.5:\r\n            less than half of\r\n       |elif stat < 0.75:\r\n            less than\r\n       |elif stat < 1:\r\n            roughly equal to\r\n       |elif stat < 1.25:\r\n            a little more than\r\n       |elif stat < 1.5:\r\n            more than\r\n       |elif stat < 2:\r\n            significantly more than\r\n       }\r\n    }\r\n\r\n    {set compare_contribution to (event.contribution[cur] / round(event.total[cur] / event.contributors[cur], 0))}\r\n    {if compare_contribution != 0:\r\n        {Occasionally(2, \"Has aportado {compare(compare_contribution)} de media\")}\r\n        {OneOf(\".\", \"y\")}\r\n    }\r\n\r\n    {if !event.iscomplete[cur]:\r\n       Deberías \r\n       {if event.contribution[cur] > 0: {OneOf(\"contribuir mas\", \"hacer algunas contribuciones mas\")} |else: contribute}\r\n       en {P(event.station[cur])}, de\r\n       {OneOf(\"{P(event.system[cur])}\", \"el sistema {P(event.system[cur])} \" )}.\r\n    }\r\n\r\n    {set cur to cur + 1}\r\n    {Pause(2000)}\r\n}",
      "default": false,
      "name": "Community goal",
      "description": "Triggered when checking the status of a community goal"
    },
    "Controlling fighter": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{OneOf(\"enlace neural\", \"enlace\")} {Occasionally(2, \"con el caza\")} {OneOf(\"iniciado\", \"establecido\", \"fijado\")}.",
      "default": false,
      "name": "Controlling fighter",
      "description": "Triggered when you switch control from your ship to your fighter"
    },
    "Controlling ship": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{OneOf(\"Enlace neural\", \"enlace\", \"enlace\")} {OneOf(\"terminado\", \"desconectado\")}.",
      "default": false,
      "name": "Controlling ship",
      "description": "Triggered when you switch control from your fighter to your ship"
    },
    "Crew assigned": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if event.role = \"Active\":\r\n    {event.name} está ahora en servicio activo.\r\n|else:\r\n    {event.name} retirandose del servicio activo.\r\n}",
      "default": false,
      "name": "Crew assigned",
      "description": "Triggered when you assign crew"
    },
    "Crew fired": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'crew')}\r\n{SetState('eddi_context_last_action', 'fire')}\r\n{SetState('eddi_context_crew_name', event.name)}\r\n\r\n{event.name} ya no es miembro de la tripulación.",
      "default": false,
      "name": "Crew fired",
      "description": "Triggered when you fire crew"
    },
    "Crew hired": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'crew')}\r\n{SetState('eddi_context_last_action', 'hire')}\r\n{SetState('eddi_context_crew_name', event.name)}\r\n\r\n{event.name} se ha unido a la tripulación.",
      "default": false,
      "name": "Crew hired",
      "description": "Triggered when you hire crew"
    },
    "Crew joined": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'crew')}\r\n{SetState('eddi_context_last_action', 'join')}\r\n{SetState('eddi_context_crew_name', event.captain)}\r\n\r\nTe has unido a la tripulación del comandante {slice (event.captain,10)}.",
      "default": false,
      "name": "Crew joined",
      "description": "Triggered when you join a crew"
    },
    "Crew left": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'crew')}\r\n{SetState('eddi_context_last_action', 'leave')}\r\n{SetState('eddi_context_crew_name', event.captain)}\r\n\r\nHa abandonado la tripulación del comandante {slice (event.captain,10)}.",
      "default": false,
      "name": "Crew left",
      "description": "Triggered when you leave a crew"
    },
    "Crew member joined": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'crew')}\r\n{SetState('eddi_context_last_action', 'join')}\r\n{SetState('eddi_context_crew_name', event.crew)}\r\n\r\nEl comandante {slice (event.crew,10)} se ha unido a su tripulación.",
      "default": false,
      "name": "Crew member joined",
      "description": "Triggered when a commander joins your crew"
    },
    "Crew member launched": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'crew')}\r\n{SetState('eddi_context_last_action', 'launch')}\r\n{SetState('eddi_context_crew_name', event.crew)}\r\n\r\n{event.crew} ha lanzado su caza..",
      "default": false,
      "name": "Crew member launched",
      "description": "Triggered when a crew member launches the fighter"
    },
    "Crew member left": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'crew')}\r\n{SetState('eddi_context_last_action', 'leave')}\r\n{SetState('eddi_context_crew_name', event.crew)}\r\n\r\nEl comandante {slice (event.crew,10)} ha abandonado su tripulación.",
      "default": false,
      "name": "Crew member left",
      "description": "Triggered when a commander leaves your crew"
    },
    "Crew member removed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'crew')}\r\n{SetState('eddi_context_last_action', 'remove')}\r\n{SetState('eddi_context_crew_name', event.crew)}\r\n\r\nHa expulsado al comandante {slice (event.crew,10)} de su tripulación.",
      "default": false,
      "name": "Crew member removed",
      "description": "Triggered when you remove a commander from your crew"
    },
    "Crew member role changed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'crew')}\r\n{SetState('eddi_context_last_action', 'role')}\r\n{SetState('eddi_context_crew_name', event.crew)}\r\n{SetState('eddi_context_crew_role', event.role)}\r\n\r\n{if event.role = 'Idle':\r\n    {event.crew} is no longer manning a position\r\n|elif event.role = 'Fighter':\r\n    {event.crew} is now manning the fighter\r\n|elif event.role = 'Gunner':\r\n    {event.crew} is now manning the guns\r\n}.\r\n",
      "default": true,
      "name": "Crew member role change",
      "description": "Triggered when a crew member changes their role"
    },
    "Crew role changed": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": "{if event.role = 'Gunner':\r\n  Entrando en modo artillero.\r\n|elif event.role = 'Fighter':\r\n  Entrando en modo piloto de caza.\r\n|elif event.role = 'Idle':\r\n  Ha sido desasignado del servicio activo.\r\n}",
      "default": false,
      "name": "Crew role changed",
      "description": "Triggered when your role in the crew changes"
    },
    "Damage check": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Track if there is any damage}\r\n{set damaged to 0}\r\n\r\n{_ Announce hull health}\r\n{if ship.health < 100:\r\n    Casco al  {ship.health}%.\r\n    {set damaged to 1}\r\n}\r\n\r\n{_ Announce critical module health}\r\n\r\n{set minordamage to []}\r\n{set majordamage to []}\r\n\r\n{if ship.powerplant.health < 60:\r\n    {set majordamage to cat(majordamage, [ship.powerplant])}\r\n|elif ship.powerplant.health < 100:\r\n    {set minordamage to cat(minordamage, [ship.powerplant])}\r\n}\r\n\r\n{if ship.thrusters.health < 60:\r\n    {set majordamage to cat(majordamage, [ship.thrusters])}\r\n|elif ship.thrusters.health < 100:\r\n    {set minordamage to cat(minordamage, [ship.thrusters])}\r\n}\r\n\r\n{if ship.frameshiftdrive.health < 60:\r\n    {set majordamage to cat(majordamage, [ship.frameshiftdrive])}\r\n|elif ship.frameshiftdrive.health < 100:\r\n    {set minordamage to cat(minordamage, [ship.frameshiftdrive])}\r\n}\r\n\r\n{if ship.powerdistributor.health < 60:\r\n    {set majordamage to cat(majordamage, [ship.powerdistributor])}\r\n|elif ship.powerdistributor.health < 100:\r\n    {set minordamage to cat(minordamage, [ship.powerdistributor])}\r\n}\r\n\r\n{if ship.lifesupport.health < 60:\r\n    {set majordamage to cat(majordamage, [ship.lifesupport])}\r\n|elif ship.lifesupport.health < 100:\r\n    {set minordamage to cat(minordamage, [ship.lifesupport])}\r\n}\r\n\r\n{if ship.sensors.health < 60:\r\n    {set majordamage to cat(majordamage, [ship.sensors])}\r\n|elif ship.sensors.health < 100:\r\n    {set minordamage to cat(minordamage, [ship.sensors])}\r\n}\r\n\r\n{if len(majordamage) > 0:\r\n    {set damaged to 1}\r\n    Daños graves en \r\n    {if len(majordamage) = 1:\r\n        {majordamage[0].name}\r\n    |elif len(majordamage) = 2:\r\n        {majordamage[0].name} y {majordamage[1].name}\r\n    |else:\r\n        {set cur to 0}\r\n        {while cur < len(majordamage):\r\n            {if cur = 0:\r\n                {majordamage[cur].name}\r\n            |elif cur < len(majordamage) - 1:\r\n                , {majordamage[cur].name}\r\n            |else:\r\n                ,y {majordamage[cur].name}\r\n            }\r\n            {set cur to cur + 1}\r\n        }\r\n    }.\r\n}\r\n\r\n{if len(minordamage) > 0:\r\n    {set damaged to 1}\r\n    Daños leves en \r\n    {if len(minordamage) = 1:\r\n        {minordamage[0].name}\r\n    |elif len(minordamage) = 2:\r\n        {minordamage[0].name} y {minordamage[1].name}\r\n    |else:\r\n        {set cur to 0}\r\n        {while cur < len(minordamage):\r\n            {if cur = 0:\r\n                {minordamage[cur].name}\r\n            |elif cur < len(minordamage) - 1:\r\n                , {minordamage[cur].name}\r\n            |else:\r\n                ,y {minordamage[cur].name}\r\n            }\r\n            {set cur to cur + 1}\r\n        }\r\n    }.\r\n}\r\n\r\n{_ Announce other module health}\r\n\r\n{set minordamage to []}\r\n{set majordamage to []}\r\n\r\n{for compartment in ship.compartments:\r\n    {if compartment.module.health < 60:\r\n        {set majordamage to cat(majordamage, [compartment.module.name])}\r\n    |elif hardpoint.module.health < 100:\r\n        {set minordamage to cat(minordamage, [compartment.module.name])}\r\n    }\r\n}\r\n\r\n{for hardpoint in ship.hardpoints:\r\n    {if hardpoint.module.health < 60:\r\n        {set majordamage to cat(majordamage, [hardpoint.module.name])}\r\n    |elif hardpoint.module.health < 100:\r\n        {set minordamage to cat(minordamage, [hardpiont.module.name])}\r\n    }\r\n}\r\n\r\n{if len(majordamage) > 0:\r\n    {set damaged to 1}\r\n    {if len(majordamage) = 1:\r\n       Otro componente de la nave con daños graves\r\n    |elif len(majordamage) > 1:\r\n        {len(majordamage)} otros componentes de la nave con daños graves\r\n    }\r\n    {if len(minordamage) = 1:\r\n       y otro componente de la nave con daños leves\r\n    |elif len(minordamage) > 1:\r\n       y {len(minordamage)} otro componente de la nave con daños leves\r\n    }.\r\n|elif len(minordamage) = 1:\r\n    {set damaged to 1}\r\n    Otro componente de la nave con daños leves.\r\n|elif len(minordamage) > 1:\r\n    {set damaged to 1}\r\n    {len(minordamage)} otros componentes de la nave con daños leves.\r\n}\r\n\r\n{if damaged = 0:\r\n    {OneOf(\"Todos los sistemas completamente operativos.\", \"La nave está completamente operativa.\", \"La nave no está dañada.\")}\r\n}\r\n",
      "default": false,
      "name": "Damage check",
      "description": "Check on the levels of damage to your ship"
    },
    "Data scanned": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Data scanned }\r\n{_ Triggered when scanning some types of data links }\r\n\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'scan')}\r\n{SetState('eddi_context_last_action', 'data')}\r\n{SetState('eddi_context_data_scan_type', event.datalinktype)}\r\n\r\nEl escaneo de {event.datalinktype} ha completado.",
      "default": false,
      "name": "Data scanned",
      "description": "Triggered when scanning some types of data links"
    },
    "Data voucher awarded": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Data voucher awarded }\r\n{_ Triggered when you are awarded a data voucher }\r\n\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'data_voucher')}\r\n{SetState('eddi_context_last_action', 'award')}\r\n{SetState('eddi_context_bond_amount', event.reward)}\r\n{SetState('eddi_context_bond_faction', event.payeefaction)}\r\n\r\nComprobación de datos concedidos en {event.payeefaction} por {event.reward} créditos.\r\n",
      "default": false,
      "name": "Data voucher awarded",
      "description": "Triggered when you are awarded a data voucher"
    },
    "Data voucher redeemed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'data_voucher')}\r\n{SetState('eddi_context_last_action', 'redeem')}\r\n{SetState('eddi_context_data_voucher_amount', event.amount)}\r\n\r\nDevengados {event.amount} créditos en vales de datos\r\n{Occasionally(2, \"\r\n  {if len(event.rewards) = 1:\r\n    por parte de la facción {event.rewards[0].faction}\r\n  |else:\r\n    por parte de \r\n    {set cur to 0}\r\n    {while cur < len(event.rewards):\r\n        {if cur = 0:\r\n        |elif cur < len(event.rewards) - 1:\r\n            , \r\n        |else:\r\n            y\r\n        }\r\n        {event.rewards[cur].faction}\r\n        {set cur to cur + 1}\r\n    }\r\n  }\r\n\")}.\r\n",
      "default": false,
      "name": "Data voucher redeemed",
      "description": "Triggered when you redeem a data voucher"
    },
    "Datalink message": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Datalink message",
      "description": "Triggered upon completion of Datalink scan"
    },
    "Died": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": "{if len(event.ships) > 0:\r\n\r\n    {set commanders to []}\r\n    {for cmdr in event.commanders:\r\n        {if find(cmdr, \"$ShipName\") >= 0:\r\n           {_ Ignore NPC ships _}        \r\n        |else: \r\n           {set commanders to cat(commanders, [cmdr])}\r\n        }\r\n    }\r\n\r\n    {ShipName()} has sido\r\n    {Occasionally(2, \"machacada y\")}\r\n    {OneOf(\"derrotada\", \"eliminada\", \"destruida, destrozada\")}\r\n\r\n    {if len(commanders) = 1:\r\n        por {commanders[0]} \r\n        en una {event.ships[0]} \r\n        con un nivel de combate {event.ratings[0]}.\r\n    |elif len(commanders) = 2:\r\n        por {commanders[0]} \r\n        en una {event.ships[0]} con un \r\n        nivel de combate {event.ratings[0]}, \r\n        y por {commanders[1]} \r\n        en una {event.ships[1]} con un \r\n        nivel de combate {event.ratings[1]}.\r\n    |elif len(commanders) > 2:\r\n        {set cur to 0}\r\n        por\r\n        {while cur < len(commanders):\r\n            {if cur = 0:\r\n                {commanders[cur]} \r\n                en una {event.ships[cur]} \r\n                con un nivel de combate {event.ratings[cur]}\r\n            |elif cur < len(commanders) - 1:\r\n                , {commanders[cur]} \r\n                en una{event.ships[cur]} \r\n                con un nivel de combate {event.ratings[cur]}\r\n            |else:\r\n                , y {commanders[cur]} \r\n                en una {event.ships[cur]} \r\n                con un nivel de combate {event.ratings[cur]}.\r\n            }\r\n            {set cur to cur + 1}\r\n        }\r\n    }\r\n}",
      "default": false,
      "name": "Died",
      "description": "Triggered when you have died"
    },
    "Docked": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": "{OneOf('Nave acoplada con éxito','Acoplamiento exitoso','Acoplamiento correcto','Acoplamiento finalizado con éxito')}.\r\n{Pause(2000)}\r\n\r\n{OneOf(\"Estableciendo enlace con \",\r\n             \"Inicializando enlace con \",\r\n             \"Conectando a \",\r\n             \"Accediendo a \")}\r\n{OneOf(\"red de datos\", \"red\", \"red de servicio\", \"sistema\", \"servicio\")}\r\n{OneOf(\"local\", \"de la estación\", \"de {event.station}\")}.\r\n\r\n{Pause(3000)}\r\n\r\n{OneOf(\"Enlace\", \"Enlace\", \"Acceso\", \"Acceso\")} {OneOf(\"establecido\", \"confirmado\", \"conseguido\", \"autorizado\")}.\r\n\r\n{F(\"Commodity sale check\")}\r\n\r\n{if ship.role = \"Multi-purpose\" || ship.role = \"Trading\":\r\n    {F(\"Commodity purchase check\")}\r\n}\r\n\r\n{F(\"Swapout check\")}\r\n\r\n{F(\"Limpet check\")}",
      "default": false,
      "name": "Docked",
      "description": "Triggered when your ship docks at a station or outpost"
    },
    "Docking cancelled": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Solicitud de aterrizaje cancelada.",
      "default": false,
      "name": "Docking cancelled",
      "description": "Triggered when your ship cancels a docking request at a station or outpost"
    },
    "Docking denied": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "\r\n{Pause(2000)}\r\n\r\n{OneOf('Hemos recibido una denegación del permiso de aterrizaje','Se nos ha denegado el permiso de aterrizaje','nos informan de que no pueden darnos permiso para aterrizar')}\r\n\r\n{if event.reason = \"ActiveFighter\":\r\n    porque nuestro caza está desplegado\r\n|elif event.reason = \"Distance\":\r\n    {OneOf('porque estamos demasiado lejos de la estación','Porque no hemos alcanzado la distancia mínima a la estación')}{OneOf (' ',' ','. Deberíamos acercarnos al menos a sietemil quinientos metros')}\r\n|elif event.reason = \"Hostile\":\r\n    {OneOf('porque a la facción que controla la estación no les gustamos','porque la facción que controla la estación nos considera hostiles')}\r\n|elif event.reason = \"NoSpace\":\r\n        {OneOf('porque no hay espacio disponible','porque todas las plataformas están ocupadas','porque no hay plataformas libres de tamaño adecuado para esta nave')}{OneOf (' ',' ','. Debemos esperar a que quede una plataforma libre')}\r\n|elif event.reason = \"Offences\":\r\n    porque hemos cometido una ofensa contra ellos recientemente\r\n|elif event.reason = \"TooLarge\":\r\n    porque no hay pistas de aterrizaje de tamaño suficiente para albergar esta nave\r\n} \r\n{OneOf (',comandante',',Áx-el',' ',' ')}\r\n.",
      "default": false,
      "name": "Docking denied",
      "description": "Triggered when your ship is denied docking at a station or outpost"
    },
    "Docking granted": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'landing pad')}\r\n{SetState('eddi_context_landing_pad_system', system.name)}\r\n{SetState('eddi_context_landing_pad_station', event.station)}\r\n{SetState('eddi_context_landing_pad_pad', event.landingpad)}\r\n\r\n{set station to StationDetails(event.station)}\r\n\r\n{if station.model = \"Coriolis Starport\" || station.model = \"Orbis Starport\" || station.model = \"Ocellus Starport\" || station.model = \"Unknown Starport\":\r\n    {Pause(8000)}\r\n    {F(\"Landing pad report\")}\r\n}\r\n",
      "default": false,
      "name": "Docking granted",
      "description": "Triggered when your ship is granted docking permission at a station or outpost"
    },
    "Docking requested": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Docking requested",
      "description": "Triggered when your ship requests docking at a station or outpost"
    },
    "Docking timed out": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{OneOf ('Comandante','Áx-el',' ')}, {OneOf ('No hemos recibido respuesta a nuestra solicitud de aterrizaje','la estación no ha respondido a nuestra solicitud de aterrizaje')}.",
      "default": false,
      "name": "Docking timed out",
      "description": "Triggered when your docking request times out"
    },
    "Empire promotion": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if event.rank = \"Knight\":\r\n    sir\r\n|elif event.rank = \"Lord\":\r\n    my lord\r\n|elif event.rank = \"Baron\":\r\n    my lord\r\n|elif event.rank = \"Viscount\":\r\n    my lord\r\n|elif event.rank = \"Count\":\r\n    my lord\r\n|elif event.rank = \"Earl\":\r\n    my lord\r\n|elif event.rank = \"Marquis\":\r\n    my lord\r\n|elif event.rank = \"Duke\":\r\n    your grace\r\n|elif event.rank = \"Prince\":\r\n    your royal highness\r\n|elif event.rank = \"King\":\r\n    your majesty\r\n|else:\r\n    commander\r\n},\r\nthe Empirial Navy has \r\n{OneOf(\"granted you a promotion\", \"promoted you\", \"advanced you\", \"named you\")}\r\nto the rank of\r\n{event.rank}\r\n{Occasionally(2, \"for your service to the Empire\")}.",
      "default": true,
      "name": "Empire promotion",
      "description": "Triggered when your rank increases with the Empire"
    },
    "Engineer progressed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{event.engineer} le ha dado acceso a planos de nivel {event.rank}.",
      "default": false,
      "name": "Engineer progressed",
      "description": "Triggered when you reach a new rank with an engineer"
    },
    "Entered CQC": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Entrando en combate CQC.",
      "default": false,
      "name": "Entered CQC",
      "description": "Triggered when you enter CQC"
    },
    "Entered normal space": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'fsd')}\r\n{SetState('eddi_context_last_action', 'disengage')}\r\n{SetState('eddi_context_system_name', event.system)}\r\n{SetState('eddi_context_body_name', event.body)}\r\n{SetState('eddi_context_body_system', event.system)}\r\n\r\n{Pause(5000)}\r\n\r\n{OneOf ('Comandante','Áx-el',' ')} hemos {OneOf(\"salido de velocidad de supercrucero \", \"{OneOf(\\\"entrado en\\\", \\\"regresado a\\\", \\\"vuelto a\\\")} espacio normal \")}\r\n\r\n{if event.bodytype = 'Planet':\r\n    {OneOf(\"cerca del\", \"al lado del\", \"a poca distancia del \")} planeta {event.body} \r\n|elif event.bodytype = 'Star':\r\n    {OneOf(\"cerca de la\", \"al lado de la\", \"a poca distancia de la \")} estrella {event.body} \r\n  |elif event.bodytype = 'Station':\r\n    {OneOf(\"cerca de \", \"al lado de \", \"a poca distancia de \")} {event.body} \r\n}\r\n.\r\n",
      "default": false,
      "name": "Entered normal space",
      "description": "Triggered when your ship enters normal space"
    },
    "Entered signal source": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Pause(2000)}\r\n\r\n{if event.threat < 2:\r\n  Entrando en fuente de señal.\r\n|elif event.threat = 2:\r\n    Precaución: fuente de señal de amenaza media.\r\n|elif event.threat = 3:\r\n    Cuidado: fuente de señal de amenaza alta.\r\n|else:\r\n    Alerta roja: fuente de señal de amenaza muy alta.\r\n}\r\n",
      "default": false,
      "name": "Entered signal source",
      "description": "Triggered when your ship enters a signal source"
    },
    "Entered supercruise": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'fsd')}\r\n{SetState('eddi_context_last_action', 'engage')}\r\n\r\n{Pause(1000)}\r\n\r\n{OneOf(' ',' ','Áx-el','Comandante')}, {OneOf ('Hemos  {OneOf(\"entrado en\", \"saltado a \")} velocidad de supercrucero  ','viajamos ahora a velocidad superior a la luz ','estamos viajando a velocidad superior a la luz ')}.\r\n\r\n",
      "default": false,
      "name": "Entered supercruise",
      "description": "Triggered when your ship enters supercruise"
    },
    "Exploration data purchased": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{OneOf(\"Adquiridos datos de {OneOf('sistema', 'exploración')} de {event.system}\",\r\n            \"datos de {OneOf('sistema', 'exploración')} de {event.system} ya disponibles\",\r\n            \"{Occasionally(3, 'la nave ha')} Recibido datos de {OneOf('sistema', 'exploración')} de {event.system} desde los servicios de la estación\",\r\n            \"Recepción de datos de {OneOf('sistema', 'exploración')} de {event.system} confirmada\")}.",
      "default": false,
      "name": "Exploration data purchased",
      "description": "Triggered when you purchase exploration data"
    },
    "Exploration data sold": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": "Datos de exploración de {len(event.systems)} sistemas vendidos por {event.reward} créditos\r\n\r\n{if len(event.firsts) > 0:\r\n    , con una bonificación adicional de {event.bonus} créditos por\r\n    {if len(event.firsts) = 1:\r\n        un primer descubrimiento\r\n    |else:\r\n        {len(event.firsts)} primeros descubrimientos\r\n    }\r\n}\r\n.",
      "default": false,
      "name": "Exploration data sold",
      "description": "Triggered when you sell exploration data"
    },
    "Exploration promotion": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Se han reconocido sus habilidades como explorador comandante.",
      "default": false,
      "name": "Exploration promotion",
      "description": "Triggered when your exploration rank increases"
    },
    "Federation promotion": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "The Federation Navy has \r\n{OneOf(\"granted you a promotion\", \"promoted you\", \"advanced you\")}\r\nto the rank of\r\n{event.rank}\r\n{Occasionally(2, \"for your service to the Federation\")}.",
      "default": true,
      "name": "Federation promotion",
      "description": "Triggered when your rank increases with the Federation"
    },
    "Fighter docked": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Caza {OneOf(\"embarcado\", \"acoplado\")} {Occasionally(2, \"en la nave\")}.",
      "default": false,
      "name": "Fighter docked",
      "description": "Triggered when you dock a fighter with your ship"
    },
    "Fighter launched": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": "Caza {OneOf(\"lanzado\", \"desacoplado\")} {Occasionally(2, \"de la nave\")}.",
      "default": false,
      "name": "Fighter launched",
      "description": "Triggered when you launch a fighter from your ship"
    },
    "File Header": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "File Header",
      "description": "Triggered when the file header is read"
    },
    "Fine incurred": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'fine')}\r\n{SetState('eddi_context_last_action', 'incur')}\r\n{SetState('eddi_context_fine_name', event.victim)}\r\n{SetState('eddi_context_fine_faction', event.faction)}\r\n{SetState('eddi_context_fine_amount', event.fine)}\r\n\r\n{OneOf('Comandante','Áx-el',' ',' ')},\r\n{OneOf ('Se nos ha impuesto una multa de {event.fine} créditos de la facción {event.faction}','la facción {event.faction} nos ha impuesto una multa de {event.fine} créditos')}\r\n.",
      "default": false,
      "name": "Fine incurred",
      "description": "Triggered when your incur a fine"
    },
    "Fine paid": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'fine')}\r\n{SetState('eddi_context_last_action', 'pay')}\r\n{SetState('eddi_context_fine_amount', event.amount)}\r\n\r\nMulta de {event.amount} créditos pagada correctamente.",
      "default": false,
      "name": "Fine paid",
      "description": "Triggered when you pay a fine"
    },
    "Friends status": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Set uselist to \"white\" or \"black\", depending on which list you want to use to filter people _}\r\n{_ \"white\" will only allow notifications from people in this list (e.g. \"User1\", \"User2\", & \"User3\") _}\r\n{_ \"black\" will allow all notification EXCEPT those on this list (e.g. \"User4\", \"User5\", & \"User6\") _}\r\n{_ to allow all notifications, you may also use an empty blacklist (i.e. \"set blacklist to []\" _}\r\n\r\n{set uselist to \"black\"}\r\n\r\n{set whitelist to [\"User1\", \"User2\", \"User3\"]}\r\n{set blacklist to [\"User4\", \"User5\", \"User6\"]}\r\n\r\n{if uselist = \"white\":\r\n    {if find(whitelist, event.friend) > -1:\r\n        {event.friend} está {event.status}.\r\n    }\r\n|elif uselist = \"black\":\r\n    {if find(blacklist, event.friend) = -1:\r\n        {event.friend} está {event.status}.\r\n    }\r\n}",
      "default": false,
      "name": "Friends status",
      "description": "Triggered when a friendly commander changes status"
    },
    "FSD engaged": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'jump')}\r\n{SetState('eddi_context_last_action', 'start')}\r\n{SetState('eddi_context_system_name', system.name)}\r\n{SetState('eddi_context_system_system', system.name)}\r\n\r\n{if event.target = 'Hyperspace':\r\n    {_ Rewrite context to represent a jump }\r\n    {SetState('eddi_context_last_subject', 'jump')}\r\n    {SetState('eddi_context_last_action', 'start')}\r\n\r\n    {set system to SystemDetails(event.system)}\r\n\r\n    {_ Wait for the FSD countdown and initial jump}\r\n    {Pause(6000)}\r\n\r\n    {OneOf(\"Destino confirmado\",\"Salto en progreso\",\"Telemetría obtenida\")}.\r\n    {OneOf(\"nos dirigimos a\", \"en ruta al sistema\", \"viajamos a\", \"en tránsito hacia\")} {system.name}.\r\n    {if system.name = homesystem.name:\r\n        Bienvenido a casa, {F(\"Honorific\")}\r\n    |else:\r\n        {if event.stellarclass = \"D\":\r\n            Precaución: Enana blanca detectada.\r\n        |elif event.stellarclass = \"N\":\r\n            Precaución: estrella de neutrones detectada.\r\n        |elif event.stellarclass = \"H\":\r\n            Precaución:  agujero negro detectado.\r\n        |elif event.stellarclass != 'F' && event.stellarclass != 'O' && event.stellarclass != 'G' && event.stellarclass != 'K' && event.stellarclass != 'B' && event.stellarclass != 'A' && event.stellarclass != 'M':\r\n            Información: la estrella destino no es adecuada para repostar.\r\n        }\r\n\r\n        {if lastsystem.allegiance && lastsystem.allegiance != \"None\" && lastsystem.allegiance != \"Independent\" && (!system.allegiance || system.allegiance = \"None\" || system.allegiance = \"Independent\"):\r\n            {OneOf(\"estamos abandonando el\", \"hemos dejado el\", \"ya no estamos en\")} {OneOf(\"territorio\",\"espacio\")} \r\n            {if lastsystem.allegiance = \"Empire\":\r\n              del imperio \r\n            |elif lastsystem.allegiance = \"Federation\":   \r\n              de la federación\r\n            |elif lastsystem.allegiance = \"Alliance\":\r\n              de la alianza\r\n        }.\r\n        |elif lastsystem.allegiance && lastsystem.allegiance != system.allegiance && system.allegiance && system.allegiance != \"None\":\r\n            {OneOf(\"Ahora estamos en\", \"hemos entrado en\", \"estamos entrando en el\")} {OneOf(\"territorio\",\"espacio\")}\r\n            {if system.allegiance = \"Empire\":\r\n              del imperio \r\n            |elif system.allegiance = \"Federation\":   \r\n              de la federación\r\n            |elif system.allegiance = \"Alliance\":   \r\n              de la alianza\r\n            |elif system.allegiance = \"Independent\":   \r\n              independiente\r\n            }.\r\n            {if cmdr.title != \"Commander\":\r\n                Bienvenido de nuevo {F(\"Honorific\")}.\r\n            }\r\n        }\r\n\r\n        {if system.visits = 0:\r\n            Es nuestra primera visita a este sistema\r\n        |elif system.visits = 1:\r\n            Es nuestra segunda visita a este sistema\r\n        |elif system.visits = 2:\r\n            Es nuestra tercera visita a este sistema\r\n        |elif system.visits = 3:\r\n            Es nuestra cuarta visita a este sistema\r\n        |else:\r\n            Hemos estado {system.visits} veces en este sistem\r\n        }.\r\n\r\n        {if !system.population:\r\n            {OneOf(\"Este sistema está despoblado\",\"No hay presencia humana aquí\", \"La raza humana no ha colonizado aun este sistema\")}.\r\n        |else:\r\n            {F(\"System report\")}\r\n        }\r\n\r\n        {if system.distancefromhome:\r\n            {Occasionally(7, \"{OneOf(\\\"Estamos a\\\", \\\"NUestra posición actual está a\\\", \\\"Ahora estamos a\\\")} {system.distancefromhome} años luz de {OneOf(\\\"casa\\\", \\\"{homesystem.name}\\\")}.\")}\r\n        }\r\n\r\n        {if system.comment:\r\n            Tiene {OneOf(\"establecida una nota\", \"establecido un comentario\", \"establecida una reseña\")} {OneOf(\"sobre\", \"acerca de\", \"en\")} este sistema.  {OneOf(\"dice lo siguiente\", \"pone lo siguiente\", \"es la siguiente\",\"dice así\")}, {system.comment}.\r\n        }\r\n    }\r\n}",
      "default": false,
      "name": "FSD engaged",
      "description": "Triggered when your FSD has engaged"
    },
    "Galnet latest news": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch category from state }\r\n{set articlecategory to state.article_category}\r\n\r\n{if articlecategory:\r\n    {set articles to GalnetNewsArticles(articlecategory)}\r\n|else:\r\n    {set articles to GalnetNewsArticles('Article')}\r\n}\r\n\r\n{if len(articles) = 0:\r\n    No hay noticias sin leer en esa categoría\r\n|else:\r\n    {set article to articles[0]}\r\n    {SetState('eddi_context_galnet_news_id', article.id)}\r\n    {article.title}: {article.content}\r\n    {GalnetNewsMarkRead(article.id)}\r\n}.\r\n",
      "default": false,
      "name": "Galnet latest news",
      "description": "Read the latest unread news in a given category"
    },
    "Galnet news": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch article from state }\r\n{set articleid to state.articleid}\r\n{if articleid:\r\n    {set article to GalnetNews(articleid)}\r\n\r\n    {_ Context }\r\n    {SetState('eddi_context_last_subject', 'news')}\r\n    {SetState('eddi_context_galnet_news_id', articleid)}\r\n}\r\n\r\n{if !article:\r\n    {_ Fetch from context }\r\n    {set article to GalnetNews(state.eddi_context_galnet_news_id)}\r\n}\r\n\r\n{if article:\r\n    {article.title}: {article.content}\r\n|else:\r\n    No tengo ninguna información sobre ese artículo\r\n}.\r\n\r\n",
      "default": false,
      "name": "Galnet news",
      "description": "Read a particular news article"
    },
    "Galnet news published": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": "{set statustitle to \"^(Galactic News: ((Weekly .*)|(Starport Status Update)))|(Powerplay: Incoming Update)\"}\r\n\r\n{if len(event.items) = 1:\r\n    Se ha publicado un nuevo artículo en Galnet titulado {event.items[0].title}.\r\n    {if !match(event.items[0].title, statustitle):\r\n      Dice así: {event.items[0].content}.\r\n    }\r\n|elif len(event.items) > 1:\r\n    Se han publicado {len(event.items)} nuevos artículos en Galnet.\r\n    {set item to 0}\r\n    {while item < len(event.items):\r\n        {if item = 0:\r\n            El primero se titula {event.items[item].title}\r\n            {if !match(event.items[item].title, statustitle):\r\n                , y dice así: {event.items[item].content}\r\n            }.\r\n        |elif item = 1:\r\n            El segundo se titula {event.items[item].title}\r\n            {if !match(event.items[item].title, statustitle):\r\n                , y dice así: {event.items[item].content}\r\n            }.\r\n        |elif item = len(event.items) - 1:\r\n            El último se titula {event.items[item].title}\r\n            {if !match(event.items[item].title, statustitle):\r\n                , y dice así: {event.items[item].content}\r\n            }.\r\n        |else:\r\n            El siguiente se titula {event.items[item].title}\r\n            {if !match(event.items[item].title, statustitle):\r\n                , y dice así: {event.items[item].content}\r\n            }.\r\n        }\r\n        {set item to item + 1}\r\n        {Pause(1000)}\r\n    }\r\n}",
      "default": false,
      "name": "Galnet news published",
      "description": "Triggered when news is published on Galnet"
    },
    "Galnet oldest news": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch category from state }\r\n{set articlecategory to state.article_category}\r\n\r\n{if articlecategory:\r\n    {set articles to GalnetNewsArticles(articlecategory)}\r\n|else:\r\n    {set articles to GalnetNewsArticles('Article')}\r\n}\r\n\r\n{if len(articles) = 0:\r\n    No hay noticias sin leer en esa categoría\r\n|else:\r\n    {set article to articles[len(articles)-1]}\r\n    {SetState('eddi_context_galnet_news_id', article.id)}\r\n    {article.title}: {article.content}\r\n    {GalnetNewsMarkRead(article.id)}\r\n}.\r\n",
      "default": false,
      "name": "Galnet oldest news",
      "description": "Read the oldest unread news in a given category"
    },
    "Galnet unread report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{set articles to GalnetNewsArticles(\"Article\")}\r\n\r\n{if len(articles) = 0:\r\n    No tiene noticias sin leer\r\n|elif len(articles) = 1:\r\n    Tiene una noticia sin leer\r\n|else:\r\n    Tiene {len(articles)} noticias sin leer\r\n}.",
      "default": false,
      "name": "Galnet unread report",
      "description": "Report on unread news"
    },
    "Heat damage": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Occasionally(2, \"Alarma:\")}\r\ndaño por calentamiento.",
      "default": false,
      "name": "Heat damage",
      "description": "Triggered when your ship is taking damage from excessive heat"
    },
    "Heat warning": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Occasionally(2, \"¡Cuidado!\")}\r\nNiveles de calentamiento subiendo por encima del límite tolerable.",
      "default": false,
      "name": "Heat warning",
      "description": "Triggered when your ship's heat exceeds 100%"
    },
    "Honorific": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{if system.allegiance = \"Empire\":\r\n    {if cmdr.empirerating.rank <= 4: \r\n       {OneOf ('comandante','Áx-el')}\r\n    |elif cmdr.empirerating.rank = 5:\r\n        sir\r\n    |elif cmdr.empirerating.rank <= 11:\r\n        milord\r\n    |elif cmdr.empirerating.rank = 12:\r\n        su excelencia\r\n    |elif cmdr.empirerating.rank = 13:\r\n        su alteza real\r\n    |elif cmdr.empirerating.rank = 14:\r\n        su majestad\r\n    }\r\n|elif system.allegiance = \"Federation\":\r\n    {if cmdr.federationrating.rank = 0:\r\n        comandante\r\n    |elif cmdr.federationrating.rank = 1:\r\n        recluta\r\n    |elif cmdr.federationrating.rank = 2:\r\n        cadete\r\n    |elif cmdr.federationrating.rank = 3:\r\n        guardiamarina\r\n    |elif cmdr.federationrating.rank = 4:\r\n        sargento\r\n    |elif cmdr.federationrating.rank = 5:\r\n        sargento primero\r\n    |elif cmdr.federationrating.rank = 6:\r\n        subteniente\r\n    |elif cmdr.federationrating.rank = 7:\r\n        Alférez de fragata\r\n    |elif cmdr.federationrating.rank = 8:\r\n        Teniente de navío\r\n    |elif cmdr.federationrating.rank = 9:\r\n        capitán de corbeta\r\n    |elif cmdr.federationrating.rank = 10:\r\n        capitán de fragata\r\n    |elif cmdr.federationrating.rank = 11:\r\n        capitán de navío\r\n    |elif cmdr.federationrating.rank = 12:\r\n        contraalmirante\r\n    |elif cmdr.federationrating.rank = 13:\r\n        vicealmirante\r\n    |elif cmdr.federationrating.rank = 14:\r\n        almirante\r\n    }\r\n|else:\r\n    {OneOf ('comandante','Áx-el')}\r\n}\r\n",
      "default": false,
      "name": "Honorific",
      "description": "Function to provide a suitable honorific for your commander"
    },
    "Hull damaged": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if event.vehicle = vehicle:\r\n    {if event.health < 40:\r\n        Alerta roja:\r\n    |elif event.health < 60:\r\n        Cuidado:\r\n    |elif event.health < 80:\r\n        Precaución:\r\n    }\r\n    {OneOf(\"Casco\", \"Integridad del casco\", \"Integridad\", \"Integridad estructural\")} al {event.health}%.\r\n}\r\n",
      "default": false,
      "name": "Hull damaged",
      "description": "Triggered when your hull is damaged to a certain extent"
    },
    "Insurance check": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{set insurance to round(ship.value * cmdr.insurance / 100)}\r\n\r\n{set covereds to round((cmdr.credits / insurance) - 0.5)}\r\n\r\n{if covereds = 0:\r\n Cuidado! No tiene suficientes créditos para cubrir la franquicia de su seguro. \r\n|elif covereds = 1:\r\n  Precaución: Solo tiene créditos suficientes para cubrir una sola franquicia del seguro.\r\n|elif covereds < 4:\r\n  Observación: Solo tiene créditos suficientes para cubrir {covereds} franquicias del seguro.\r\n}\r\n",
      "default": false,
      "name": "Insurance check",
      "description": "Check for enough credits to cover your insurance"
    },
    "Jumped": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": false,
      "name": "Jumped",
      "description": "Triggered when you complete a jump to another system"
    },
    "Jumping": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'jump')}\r\n{SetState('eddi_context_last_action', 'start')}\r\n{SetState('eddi_context_system_name', system.name)}\r\n{SetState('eddi_context_system_system', system.name)}\r\n\r\n{if state.altair_evitar_rollo_principio != 1\r\n{OneOf(\"Destino confirmado\",\"Salto en progreso\",\"Telemetría obtenida\")}.\r\n{OneOf(\"nos dirigimos a\", \"en ruta al sistema\", \"viajamos a\", \"en tránsito hacia\")} {system.name}.\r\n{if system.name = homesystem.name:\r\n    Bienvenido a casa, {F(\"Honorific\")}\r\n|else:\r\n    {if system.bodies[0].distance = 0 && system.bodies[0].stellarclass:\r\n        {set stellarclass to slice(system.bodies[0].stellarclass, 0, 1)}\r\n        {if stellarclass = \"D\":\r\n            Precaución: Enana blanca detectada.\r\n        |elif stellarclass = \"N\":\r\n            Precaución: estrella de neutrones detectada.\r\n        |elif stellarclass = \"H\":\r\n            Precaución:  agujero negro detectado.\r\n        }\r\n    }\r\n\r\n    {if lastsystem.allegiance && lastsystem.allegiance != \"None\" && lastsystem.allegiance != \"Independent\" && (!system.allegiance || system.allegiance = \"None\" || system.allegiance = \"Independent\"):\r\n      {OneOf(\"estamos abandonando el\", \"hemos dejado el\", \"ya no estamos en\")} {OneOf(\"territorio\",\"espacio\")}\r\n      {if lastsystem.allegiance = \"Empire\":\r\n         del imperio \r\n       |elif lastsystem.allegiance = \"Federation\":   \r\n          de la federación\r\n       |elif lastsystem.allegiance = \"Alliance\":\r\n          de la alianza\r\n       }.\r\n    |elif lastsystem.allegiance && lastsystem.allegiance != system.allegiance && system.allegiance && system.allegiance != \"None\":\r\n        {OneOf(\"Ahora estamos en\", \"hemos entrado en\", \"estamos entrando en el\")} {OneOf(\"territorio\",\"espacio\")}\r\n        {if system.allegiance = \"Empire\":\r\n          del imperio \r\n        |elif system.allegiance = \"Federation\":   \r\n           de la federación\r\n        |elif system.allegiance = \"Alliance\":   \r\n           de la alianza\r\n        |elif system.allegiance = \"Independent\":   \r\n           independiente\r\n        }.\r\n\r\n        {if cmdr.title != \"Commander\":\r\n            Bienvenido de nuevo {F(\"Honorific\")}.\r\n        }\r\n    }\r\n\r\n    {if system.visits = 1:\r\n        Es nuestra primera visita a este sistema\r\n    |elif system.visits = 2:\r\n        Es nuestra segunda visita a este sistema\r\n    |elif system.visits = 3:\r\n        Es nuestra tercera visita a este sistema\r\n    |elif system.visits = 4:\r\n        Es nuestra cuarta visita a este sistema\r\n    |else:\r\n        Hemos estado {system.visits} veces en este sistema\r\n    }.\r\n\r\n    {if !system.population:\r\n        {OneOf(\"Este sistema está despoblado\",\"No hay presencia humana aquí\", \"La raza humana no ha colonizado aun este sistema\")}.\r\n    |else:\r\n        {F(\"System report\")}\r\n    }\r\n\r\n    {if system.distancefromhome:\r\n        {Occasionally(7, \"{OneOf(\\\"Estamos a\\\", \\\"NUestra posición actual está a\\\", \\\"Ahora estamos a\\\")} {system.distancefromhome} años luz de {OneOf(\\\"casa\\\", \\\"{homesystem.name}\\\")}.\")}\r\n    }\r\n\r\n    {if system.comment:\r\n        Tiene {OneOf(\"establecida una nota\", \"establecido un comentario\", \"establecida una reseña\")} {OneOf(\"sobre\", \"acerca de\", \"en\")} este sistema.  {OneOf(\"dice lo siguiente\", \"pone lo siguiente\", \"es la siguiente\",\"dice así\")}, {system.comment}.\r\n    }\r\n}\r\n}\r\n{SetState(\"altair_evitar_rollo_principio\", 0)}",
      "default": false,
      "name": "Jumping",
      "description": "NO LONGER IN USE"
    },
    "Killed": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Killed",
      "description": "Triggered when you kill another player"
    },
    "Landing pad report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": " {set landingpad to state.eddi_context_landing_pad_pad}\r\n   \r\n    La pista de aterrizaje asignada número {landingpad} está a las\r\n    {if landingpad = 1:\r\n        seis en punto cerca de la entrada\r\n    |elif landingpad = 2:\r\n        seis en punto cerca de la entrada\r\n    |elif landingpad = 3:\r\n        seis en punto al fondo\r\n    |elif landingpad = 4:\r\n        seis en punto al fondo\r\n    |elif landingpad = 5:\r\n        siete en punto cerca de la entrada\r\n    |elif landingpad = 6:\r\n        siete en punto cerca de la entrada\r\n    |elif landingpad = 7:\r\n        siete en punto al fondo\r\n    |elif landingpad = 8:\r\n        siete en punto al fondo\r\n    |elif landingpad = 9:\r\n        ocho en punto cerca de la entrada\r\n    |elif landingpad = 10:\r\n        ocho en punto al fondo\r\n    |elif landingpad = 11:\r\n        nueve en punto cerca de la entrada\r\n    |elif landingpad = 12:\r\n        nueve en punto cerca de la entrada\r\n    |elif landingpad = 13:\r\n        nueve en punto en la zona central\r\n    |elif landingpad = 14:\r\n        nueve en punto al fondo\r\n    |elif landingpad = 15:\r\n        nueve en punto al fondo\r\n    |elif landingpad = 16:\r\n        diez en punto cerca de la entrada\r\n    |elif landingpad = 17:\r\n        diez en punto cerca de la entrada\r\n    |elif landingpad = 18:\r\n        diez en punto al fondo\r\n    |elif landingpad = 19:\r\n        diez en punto al fondo\r\n    |elif landingpad = 20:\r\n        once en punto cerca de la entrada\r\n    |elif landingpad = 21:\r\n        once en punto cerca de la entrada\r\n    |elif landingpad = 22:\r\n        once en punto al fondo\r\n    |elif landingpad = 23:\r\n        once en punto al fondo\r\n    |elif landingpad = 24:\r\n        doce en punto cerca de la entrada\r\n    |elif landingpad = 25:\r\n        doce en punto al fondo\r\n    |elif landingpad = 26:\r\n        una en punto cerca de la entrada\r\n    |elif landingpad = 27:\r\n        una en punto cerca de la entrada\r\n    |elif landingpad = 28:\r\n        una en punto en la zona central\r\n    |elif landingpad = 29:\r\n        una en punto al fondo\r\n    |elif landingpad = 30:\r\n        una en punto al fondo\r\n    |elif landingpad = 31:\r\n        dos en punto cerca de la entrada\r\n    |elif landingpad = 32:\r\n        dos en punto cerca de la entrada\r\n    |elif landingpad = 33:\r\n        dos en punto al fondo\r\n    |elif landingpad = 34:\r\n        dos en punto al fondo\r\n    |elif landingpad = 35:\r\n        tres en punto cerca de la entrada\r\n    |elif landingpad = 36:\r\n        tres en punto cerca de la entrada\r\n    |elif landingpad = 37:\r\n        tres en punto en la zona central\r\n    |elif landingpad = 38:\r\n        tres en punto al fondo\r\n    |elif landingpad = 39:\r\n        cuatro en punto cerca de la entrada\r\n    |elif landingpad = 40:\r\n        cuatro en punto al fondo\r\n    |elif landingpad = 41:\r\n        cinco en punto cerca de la entrada\r\n    |elif landingpad = 42:\r\n        cinco en punto cerca de la entrada\r\n    |elif landingpad = 43:\r\n        cinco en punto en la zona central\r\n    |elif landingpad = 44:\r\n        cinco en punto al fondo\r\n    |elif landingpad = 45:\r\n        cinco en punto al fondo\r\n    }\r\n    , entrando con las luces verdes a su derecha.\r\n",
      "default": false,
      "name": "Landing pad report",
      "description": "Report on the location of a landing pad"
    },
    "Liftoff": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": "{if event.playercontrolled = true:\r\n  Despegando.\r\n|else:\r\n  Enviando nave a órbita.\r\n}\r\n",
      "default": false,
      "name": "Liftoff",
      "description": "Triggered when your ship lifts off from a planet's surface"
    },
    "Limpet check": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{set  controllers to 0}\r\n{for compartment in ship.compartments:\r\n    {if find(compartment.module.name, \"Controller\") != -1:\r\n        {set controllers to controllers + 1}\r\n    }\r\n}\r\n\r\n{set limpets to 0}\r\n{for cargo in ship.cargo:\r\n    {if cargo.commodity.name = \"Limpet\":\r\n        {set limpets to limpets + cargo.amount}\r\n    }\r\n}\r\n{set tenpercent to ship.cargocapacity / 10 - 1}\r\n{if controllers > 0 && limpets = 0:\r\n    Aviso: llevamos un lanzador de drones pero no llevamos ningún dron.\r\n|elif controllers = 0 && limpets > 0:\r\n    transportamos drones pero no llevamos lanzador de drones.\r\n|elif controllers > 0 && limpets < tenpercent:\r\n    solo llevamos {limpets} drones a bordo; debería considerar el adquirir más.\r\n}\r\n",
      "default": false,
      "name": "Limpet check",
      "description": "Check for the presence/absence of limpets and limpet controllers"
    },
    "Limpet purchased": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": "{event.amount} limpet{if event.amount > 1:s}\r\n{Occasionally(2, \"have been\")}\r\nadded to \r\n{OneOf(\"our\", \"{ShipName()}'s\")}\r\n{OneOf(\"cargo hold\", \"inventory\", \"hold\")}",
      "default": true,
      "name": "Limpet purchased",
      "description": "Triggered when you buy limpets from a station"
    },
    "Limpet sold": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": "{event.amount} limpet{if event.amount > 1:s}\r\n{Occasionally(2, \"have been\")} sold.",
      "default": true,
      "name": "Limpet sold",
      "description": "Triggered when you sell limpets to a station"
    },
    "List launchbays": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{for launchbay in ship.launchbays:\r\n    You have a size {launchbay.size} {launchbay.type} hangar.\r\n    {for vehicle in launchbay.vehicles:\r\n        It has a {P(vehicle.name)} with {vehicle.loadout} load out\r\n\r\n        {if type(vehicle.mount) != null:\r\n            {if vehicle.mount = 'F':\r\n                , and fixed weapons\r\n            |elif vehicle.mount = 'G':\r\n                , and ghim balled weapons\r\n            }\r\n        }\r\n        .{_ full stop}\r\n\r\n        {if vehicle.rebuilds != null:\r\n            {if vehicle.rebuilds = 1:\r\n                It has one rebuild remaining.\r\n            |elif vehicle.rebuilds = 0:\r\n                It has no rebuilds remaining.\r\n            |else:\r\n                It has {vehicle.rebuilds} rebuilds remaining.\r\n            }\r\n        }\r\n\r\n        {Pause(500)}\r\n    }\r\n}\r\n",
      "default": true,
      "name": "List launchbays",
      "description": "Describes the contents of each launchbay in the ship"
    },
    "Location": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_system_name', event.system)}\r\n{SetState('eddi_context_body_name', event.body)}\r\n{SetState('eddi_context_body_system', event.system)}\r\n\r\nNos encontramos \r\n{if event.docked:\r\n    acoplados en la\r\n    {if event.station = event.body:\r\n        estación orbital {event.station}\r\n    |else:\r\n        estación planetaria {event.station} en {event.body}\r\n    }\r\n|elif event.body:\r\n    cerca de {event.body}\r\n}\r\nen el sistema {event.system}.\r\n\r\n",
      "default": false,
      "name": "Location",
      "description": "Triggered when the commander's location is reported, usually when they reload their game."
    },
    "Market information updated": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": false,
      "name": "Market information updated",
      "description": "Triggered when market information for the currently docked station has been updated"
    },
    "Material collected": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": false,
      "name": "Material collected",
      "description": "Triggered when you collect a material"
    },
    "Material discard report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Function to obtain a material from inventory}\r\n{set _inventory(required) to:\r\n    {for material in materials:\r\n        {if material.material = required:\r\n            {return material}\r\n        }\r\n    }\r\n}\r\n\r\n{_ Fetch material from state }\r\n{set material to state.material}\r\n{if material:\r\n    {_ Fetch full material details }\r\n    {set material to MaterialDetails(material)}\r\n\r\n    {_ Context }\r\n    {SetState('eddi_context_last_subject', 'material')}\r\n    {SetState('eddi_context_material_name', material.name)}\r\n}\r\n\r\n{if !material:\r\n    {_ Fetch from context }\r\n    {set material to MaterialDetails(state.eddi_context_material_name)}\r\n}\r\n\r\n{set inventory to _inventory(material.name)}\r\n\r\n\r\n{if inventory:\r\n    {if inventory.maximum && inventory.maximum < inventory.amount:\r\n        {set over to inventory.amount - inventory.maximum}\r\n        {if over > 1:\r\n            Puede deshacerse de {over} unidades de {SetState(\"altair_material\", inventory.material)}\r\n            {F(\"Altair materials\")} para alcanzar su máximo nivel.\r\n        |elif over = 1:\r\n            Puede deshacerse de 1 unidad de {SetState(\"altair_material\", inventory.material)}\r\n            {F(\"Altair materials\")} para alcanzar su máximo nivel.\r\n        }\r\n    |elif inventory.desired && inventory.desired < inventory.amount:\r\n        {set over to inventory.amount - inventory.desired}\r\n        {if over > 1:\r\n            Puede deshacerse de {over} unidades de {SetState(\"altair_material\", inventory.material)}\r\n            {F(\"Altair materials\")} para alcanzar el nivel deseado.\r\n        |elif over = 1:\r\n            Puede deshacerse de 1 unidad de {SetState(\"altair_material\", inventory.material)}\r\n            {F(\"Altair materials\")} para alcanzar el nivel deseado.\r\n        }\r\n    |elif inventory.desired:\r\n        Está por debajo del nivel deseado de {SetState(\"altair_material\", inventory.material)}\r\n            {F(\"Altair materials\")}.\r\n    |elif inventory.maximum:\r\n        Está por debajo del nivel máximo de {SetState(\"altair_material\", inventory.material)}\r\n            {F(\"Altair materials\")}.\r\n    |else:\r\n        No ha fijado ningún nivel para {SetState(\"altair_material\", inventory.material)}\r\n            {F(\"Altair materials\")}.\r\n    }\r\n}\r\n",
      "default": false,
      "name": "Material discard report",
      "description": "Report on how many of a material can be discarded"
    },
    "Material discarded": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": false,
      "name": "Material discarded",
      "description": "Triggered when you discard a material"
    },
    "Material discovered": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'material')}\r\n{SetState('eddi_context_last_action', 'discover')}\r\n{SetState('eddi_context_material_name', event.material)}\r\n\r\nNuevo material descubierto.",
      "default": false,
      "name": "Material discovered",
      "description": "Triggered when you discover a material"
    },
    "Material donated": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": false,
      "name": "Material donated",
      "description": "Triggered when you donate a material"
    },
    "Material inventory": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Material inventory",
      "description": "Triggered when you obtain an inventory of your current materials"
    },
    "Material inventory report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Function to obtain a material from inventory}\r\n{set _inventory(required) to:\r\n    {for material in materials:\r\n        {if material.material = required:\r\n            {return material}\r\n        }\r\n    }\r\n}\r\n\r\n{_ Fetch material from state }\r\n{set material to state.material}\r\n{if material:\r\n    {_ Fetch full material details }\r\n    {set material to MaterialDetails(material)}\r\n \r\n    {_ Context }\r\n    {SetState('eddi_context_last_subject', 'material')}\r\n    {SetState('eddi_context_last_subject', 'inventory')}\r\n    {SetState('eddi_context_material_name', material.name)}\r\n}\r\n\r\n{if !material:\r\n    {_ Fetch from context }\r\n    {set material to MaterialDetails(state.eddi_context_material_name)}\r\n}\r\n\r\n{set inventory to _inventory(material.name)}\r\n\r\n{if inventory && inventory.amount > 0:\r\n    {if inventory.amount = 1:\r\n       Tiene una unidad de {SetState(\"altair_material\", inventory.material)}\r\n            {F(\"Altair materials\")} a bordo.\r\n    |else:\r\n       Tiene {inventory.amount} unidades de {SetState(\"altair_material\", inventory.material)}\r\n            {F(\"Altair materials\")} a bordo.\r\n    }\r\n|else:\r\n    No tiene {SetState(\"altair_material\", inventory.material)}\r\n            {F(\"Altair materials\")} a bordo.\r\n}\r\n",
      "default": false,
      "name": "Material inventory report",
      "description": "Report on how many of a material are on-board"
    },
    "Material location report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch material from state }\r\n{set material to state.material}\r\n{if material:\r\n    {_ Fetch full material details }\r\n    {set material to MaterialDetails(material)}\r\n\r\n    {_ Context }\r\n    {SetState('eddi_context_last_subject', 'material')}\r\n    {SetState('eddi_context_material_name', material.name)}\r\n}\r\n\r\n{if !material:\r\n    {_ Fetch from context }\r\n    {set material to MaterialDetails(state.eddi_context_material_name)}\r\n}\r\n\r\n{if material.name:\r\n    {if material.location:\r\n        {SetState(\"altair_material\", material.name)}\r\n            {F(\"Altair materials\")} puede encontrarse en {material.location}\r\n    |else:\r\n        No hay información disponible sobre donde encontrar {SetState(\"altair_material\", material.name)}\r\n            {F(\"Altair materials\")}\r\n    }\r\n|else:\r\n    No tengo ninguna información acerca de ese material.\r\n}.\r\n",
      "default": false,
      "name": "Material location report",
      "description": "Report on the where to obtain a particular material"
    },
    "Material required report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Function to obtain a material from inventory}\r\n{set _inventory(required) to:\r\n    {for material in materials:\r\n        {if material.material = required:\r\n            {return material}\r\n        }\r\n    }\r\n}\r\n\r\n{_ Fetch material from state }\r\n{set material to state.material}\r\n{if material:\r\n    {_ Fetch full material details }\r\n    {set material to MaterialDetails(material)}\r\n\r\n    {_ Context }\r\n    {SetState('eddi_context_last_subject', 'material')}\r\n    {SetState('eddi_context_material_name', material.name)}\r\n}\r\n\r\n{if !material:\r\n    {_ Fetch from context }\r\n    {set material to MaterialDetails(state.eddi_context_material_name)}\r\n}\r\n\r\n{set inventory to _inventory(material.name)}\r\n\r\n\r\n{if inventory:\r\n    {if inventory.minimum && inventory.minimum > inventory.amount:\r\n        {set under to inventory.minimum - inventory.amount}\r\n        {if under > 1:\r\n            Necesita {under} unidades de {SetState(\"altair_material\", inventory.material)}\r\n            {F(\"Altair materials\")} para alcanzar el nivel mínimo.\r\n        |elif under = 1:\r\n            Necesita 1 unidad de {SetState(\"altair_material\", inventory.material)}\r\n            {F(\"Altair materials\")} para alcanzar el nivel mínimo.\r\n        }\r\n    |elif inventory.desired && inventory.desired > inventory.amount:\r\n        {set under to inventory.desired - inventory.amount}\r\n        {if under > 1:\r\n            Necesita {under} unidades de {SetState(\"altair_material\", inventory.material)}\r\n            {F(\"Altair materials\")} Para alcanzar el nivel deseado.\r\n        |elif under = 1:\r\n            Necesita 1 unidad de {SetState(\"altair_material\", inventory.material)}\r\n            {F(\"Altair materials\")} para alcanzar el nivel deseado.\r\n        }\r\n    |elif inventory.desired:\r\n        Está por encima del nivel deseado de {SetState(\"altair_material\", inventory.material)}\r\n            {F(\"Altair materials\")}.\r\n    |elif inventory.minimum :\r\n        Está por encima del nivel mínimo de {SetState(\"altair_material\", inventory.material)}\r\n            {F(\"Altair materials\")}.\r\n    |else:\r\n        No ha fijado ningún nivel para {SetState(\"altair_material\", inventory.material)}\r\n            {F(\"Altair materials\")}.\r\n    }\r\n}\r\n\r\n",
      "default": false,
      "name": "Material required report",
      "description": "Report on how many of a material are required to reach 'desired' level"
    },
    "Material threshold": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if event.level = 'Minimum':\r\n    {_ Gone below the minimum level }\r\n    {OneOf(\"el suministro\", \"el estock\", \"la cantidad almacenada\")} de {SetState(\"altair_material\", event.material.name)}\r\n            {F(\"Altair materials\")} ha bajado por debajo del mínimo fijado.\r\n|elif event.level = 'Maximum':\r\n  {_ Gone above the maximum level }\r\n    {OneOf(\"el suministro\", \"el estock\", \"la cantidad almacenada\")} de {SetState(\"altair_material\", event.material.name)}\r\n            {F(\"Altair materials\")} ha aumentado por encima del máximo fijado.\r\n|else:\r\n    {_ Moved around the desired level }\r\n    {if event.change = 'Increase':\r\n        Ha alcanzado el nivel deseado de {SetState(\"altair_material\", event.material.name)}\r\n            {F(\"Altair materials\")}.\r\n    |else:\r\n        Está por debajo del nivel deseado de {SetState(\"altair_material\", event.material.name)}\r\n            {F(\"Altair materials\")}.\r\n    }\r\n}\r\n\r\n{OneOf(\"La cantidad almacenada es de {event.amount}\",\r\n       \"Actualmente transportamos {event.amount}\",\r\n       \"{event.amount} a bordo\")}.",
      "default": false,
      "name": "Material threshold",
      "description": "Triggered when a material reaches a threshold"
    },
    "Material use report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch material from state }\r\n{set material to state.material}\r\n{if material:\r\n    {_ Fetch full material details }\r\n    {set material to MaterialDetails(material)}\r\n\r\n    {_ Context }\r\n    {SetState('eddi_context_last_subject', 'material')}\r\n    {SetState('eddi_context_material_name', material.name)}\r\n}\r\n\r\n{if !material:\r\n    {_ Fetch from context }\r\n    {set material to MaterialDetails(state.eddi_context_material_name)}\r\n}\r\n\r\n{if material && material.name:\r\n    {set uses to len(material.blueprints)}\r\n    {if slice(material.name, len(material.name)-1) = 's':\r\n        {set plural to 'son'}\r\n    |else:\r\n        {set plural to 'es'}\r\n    }\r\n    {if uses = 0:\r\n      {SetState(\"altair_material\", material.name)}\r\n            {F(\"Altair materials\")} no es necesario para ningún plano\r\n    |elif uses = 1:\r\n        {set name to cat(material.blueprints[0].name, material.blueprints[0].modulename, 'grade', material.blueprints[0].grade)}\r\n        {SetState(\"altair_material\", material.name)}\r\n            {F(\"Altair materials\")} se usa para el plano {name} \r\n    |elif uses = 2:\r\n        {set name0 to cat(material.blueprints[0].name, material.blueprints[0].modulename, 'grade', material.blueprints[0].grade)}\r\n        {set name1 to cat(material.blueprints[1].name, material.blueprints[1].modulename, 'grade', material.blueprints[1].grade)}\r\n        {SetState(\"altair_material\", material.name)}\r\n            {F(\"Altair materials\")} se usa para los planos {name0} y {name1} \r\n    |else:\r\n        {SetState(\"altair_material\", material.name)}\r\n            {F(\"Altair materials\")} se usa para los planos {len(material.blueprints)}.  Estos son \r\n        {set cur to 0}\r\n        {while cur < len(material.blueprints):\r\n            {set name to cat(material.blueprints[cur].name, material.blueprints[cur].modulename, 'grade', material.blueprints[cur].grade)}\r\n            {if cur = 0:\r\n                {name}\r\n            |elif cur < len(material.blueprints) - 1:\r\n                , {name}\r\n            |else:\r\n                , y {name}\r\n            }\r\n            {set cur to cur + 1}\r\n        }\r\n    }\r\n|else:\r\n    No tengo ninguna información sobre ese material\r\n}.\r\n",
      "default": false,
      "name": "Material use report",
      "description": "Report on the use of a material"
    },
    "Materials discard report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "\r\n{_ Find those that are above maximum, desired and minimum}\r\n{set shoulddiscardmaterials to []}\r\n{set coulddiscardmaterials to []}\r\n{set lastdiscardmaterials to []}\r\n\r\n{for material in materials:\r\n    {if material.maximum && material.amount > material.maximum:\r\n      {set shoulddiscardmaterials to cat(shoulddiscardmaterials, [material])}\r\n    |elif material.desired && material.amount > material.desired:\r\n      {set coulddiscardmaterials to cat(coulddiscardmaterials, [material])}\r\n    |elif material.minimum && material.amount > material.minimum:\r\n      {set lastdiscardmaterials to cat(lastdiscardmaterials, [material])}\r\n    }\r\n}\r\n\r\n{if len(shoulddiscardmaterials) > 0:\r\n    Está por encimadel máximo de {if len(shoulddiscardmaterials) = 1: 1 material |else: {len(shoulddiscardmaterials)} materiales}.  Puede deshacerse de \r\n    {if len(shoulddiscardmaterials) = 1:\r\n        {shoulddiscardmaterials[0].amount - shoulddiscardmaterials[0].maximum} {SetState(\"altair_material\", shoulddiscardmaterials[0].material)}\r\n            {F(\"Altair materials\")}\r\n    |elif len(shoulddiscardmaterials) = 2:\r\n        {shoulddiscardmaterials[0].amount - shoulddiscardmaterials[0].maximum} {SetState(\"altair_material\", shoulddiscardmaterials[0].material)}\r\n            {F(\"Altair materials\")} y {shoulddiscardmaterials[1].amount - shoulddiscardmaterials[1].maximum} {SetState(\"altair_material\", shoulddiscardmaterials[1].material)}\r\n            {F(\"Altair materials\")}\r\n    |else:\r\n        {set cur to 0}\r\n        {while cur < len(shoulddiscardmaterials):\r\n            {if cur = 0:\r\n                {shoulddiscardmaterials[cur].amount - shoulddiscardmaterials[cur].maximum} {SetState(\"altair_material\", shoulddiscardmaterials[cur].material)}\r\n            {F(\"Altair materials\")}\r\n            |elif cur < len(shoulddiscardmaterials) - 1:\r\n                , {shoulddiscardmaterials[cur].amount - shoulddiscardmaterials[cur].maximum} {SetState(\"altair_material\", shoulddiscardmaterials[cur].material)}\r\n            {F(\"Altair materials\")}\r\n            |else:\r\n                , y {shoulddiscardmaterials[cur].amount - shoulddiscardmaterials[cur].maximum} {SetState(\"altair_material\", shoulddiscardmaterials[cur].material)}\r\n            {F(\"Altair materials\")}\r\n            }\r\n            {set cur to cur + 1}\r\n        }\r\n    }.\r\n|elif len(coulddiscardmaterials) > 0:\r\n    Está por encima del nivel deseado de {if len(coulddiscardmaterials) = 1: 1 material |else: {len(coulddiscardmaterials)} materiales}.  Puede deshacerse de\r\n    {if len(coulddiscardmaterials) = 1:\r\n        {coulddiscardmaterials[0].amount - coulddiscardmaterials[0].desired} {SetState(\"altair_material\", coulddiscardmaterials[0].material)}\r\n            {F(\"Altair materials\")}\r\n    |elif len(coulddiscardmaterials) = 2:\r\n        {coulddiscardmaterials[0].amount - coulddiscardmaterials[0].desired} {SetState(\"altair_material\", coulddiscardmaterials[0].material)}\r\n            {F(\"Altair materials\")} y {coulddiscardmaterials[1].amount - coulddiscardmaterials[1].desired} {SetState(\"altair_material\", coulddiscardmaterials[1].material)}\r\n            {F(\"Altair materials\")}\r\n    |else:\r\n        {set cur to 0}\r\n        {while cur < len(coulddiscardmaterials):\r\n            {if cur = 0:\r\n                {coulddiscardmaterials[cur].amount - coulddiscardmaterials[cur].desired} {SetState(\"altair_material\", coulddiscardmaterials[cur].material)}\r\n            {F(\"Altair materials\")}\r\n            |elif cur < len(coulddiscardmaterials) - 1:\r\n                , {coulddiscardmaterials[cur].amount - coulddiscardmaterials[cur].desired} {SetState(\"altair_material\", coulddiscardmaterials[cur].material)}\r\n            {F(\"Altair materials\")}\r\n            |else:\r\n                , y {coulddiscardmaterials[cur].amount - coulddiscardmaterials[cur].desired} {SetState(\"altair_material\", coulddiscardmaterials[cur].material)}\r\n            {F(\"Altair materials\")}\r\n            }\r\n            {set cur to cur + 1}\r\n        }\r\n    }.\r\n|elif len(lastdiscardmaterials) > 0:\r\n    Está por encima del nivel mínimo de {if len(lastdiscardmaterials) = 1: 1 material |else: {len(lastdiscardmaterials)} materiales}.  Puede deshacerse de \r\n    {if len(lastdiscardmaterials) = 1:\r\n        {lastdiscardmaterials[0].amount - lastdiscardmaterials[0].minimum} {SetState(\"altair_material\", lastdiscardmaterials[0].material)}\r\n            {F(\"Altair materials\")}\r\n    |elif len(lastdiscardmaterials) = 2:\r\n        {lastdiscardmaterials[0].amount - lastdiscardmaterials[0].minimum} {SetState(\"altair_material\", lastdiscardmaterials[0].material)}\r\n            {F(\"Altair materials\")} y {lastdiscardmaterials[1].amount - lastdiscardmaterials[1].minimum} {SetState(\"altair_material\", lastdiscardmaterials[1].material)}\r\n            {F(\"Altair materials\")}\r\n    |else:\r\n        {set cur to 0}\r\n        {while cur < len(lastdiscardmaterials):\r\n            {if cur = 0:\r\n                {lastdiscardmaterials[cur].amount - lastdiscardmaterials[cur].minimum} {SetState(\"altair_material\", lastdiscardmaterials[cur].material)}\r\n            {F(\"Altair materials\")}\r\n            |elif cur < len(lastdiscardmaterials) - 1:\r\n                , {lastdiscardmaterials[cur].amount - lastdiscardmaterials[cur].minimum} {SetState(\"altair_material\", lastdiscardmaterials[cur].material)}\r\n            {F(\"Altair materials\")}\r\n            |else:\r\n                , y {lastdiscardmaterials[cur].amount - lastdiscardmaterials[cur].minimum} {SetState(\"altair_material\", lastdiscardmaterials[cur].material)}\r\n            {F(\"Altair materials\")}\r\n            }\r\n            {set cur to cur + 1}\r\n        }\r\n    }.\r\n|else:\r\n    Ningún material puede ser eliminado manteniendo los niveles mínimos.\r\n}\r\n",
      "default": false,
      "name": "Materials discard report",
      "description": "Report on which materials can be discarded"
    },
    "Materials required report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{set required to []}\r\n\r\n{for material in materials:\r\n  {if material.desired && material.amount < material.desired:\r\n    {set required to cat(required, [material])}\r\n }\r\n}\r\n\r\n{if len(required) > 0:\r\n    Necesita \r\n    {if len(required) = 1:\r\n        {required[0].desired - required[0].amount} {SetState(\"altair_material\", required[0].material)}\r\n            {F(\"Altair materials\")}\r\n    |elif len(required) = 2:\r\n        {required[0].desired - required[0].amount} {SetState(\"altair_material\", required[0].material)}\r\n            {F(\"Altair materials\")} y {required[1].desired - required[1].amount} {SetState(\"altair_material\", required[1].material)}\r\n            {F(\"Altair materials\")}\r\n    |else:\r\n        {set cur to 0}\r\n        {while cur < len(required):\r\n            {if cur = 0:\r\n                {required[cur].desired - required[cur].amount} {SetState(\"altair_material\", required[cur].material)}\r\n            {F(\"Altair materials\")}\r\n            |elif cur < len(required) - 1:\r\n                , {required[cur].desired - required[cur].amount} {SetState(\"altair_material\", required[cur].material)}\r\n            {F(\"Altair materials\")}\r\n            |else:\r\n                , y {required[cur].desired - required[cur].amount} {SetState(\"altair_material\", required[cur].material)}\r\n            {F(\"Altair materials\")}\r\n            }\r\n            {set cur to cur + 1}\r\n        }\r\n    }.\r\n|else:\r\n    Tiene todos los materiales deseados.\r\n}",
      "default": false,
      "name": "Materials required report",
      "description": "Report on how many of each material are required to reach 'desired' level"
    },
    "Message received": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'message')}\r\n{SetState('eddi_context_last_action', 'receive')}\r\n{SetState('eddi_context_message_name', event.from)}\r\n{SetState('eddi_context_message_content', event.message)}\r\n\r\n{if event.message = \"o7\":\r\n  El comandante {event.from}\r\n  {if event.channel = \"player\":\r\n        te\r\n    }\r\n     manda saludos.\r\n|else:\r\n    {if event.channel = \"player\":\r\n      Mensaje recibido del comandante {event.from}.  Dice así: {event.message}.\r\n    }\r\n}\r\n",
      "default": false,
      "name": "Message received",
      "description": "Triggered when you receive a message"
    },
    "Message sent": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'message')}\r\n{SetState('eddi_context_last_action', 'send')}\r\n{SetState('eddi_context_message_name', event.to)}\r\n{SetState('eddi_context_message_content', event.message)}\r\n\r\n{OneOf(\"Mensaje fuera\", \"mensaje enviado\", \"enviado\")}.",
      "default": false,
      "name": "Message sent",
      "description": "Triggered when you send a message"
    },
    "Mission abandoned": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": "Misión abandonada.",
      "default": false,
      "name": "Mission abandoned",
      "description": "Triggered when you abandon a mission"
    },
    "Mission accepted": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": "{if event.communal:\r\n    Objetivo de la comunidad aceptado.\r\n|else:\r\n    Misión para la facción {event.faction} aceptada.\r\n    {if event.passengerswanted:\r\n        {set wanteddescription to OneOf(\"pasajeros buscados\", \"conocidos criminales\", \"criminales buscados\")}\r\n        Precaución: {OneOf(\"Estamos transportando {wanteddescription}\",\"{wanteddescription} a bordo.\")}.\r\n    }\r\n}",
      "default": false,
      "name": "Mission accepted",
      "description": "Triggered when you accept a mission"
    },
    "Mission completed": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": "\r\n{commodityreward.commodity}\r\n{if event.reward > 0:\r\n    Pago de {event.reward} créditos {Occasionally(2, 'de la facción {event.faction}')} {OneOf('recibido.', 'confirmado.')}.\r\n|elif event.donation > 0:\r\n    {OneOf(\"Efectuada donación de {Occasionally(2, '{event.donation} créditos')} a {Occasionally(2, 'los agradecidos miembros de ')} {event.faction}\",\r\n                 \"{event.faction} ha recibido {Occasionally(2, 'gratamente')} su donativo {Occasionally(2, 'de {event.donation} créditos')}\",\r\n                 \"{event.faction} le agradece su donativo {Occasionally(2, 'de {event.donation} créditos')}\"\r\n    )}.\r\n|else:\r\n    Misión completada.\r\n}\r\n{for commodityreward in event.commodityrewards:\r\n  {SetState(\"altair_commodity\", commodityreward.commodity)}\r\n  {commodityreward.amount} toneladas de {F(\"Altair commodities\")} {OneOf(\"a bordo\", \"recibidas también\", \"confirmadas a bordo\")}.\r\n}",
      "default": false,
      "name": "Mission completed",
      "description": "Triggered when you complete a mission"
    },
    "Mission failed": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Mission failed",
      "description": "Triggered when you fail a mission"
    },
    "Mission redirected": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Misión redirigida de\r\n{if event.olddestinationstation:\r\n   {event.olddestinationstation} en {event.olddestinationsystem} \r\n   hacia {event.newdestinationstation} en {event.newdestinationsystem}\r\n|else:\r\n   {event.olddestinationsystem} a {event.newdestinationsystem}\r\n}",
      "default": false,
      "name": "Mission redirected",
      "description": "Triggered when a mission is redirected"
    },
    "Modification applied": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Modification applied",
      "description": "Triggered when you apply a modification to a module"
    },
    "Modification crafted": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Modification crafted",
      "description": "Triggered when you craft a modification to a module"
    },
    "Module purchased": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Has adquirido un {event.buymodule.name} de clase {event.buymodule.class}-{event.buymodule.grade}\r\n\r\n{if type(event.buymodule.mount) != \"void\":\r\n    {for index, value in event.buymodule.mount: {set mount to value}}\r\n    {if mount = 0:\r\n        de tipo fijo\r\n    |elif mount = 1:\r\n        de tipo asistido\r\n    |elif mount = 2:\r\n        de tipo torreta\r\n    }\r\n},\r\n por {event.buyprice} créditos\r\n\r\n{if type(event.sellmodule) != \"void\":\r\n    , y vendido uno de calidad {event.sellmodule.class}-{event.sellmodule.grade}\r\n\r\n    {if type(event.sellmodule.mount) != \"void\":\r\n        {for index, value in event.sellmodule.mount: {set mount to value}}\r\n        {if mount = 0:\r\n            de tipo fijo\r\n        |elif mount = 1:\r\n            de tipo asistido\r\n       |elif mount = 2:\r\n            tipo torreta\r\n        }\r\n    }, \r\n    por {event.sellprice} créditos\r\n\r\n|elif type(event.storedmodule) != \"void\":\r\n    , y almacenado uno de clase {event.storedmodule.class}-{event.sellmodule.grade},\r\n\r\n    {if type(event.storedmodule.mount) != \"void\":\r\n        {for index, value in event.storedmodule.mount: {set mount to value}}\r\n        {if mount = 0:\r\n            de tipo fijo\r\n        |elif mount = 1:\r\n            de tipo asistido\r\n       |elif mount = 2:\r\n             tipo torreta\r\n        }\r\n    }\r\n    {event.storedmodule.name}\r\n}\r\n\r\n\r\n",
      "default": false,
      "name": "Module purchased",
      "description": "Triggered when you purchase a module in outfitting"
    },
    "Module retrieved": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Has recuperado un {event.module.name} de clase {event.module.class}-{event.module.grade}\r\n\r\n{if type(event.module.mount) != \"void\":\r\n    {for index, value in event.module.mount: {set mount to value}}\r\n    {if mount = 0:\r\n        tipo fijo\r\n    |elif mount = 1:\r\n        tipo asistido\r\n    |elif mount = 2:\r\n        tipo torreta\r\n    }\r\n}\r\n\r\n del almacén,\r\n\r\n{if type(event.swapoutmodule) != \"void\":\r\n    y almacenado un {event.swapoutmodule.name} de clase{event.swapoutmodule.class}-{event.swapoutmodule.grade}\r\n\r\n    {if type(event.swapoutmodule.mount) != \"void\":\r\n        {for index, value in event.swapoutmodule.mount: {set mount to value}}\r\n        {if mount = 0:\r\n            fijo\r\n        |elif mount = 1:\r\n            asistido\r\n       |elif mount = 2:\r\n            torreta\r\n        }\r\n    }\r\n    \r\n},\r\n\r\n{if type(event.cost) != \"void\": por un coste de {event.cost} créditos}\r\n",
      "default": false,
      "name": "Module retrieved",
      "description": "Triggered when you fetch a previously stored module"
    },
    "Module sold": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Has vendido un {event.module.name} de clase {event.module.class} {event.module.grade},\r\n\r\n{if type(event.module.mount) != \"void\":\r\n    {for index, value in event.module.mount: {set mount to value}}\r\n    {if mount = 0:\r\n        fijo\r\n    |elif mount = 1:\r\n        asistido\r\n    |elif mount = 2:\r\n        torreta\r\n    }\r\n}\r\n\r\n por {event.price} créditos.",
      "default": false,
      "name": "Module sold",
      "description": "Triggered when selling a module to outfitting"
    },
    "Module sold from storage": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "You have sold a {event.module.class}-{event.module.grade},\r\n\r\n{if type(event.module.mount) != \"void\":\r\n    {for index, value in event.module.mount: {set mount to value}}\r\n    {if mount = 0:\r\n        fixed\r\n    |elif mount = 1:\r\n        giimballed\r\n    |elif mount = 2:\r\n        turreted\r\n    }\r\n}\r\n\r\n{event.module.name} from your stores for {event.price} credits.",
      "default": true,
      "name": "Module sold from storage",
      "description": "Triggered when selling a module from storage"
    },
    "Module sold remote": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Has vendido un {event.module.name}\r\n\r\n{if type(event.module.mount) != \"void\":\r\n    {for index, value in event.module.mount: {set mount to value}}\r\n    {if mount = 0:\r\n        fijo\r\n    |elif mount = 1:\r\n        asistido\r\n    |elif mount = 2:\r\n        torreta\r\n    }\r\n}\r\n\r\nde clase {event.module.class} -{event.module.grade},\r\n\r\nde tus almacenes, por {event.price} créditos.",
      "default": false,
      "name": "Module sold remote",
      "description": "Triggered when selling a module in storage at another station"
    },
    "Module stored": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Has almacenado un {event.module.name} de clase {event.module.class}-{event.module.grade}\r\n\r\n{if type(event.module.mount) != \"void\":\r\n    {for index, value in event.module.mount: {set mount to value}}\r\n    {if mount = 0:\r\n        fijo\r\n    |elif mount = 1:\r\n        asistido\r\n    |elif mount = 2:\r\n        torreta\r\n    }\r\n},\r\n\r\n\r\n\r\n{if type(event.cost) = \"void\": . |else: por un coste de {event.cost} créditos.}",
      "default": false,
      "name": "Module stored",
      "description": "Triggered when you store a module"
    },
    "Module swapped": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Has intercambiado las posiciones de un {event.frommodule.name} de clase {event.frommodule.class}-{event.frommodule.grade}\r\n\r\n{if type(event.frommodule.mount) != \"void\":\r\n    {for index, value in event.frommodule.mount: {set mount to value}}\r\n    {if mount = 0:\r\n        fijo\r\n    |elif mount = 1:\r\n        asistido\r\n    |elif mount = 2:\r\n        torreta\r\n    }\r\n},\r\n\r\n con un {event.tomodule.name} de clase {event.tomodule.class}-{event.tomodule.grade}\r\n\r\n{if type(event.tomodule.mount) != \"void\":\r\n    {for index, value in event.tomodule.mount: {set mount to value}}\r\n    {if mount = 0:\r\n         fijo\r\n    |elif mount = 1:\r\n        asistido\r\n   |elif mount = 2:\r\n        torreta\r\n    }\r\n}\r\n.\r\n",
      "default": false,
      "name": "Module swapped",
      "description": "Triggered when modules are swapped between slots on the ship"
    },
    "Module transfer": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Has transferido un {event.module.name} de clase {event.module.class}-{event.module.grade}\r\n\r\n{if type(event.module.mount) != \"void\":\r\n    {for index, value in event.module.mount: {set mount to value}}\r\n    {if mount = 0:\r\n        fijo\r\n    |elif mount = 1:\r\n        asistido\r\n    |elif mount = 2:\r\n        torreta\r\n    }\r\n}\r\n\r\n\r\n{if type(event.transfercost) != \"void\": con un coste de {event.transfercost} créditos.}\r\n\r\n{set t_remaining to event.transfertime}\r\n\r\n{if t_remaining:\r\n\r\n   {Pause(1000)}\r\n   Se espera que llegue en:\r\n\r\n   {if t_remaining > (60*60*24):\r\n      {set t_days to floor(t_remaining/(60*60*24) )}\r\n      {t_days} días,\r\n      {set t_remaining to (t_remaining)-floor(t_remaining/(60*60*24)) }\r\n   }\r\n\r\n   {if t_remaining > (60*60):\r\n      {set t_hours to floor( t_remaining/(60*60)) }\r\n      {t_hours} horas,\r\n      {set t_remaining to (t_remaining)-floor(t_remaining/(60*60)) }\r\n   }\r\n\r\n   {if t_remaining > (60):\r\n      {if t_days || t_hours: and}\r\n      {set t_minutes to round(t_remaining/(60),0)}\r\n      {t_minutes} minutos.\r\n   }\r\n}",
      "default": false,
      "name": "Module transfer",
      "description": "Triggered when you transfer a module from storage at another station"
    },
    "Modules stored": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Has almacenado los siguientes módulos:\r\n\r\n{for module in event.modules:\r\n\r\n    {module.name} de clase {module.class}-{module.grade},\r\n\r\n    {if type(module.mount) != \"void\":\r\n        {for index, value in module.mount: {set mount to value}}\r\n        {if mount = 0:\r\n            fijo\r\n        |elif mount = 1:\r\n            asistido\r\n        |elif mount = 2:\r\n            torreta\r\n        }\r\n    }\r\n    \r\n    {Pause(400)}\r\n}\r\n\r\n\r\n",
      "default": false,
      "name": "Modules stored",
      "description": "Triggered when you store multiple modules"
    },
    "Music": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Music",
      "description": "Triggered when the game music 'mood' changes"
    },
    "Nav beacon scan": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context _}\r\n{SetState('eddi_context_last_subject', 'nav beacon')}\r\n{SetState('eddi_context_last_action', 'scan')}\r\n{SetState('eddi_context_star_system', system.name)}\r\n{SetState('eddi_context_nav_scans', event.numbodies)}\r\n\r\n{set nav to OneOf(\"nav\", \"navigation\")}\r\n{set beacon to OneOf(\"beacon\", \"buoy\")}\r\n{OneOf(\"Este {nav} {beacon} ha transferido detalles de {event.numbodies} cuerpos estelares en este sistema.\",\r\n \"Recividos detalles de {event.numbodies} cuerpos estelares en este sistema.\")}\r\n\r\n{Pause(500)}",
      "default": false,
      "name": "Nav beacon scan",
      "description": "Triggered when you scan a nav beacon, before the scan data for all the bodies in the system is written into the journal"
    },
    "NPC attack commenced": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "\r\n{OneOf('Alerta. Estamos siendo atacados por {F(\"Altair tipo NPC\")}','Alerta. Nos está atacando {F(\"Altair tipo NPC\")}','Alerta. Ataque detectado por parte de {F(\"Altair tipo NPC\")}', 'Alerta. {F(\"Altair tipo NPC\")} nos está atacando', 'Alerta. {F(\"Altair tipo NPC\")} ha iniciado un ataque contra nosotros')}\r\n\r\n .\r\n",
      "default": false,
      "name": "NPC attack commenced",
      "description": "Triggered when an attack on your ship by an NPC is detected"
    },
    "NPC cargo scan commenced": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "\r\n{_ See if we are carrying non-limpet cargo}\r\n{set carryingvaluablecargo to 0}\r\n{for cargo in ship.cargo:\r\n    {if cargo.commodity != 'Limpet':\r\n        {set carryingvaluablecargo to 1}\r\n    }\r\n}\r\n\r\n{if carryingvaluablecargo = 1:\r\n  {OneOf ('Cuidado. Detecto {F(\"Altair tipo NPC\")} escaneando nuestra carga', 'Cuidado. {F(\"Altair tipo NPC\")} está escaneando nuestra carga') }.\r\n}\r\n",
      "default": false,
      "name": "NPC cargo scan commenced",
      "description": "Triggered when a cargo scan on your ship by an NPC is detected"
    },
    "NPC interdiction commenced": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{OneOf ('Alerta: detectado intento de interdicción por parte de {F(\"Altair tipo NPC\")}','Alarma: estamos siendo interdictados por {F(\"Altair tipo NPC\")}','alarma: {F(\"Altair tipo NPC\")} está intentando interdictarnos')}.\r\n\r\n{Occasionally(3, \"Debemos intentar evitarlo, o reducir la velocidad.\")}",
      "default": false,
      "name": "NPC interdiction commenced",
      "description": "Triggered when an interdiction attempt on your ship by an NPC is detected"
    },
    "Power commodity delivered": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{SetState(\"altair_commodity\", event.commodity)}\r\n{SetState(\"altair_potencia\", event.power)}\r\n\r\n\r\n{event.amount} unidades de {F(\"Altair commodities\")} entregadas {OneOf(' ','a {F(\"Altair nombres potencias\")}')}.",
      "default": false,
      "name": "Power commodity delivered",
      "description": "Triggered when a commander delivers a commodity to a power"
    },
    "Power commodity fast tracked": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{SetState(\"altair_potencia\", event.power)}\r\n\r\n{event.amount} créditos gastados en acelerar mercancías {OneOf(' ','para {F(\"Altair nombres potencias\")}')}.",
      "default": false,
      "name": "Power commodity fast tracked",
      "description": "Triggered when a commander fast tracks a commodity of a power"
    },
    "Power commodity obtained": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{SetState(\"altair_commodity\", event.commodity)}\r\n{SetState(\"altair_potencia\", event.power)}\r\n\r\n\r\nobtenidas {event.amount} unidades de {F(\"Altair commodities\")} {OneOf(' ','para {F(\"Altair nombres potencias\")}')}.\r\n",
      "default": false,
      "name": "Power commodity obtained",
      "description": "Triggered when a commander obtains a commodity from a power"
    },
    "Power defected": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "\r\n\r\nHa desertado de \r\n{SetState(\"altair_potencia\", event.frompower)}\r\n{F(\"Altair nombres potencias\")}\r\n hacia\r\n{SetState(\"altair_potencia\", event.topower)}\r\n{F(\"Altair nombres potencias\")}\r\n.",
      "default": false,
      "name": "Power defected",
      "description": "Triggered when you defect from one power to another"
    },
    "Power expansion vote cast": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": "Vote\r\n{OneOf(\"cast\", \"registered\")}",
      "default": true,
      "name": "Power expansion vote cast",
      "description": "Triggered when a commander votes for system expansion"
    },
    "Power joined": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{SetState(\"altair_potencia\", event.power)}\r\n\r\nAhora estamos alineados con {F(\"Altair nombres potencias\")}",
      "default": false,
      "name": "Power joined",
      "description": "Triggered when you join a power"
    },
    "Power left": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{SetState(\"altair_potencia\", event.power)}\r\n\r\nHemos dejado de estar alineados con {F(\"Altair nombres potencias\")}",
      "default": false,
      "name": "Power left",
      "description": "Triggered when you leave a power"
    },
    "Power preparation vote cast": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": "Vote\r\n{OneOf(\"cast\", \"registered\")}",
      "default": true,
      "name": "Power preparation vote cast",
      "description": "Triggered when a commander votes for system perparation"
    },
    "Power salary claimed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{SetState(\"altair_potencia\", event.power)}\r\n\r\nSalario de {event.amount}  créditos reclamado {OneOf(' ','a {F(\"Altair nombres potencias\")}')}.",
      "default": false,
      "name": "Power salary claimed",
      "description": "Triggered when a commander claims salary from a power"
    },
    "Power voucher received": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Power voucher received",
      "description": "Triggered when a commander turns in combat vouchers against an opposing power"
    },
    "Repair drone": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{set systemsrepaired to []}\r\n\r\n{if event.hull:\r\n   {set systemsrepaired to cat(systemsrepaired, [\"the hull\"])} \r\n}\r\n{if event.cockpit:\r\n   {set systemsrepaired to cat(systemsrepaired, [\"the cockpit\"])} \r\n}\r\n{if event.corrosion:\r\n   {set systemsrepaired to cat(systemsrepaired, [OneOf(\"corroded systems\", \"systems affected by corrosion\")])} \r\n}\r\n\r\n{if len(systemsrepaired) > 0:\r\n\r\n    {set remote to Occasionally(2, \"remote\")}\r\n    {set sequence to OneOf(\"sequence\", \"cycle\")}\r\n    {OneOf(\r\n        \"The limpet has completed it's {remote} repairs to\", \r\n        \"{remote} {sequence} completed, repairs made to\"\r\n    )}\r\n\r\n    {set cur to 0}\r\n    {while cur < len(systemsrepaired):\r\n        {if cur = 0:\r\n        |elif cur < len(systemsrepaired) - 1:\r\n            , \r\n        |else:\r\n            and\r\n        }\r\n        {systemsrepaired[cur]}\r\n        {set cur to cur + 1}\r\n    }\r\n}.\r\n",
      "default": true,
      "name": "Repair drone",
      "description": "Triggered when your ship is repaired via a repair limpet controller"
    },
    "Repeat last speech": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{state.eddi_context_last_speech}",
      "default": true,
      "name": "Repeat last speech",
      "description": "Repeat the last thing said"
    },
    "Screenshot": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Screenshot",
      "description": "Triggered when you take a screenshot"
    },
    "Search and rescue": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{event.amount} \r\n{if event.commodity.rare: rare}\r\n\r\n{if event.commodity.name = \"Black Box\":\r\n   {if event.amount > 1:\r\n      {OneOf(\"flight records\", \"black boxes\")}\r\n   |else: \r\n      {OneOf(\"flight record\", \"black box\")}\r\n   }\r\n\r\n|elif event.commodity.name = \"Occupied CryoPod\":\r\n   {OneOf(\"damaged cryo pod\", \"occupied cryo pod\")}{if event.amount > 1:s}\r\n\r\n|elif event.commodity.name = \"Occupied Escape Pod\":\r\n   {OneOf(\"damaged escape pod\", \"occupied escape pod\")}{if event.amount > 1:s}\r\n\r\n|elif event.commodity.name = \"Personal Effects\":\r\n   {OneOf(\"set\", \"collection\")}{if event.amount > 1:s} of\r\n   {OneOf(\"personal effects\", \"personal belongings\")}\r\n\r\n|elif event.commodity.name = \"Salvageable Wreckage\":\r\n   {set wreakage to OneOf(\"wreakage\", \"debris\")}\r\n   {set fragment to OneOf(\"fragment\", \"bit\", \"piece\", \"part\", \"remnant\")}\r\n   {OneOf(\"{fragment}{if event.amount > 1:s} of {wreakage}\", \r\n          \"{wreakage} {fragment}{if event.amount > 1:s}\")}\r\n\r\n|elif event.commodity.name = \"Hostage\":\r\n   {OneOf(\"hostage\")}{if event.amount > 1:s}\r\n\r\n|else:\r\n   {event.commodity.name}{if event.amount > 1:s}\r\n}\r\n\r\n{OneOf(\"recovered\", \"salvaged\")}\r\n{Occasionally(2, \"in exchange\")}\r\nfor {Humanise(event.reward)} credits",
      "default": true,
      "name": "Search and rescue",
      "description": "Triggered when delivering items to a Search and Rescue contact"
    },
    "Security presence report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{if system.population > 0:\r\n    {OneOf ('los sensores detectan','detecto')} \r\n\r\n    {if system.security = \"None\":\r\n        OneOf(\"una falta total\",\"una ausencia total\", \"la inexistencia\")\r\n    |elif system.security = \"Low\":\r\n        {OneOf(\"una mínima presencia\", \"una baja presencia\", \"muy poca presencia\",\"escasa presencia\")}\r\n    |elif system.security = \"Medium\":\r\n        {OneOf(\"un nivel medio\", \"alguna presencia\", \"cierta presencia\")}\r\n    |elif system.security = \"High\":\r\n        {OneOf(\"una alta presencia\", \"una fuerte presencia\", \"una abundante presencia\")}\r\n    |else:\r\n        {system.security}\r\n    } \r\n    {OneOf(\"de fuerzas policiales\", \"de seguridad\", \"de agentes de la ley\",\"de agentes de seguridad\")} {OneOf(\"aquí\", \"en este sistema\", \"en esta localización\")}.\r\n}",
      "default": false,
      "name": "Security presence report",
      "description": "Function to report on the details of system security"
    },
    "Self destruct": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Secuencia de autodestrucción iniciada. Cerrando orificios de ventilación.",
      "default": false,
      "name": "Self destruct",
      "description": "Triggered when you start the self destruct sequence"
    },
    "Settlement approached": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Settlement approached",
      "description": "Triggered when you approach a settlement"
    },
    "Shields down": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Alarma: Escudos {OneOf('desactivados','sin energía','fuera de línea')}.",
      "default": false,
      "name": "Shields down",
      "description": "Triggered when your ship's shields go offline"
    },
    "Shields up": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Escudos {OneOf('en línea','activados')}.",
      "default": false,
      "name": "Shields up",
      "description": "Triggered when your ship's shields come online"
    },
    "Ship delivered": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Entrega de la nave completada.",
      "default": false,
      "name": "Ship delivered",
      "description": "Triggered when your newly-purchased ship is delivered to you"
    },
    "Ship interdicted": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Ship interdicted",
      "description": "Triggered when your ship is interdicted by another ship"
    },
    "Ship interdiction": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Iniciada maniobra de interdicción.",
      "default": false,
      "name": "Ship interdiction",
      "description": "Triggered when you interdict another ship"
    },
    "Ship loadout": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Ship loadout",
      "description": "Triggered when you obtain the loadout of your ship"
    },
    "Ship purchased": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Nueva nave adquirida.",
      "default": false,
      "name": "Ship purchased",
      "description": "Triggered when you purchase a ship"
    },
    "Ship rebooted": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Ship rebooted",
      "description": "Triggered when you run reboot/repair on your ship"
    },
    "Ship refuelled": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Pause(2000)}\r\n\r\n{if ship.fueltanktotalcapacity = event.total: \r\n  Nave totalmente {OneOf ('recargada','rebastecida')}.\r\n|else:\r\n\r\n  Nave {OneOf ('reabasteciéndose de combustible','recargándose de combustible')}\r\n}\r\n.\r\n",
      "default": false,
      "name": "Ship refuelled",
      "description": "Triggered when you refuel your ship"
    },
    "Ship renamed": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": "{ShipName()} registrada en {system.faction}.  Su identificación es {ICAO(event.ident)}.",
      "default": false,
      "name": "Ship renamed",
      "description": "Triggered when you rename a ship"
    },
    "Ship repaired": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": "Nave reparada.",
      "default": false,
      "name": "Ship repaired",
      "description": "Triggered when you repair your ship"
    },
    "Ship repurchased": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Ship repurchased",
      "description": "Triggered when you repurchase your ship"
    },
    "Ship restocked": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": "Nave {OneOf(\"recargada\",\"rearmada\")}.",
      "default": false,
      "name": "Ship restocked",
      "description": "Triggered when you restock your ship's ammunition"
    },
    "Ship shutdown": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Ship shutdown",
      "description": "Triggered when your ship's system are shutdown"
    },
    "Ship sold": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{OneOf(\"Retirada {ShipName(event.shipid, event.ship)} del servicio activo.\",\r\n             \"{ShipName(event.shipid, event.ship)} Dada de baja.\",\r\n             \"{ShipName(event.shipid, event.ship)} vendida.\",)}",
      "default": false,
      "name": "Ship sold",
      "description": "Triggered when you sell a ship"
    },
    "Ship sold on rebuy": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{event.ship}, con identificación {event.shipid}, vendida en {event.system}, por {(event.price)} créditos",
      "default": false,
      "name": "Ship sold on rebuy",
      "description": "Triggered when you sell a ship to raise funds on the insurance / rebuy screen"
    },
    "Ship swapped": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if event.storedship:\r\n    {SetState(\"altair_nombrenave\", event.storedship)}\r\n    {OneOf(\"Almacenando\", \"Estacionando\", \"Aparcando\")} \r\n    {F(\"Altair naves\")} \r\n    y \r\n|elif event.soldship:\r\n    {SetState(\"altair_nombrenave\", event.soldship)}\r\n    vendiendo \r\n    {F(\"Altair naves\")}\r\n    y\r\n}\r\n{SetState(\"altair_nombrenave\", event.ship)}\r\n{OneOf(\"trasladándose a\",\"embarcando en\",\"transfiriéndose a\")} \r\n{F(\"Altair naves\")}.",
      "default": false,
      "name": "Ship swapped",
      "description": "Triggered when you swap a ship"
    },
    "Ship transfer initiated": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{SetState(\"altair_nombrenave\", event.ship)}\r\n\r\n \r\n{F(\"Altair naves\")} \r\n \r\n{OneOf(\"está en camino\",\"está siendo transferida\", \"está siendo transportada\", \"está siendo enviada\", \"está de camino\")} desde {event.system}.",
      "default": false,
      "name": "Ship transfer initiated",
      "description": "Triggered when you initiate a ship transfer"
    },
    "SRV docked": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": "{OneOf(\"Buggy\", \"uve erre ese\")} embarcado.",
      "default": false,
      "name": "SRV docked",
      "description": "Triggered when you dock an SRV with your ship"
    },
    "SRV launched": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": "{OneOf(\"Buggy\", \"uve erre ese\")} {OneOf(\"lanzado\", \"fuera\")}.",
      "default": false,
      "name": "SRV launched",
      "description": "Triggered when you launch an SRV from your ship"
    },
    "Star report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch from context }\r\n{set reportbody to BodyDetails(state.eddi_context_star_star, state.eddi_context_star_system)}\r\n\r\n{if !reportbody.name || reportbody.name = \"\":\r\n    No estoy segura de saber a que estrella te refieres.\r\n|else:\r\n{set mainsequence to 0}\r\n. {OneOf('Es ','Se trata de ','Estamos ante ','Nos encontramos ante ')}\r\n{if event.stellarclass = \"O\":\r\n    una estrella de secuencia principal increiblemente rara\r\n    {set mainsequence to 1}\r\n|elif event.stellarclass = \"B\":\r\n    una estrella de secuencia principal muy rara\r\n    {set mainsequence to 1}\r\n|elif event.stellarclass = \"A\":\r\n    una rara estrella de secuencia principal\r\n    {set mainsequence to 1}\r\n|elif event.stellarclass = \"F\":\r\n    una estrella de secuencia principal poco común\r\n    {set mainsequence to 1}\r\n|elif event.stellarclass = \"G\":\r\n    una estrella común de secuencia principal\r\n    {set mainsequence to 1}\r\n|elif event.stellarclass = \"K\":\r\n    una estrella común de secuencia principal\r\n    {set mainsequence to 1}\r\n|elif event.stellarclass = \"M\":\r\n    una estrella muy común de secuencia principal\r\n    {set mainsequence to 1}\r\n|elif event.stellarclass = \"L\":\r\n    una enana marrón\r\n|elif event.stellarclass = \"T\":\r\n    una enana marrón\r\n|elif event.stellarclass = \"Y\":\r\n    una enana marrón\r\n|elif event.stellarclass = \"TTS\":\r\n    Una estrella T Tauri en proceso de contracción gravitacional\r\n|elif event.stellarclass = \"AeBe\":\r\n    una proto estrella muy joven aun por entrar en la secuencia principal {Occasionally(4, \"pero en proceso de convertirse en una estrella de clase A o B\")}\r\n|elif event.stellarclass = \"W\":\r\n    una vieja estrella {Occasionally(4, \"cerca del final de su ciclo de vida y que ya no quema hidrógeno\")}\r\n|elif event.stellarclass = \"WN\":\r\n    una vieja estrella {Occasionally(4, \"cerca del final de su ciclo de vida y que ya no quema hidrógeno\")}\r\n|elif event.stellarclass = \"WNC\":\r\n    una vieja estrella {Occasionally(4, \"cerca del final de su ciclo de vida y que ya no quema hidrógeno\")}\r\n|elif event.stellarclass = \"WC\":\r\n    una vieja estrella {Occasionally(4, \"cerca del final de su ciclo de vida y que ya no quema hidrógeno\")}\r\n|elif event.stellarclass = \"WO\":\r\n    una vieja estrella {Occasionally(4, \"cerca del final de su ciclo de vida y que ya no quema hidrógeno\")}\r\n|elif event.stellarclass = \"CS\":\r\n    una estrella de carbono\r\n|elif event.stellarclass = \"C\":\r\n    una  estrella de carbono {Occasionally(2, \"de secuencia tardía \")} {Occasionally(4, \"con una atmósfera dominada por carbono\")}\r\n|elif event.stellarclass = \"CN\":\r\n    una  estrella de carbono {Occasionally(2, \"de secuencia tardía \")} {Occasionally(4, \"con una atmósfera dominada por carbono\")}\r\n|elif event.stellarclass = \"CJ\":\r\n    una estrella de carbono {Occasionally(2, \"de secuencia tardía \")} {Occasionally(2, \"con altos niveles de carbono 13 en su atmósfera\")}\r\n|elif event.stellarclass = \"CH\":\r\n    una estrella de carbono {Occasionally(2, \"de secuencia tardía \")} {Occasionally(4, \"con una atmósfera dominada por carbono\")}\r\n|elif event.stellarclass = \"CHd\":\r\n    una estrella de carbono {Occasionally(2, \"de secuencia tardía \")} {Occasionally(4, \"con una atmósfera dominada por carbono\")}\r\n|elif event.stellarclass = \"MS\":\r\n    una estrella de secuencia tardía {Occasionally(4, \"que una vez fué una estrella de clase M y está en proceso de convertirse en una estrella de carbono\")}\r\n|elif event.stellarclass = \"S\":\r\n    una estrella de secuencia tardía {Occasionally(4, \"que una vez fue una estrella de clase M y se está convirtiendo en una estrella de carbono\")}\r\n|elif event.stellarclass = \"D\":\r\n    una enana blanca\r\n|elif event.stellarclass = \"DA\":\r\n    una enana blanca {Occasionally(4, \"con una atmósfera rica en hidrógeno\")}\r\n|elif event.stellarclass = \"DAB\":\r\n    una enana blanca {Occasionally(4, \"con una atmósfera rica en hidrógeno y helio\")}\r\n|elif event.stellarclass = \"DAO\":\r\n    una enana blanca\r\n|elif event.stellarclass = \"DAZ\":\r\n    una enana blanca\r\n|elif event.stellarclass = \"DAV\":\r\n    una enana blanca\r\n|elif event.stellarclass = \"DB\":\r\n    una enana blanca\r\n|elif event.stellarclass = \"DBZ\":\r\n    una enana blanca\r\n|elif event.stellarclass = \"DBV\":\r\n    una enana blanca\r\n|elif event.stellarclass = \"DO\":\r\n    una enana blanca\r\n|elif event.stellarclass = \"DOV\":\r\n    una enana blanca\r\n|elif event.stellarclass = \"DQ\":\r\n    una enana blanca\r\n|elif event.stellarclass = \"DC\":\r\n    una enana blanca\r\n|elif event.stellarclass = \"DCV\":\r\n    una enana blanca\r\n|elif event.stellarclass = \"DX\":\r\n    una enana blanca\r\n|elif event.stellarclass = \"N\":\r\n    una estrella de neutrones {Occasionally(4, \"con un peligroso núcleo de alta densidad\")}\r\n|elif event.stellarclass = \"H\":\r\n    un agujero negro\r\n|elif event.stellarclass = \"X\":\r\n    una entidad estelar exótica\r\n|elif event.stellarclass = \"SuperMassiveBlackHole\":\r\n     un agujero negro supermasivo\r\n|elif event.stellarclass = \"A_BlueWhiteSuperGiant\":\r\n    una supergigante blanco-azulada {Occasionally(4, \"que se está expandiendo para ser una supergigante roja\")}\r\n|elif event.stellarclass = \"F_WhiteSuperGiant\":\r\n    una supergigante blanco-amarilla {Occasionally(4, \"que se está expandiendo para ser una supergigante roja\")}\r\n|elif event.stellarclass = \"M_RedSuperGiant\":\r\n    una supergigante roja {Occasionally(4, \"en su fase de combustión de helio\")}\r\n|elif event.stellarclass = \"M_RedGiant\":\r\n    una gigante roja {Occasionally(4, \"que se está expandiendo para ser una supergigante roja\")}\r\n|elif event.stellarclass = \"K_OrangeGiant\":\r\n    una gigante naranja {Occasionally(4, \"que se está expandiendo a medida que avanza hacia el final de su vida\")}\r\n|elif event.stellarclass = \"RoguePlanet\":\r\n    un planeta errante\r\n|elif event.stellarclass = \"Nebula\":\r\n    una nebulosa\r\n|elif event.stellarclass = \"StellarRemnantNebula\":\r\n    un remanente de nebulosa\r\n}\r\n\r\n{OneOf(\" que ha estado aquí desde hace {event.age} años\",\r\n             \" que tiene {event.age} años de antigüedad.\",\r\n             \" de {event.age} años\",\r\n)}\r\n{if event.age < 1000000:\r\n    lo que la convierte en una de las estrellas más jóvenes de la galaxia.\r\n|elif event.age >14000000000:\r\n    lo que la convierte en una de las estrellas más antiguas de la galaxia.\r\n}.\r\n\r\n{if mainsequence = 1:\r\n   {if event.chromacity = \"blue\":\r\n       {Occasionally(2,\".Como puede ver, emite una luz azul.\")}\r\n   |elif event.chromacity = \"blue-white\":\r\n       {Occasionally(2,\".Como puede ver, emite una luz blanco azulada.\")}\r\n   |elif event.chromacity = \"white\":\r\n       {Occasionally(2,\".Como puede ver, emite una luz blanca.\")}\r\n   |elif event.chromacity = \"yellow-white\":\r\n       {Occasionally(2,\".Como puede ver, emite una luz blanco amarillenta.\")}\r\n   |elif event.chromacity = \"yellow-orange\":\r\n       {Occasionally(2,\".Como puede ver, emite una luz amarillo anaranjada.\")}\r\n   |elif event.chromacity = \"orange-red\":\r\n       {Occasionally(2,\".Como puede ver, emite una luz rojo anaranjada.\")}\r\n   }\r\n    {set notables to []}\r\n\r\n    {if event.massprobability < 0.01:\r\n        {set notables to cat(notables, [cat(\"una increiblemente baja masa solar de \", event.solarmass)])}\r\n    |elif event.massprobability <0.1:\r\n        {set notables to cat(notables, [cat(\"una extremadamente baja masa solar de \", event.solarmass)])}\r\n    |elif event.massprobability <1:\r\n        {set notables to cat(notables, [\"una infrecuentemente baja masa solar\"])}\r\n    |elif event.massprobability <10:\r\n        {set notables to cat(notables, [\"una masa solar por debajo de la media\"])}\r\n    |elif event.massprobability > 99.99:\r\n        {set notables to cat(notables, [cat(\"una increiblemente alta masa solar de \", event.solarmass)])}\r\n    |elif event.massprobability > 99.9:\r\n        {set notables to cat(notables, [cat(\"una extremadamente alta masa solar de \", event.solarmass)])}\r\n    |elif event.massprobability > 99:\r\n        {set notables to cat(notables, [\"una infrecuentemente alta masa solar\"])}\r\n    |elif event.massprobability > 90:\r\n        {set notables to cat(notables, [\"una masa solar por encima de la media\"])}\r\n    }\r\n\r\n    {if event.radiusprobability < 0.01:\r\n        {set notables to cat(notables, [cat(\"un increiblemente bajo radio solar de \", event.solarradius)])}\r\n    |elif event.radiusprobability <0.1:\r\n        {set notables to cat(notables, [cat(\"un extremadamente bajo radio solar de \", event.solarradius)])}\r\n    |elif event.radiusprobability <1:\r\n        {set notables to cat(notables, [\"un radio solar infrecuentemente bajo\"])}\r\n    |elif event.radiusprobability <10:\r\n        {set notables to cat(notables, [\"un radio solar por debajo de la media\"])}\r\n    |elif event.radiusprobability > 99.99:\r\n        {set notables to cat(notables, [cat(\"un extremadamente alto radio solar de \", event.solarradius)])}\r\n    |elif event.radiusprobability > 99.9:\r\n        {set notables to cat(notables, [cat(\"un increiblemente alto radio solar de \", event.solarradius)])}\r\n    |elif event.radiusprobability > 99:\r\n        {set notables to cat(notables, [\"un infrecuentemente alto radio solar\"])}\r\n    |elif event.radiusprobability > 90:\r\n        {set notables to cat(notables, [\"un radio solar por encima de la media\"])}\r\n    }\r\n\r\n    {if event.tempprobability < 0.01:\r\n        {set notables to cat(notables, [cat(\"una increiblemente baja temperatura superficial de \", event.temperature, \" grados kelvin\")])}\r\n    |elif event.tempprobability <0.1:\r\n        {set notables to cat(notables, [cat(\"una extremadamente baja temperatura superficial de \", event.temperature, \" grados kelvin\")])}\r\n    |elif event.tempprobability <1:\r\n        {set notables to cat(notables, [\"una temperatura superficial infrecuentemente baja\"])}\r\n    |elif event.tempprobability <10:\r\n        {set notables to cat(notables, [\"una temperatura superficial por debajo de la media\"])}\r\n    |elif event.tempprobability > 99.99:\r\n        {set notables to cat(notables, [cat(\"una extremadamente alta temperatura superficial de \", event.temperature, \" grados kelvin\")])}\r\n    |elif event.tempprobability > 99.9:\r\n        {set notables to cat(notables, [cat(\"una increiblemente alta temperatura superficial de \", event.temperature, \" grados kelvin\")])}\r\n    |elif event.tempprobability > 99:\r\n        {set notables to cat(notables, [\"una temperatura superficial infrecuentemente alta\"])}\r\n    |elif event.tempprobability > 90:\r\n        {set notables to cat(notables, [\"una temperatura superficial por encima de la media\"])}\r\n    }\r\n\r\n    {if len(notables) = 0:\r\n        {OneOf(\"\", \"Este es un ejemplo típico de este tipo de estrellas.\", \"No hay nada especialmente destacable en esta estrella.\", \"Es una muestra normal de este tipo de estrellas.\")}\r\n    |else:\r\n        {OneOf('comparada con otras estrellas de esta clase', 'En comparación con otras estrellas de clase {event.stellarclass}', 'En relación con otras estrellas de clase {event.stellarclass}')}, esta estrella  \r\n        {if len(notables) = 1:\r\n            destaca por tener {notables[0]}.\r\n        |elif len(notables) = 2:\r\n            {OneOf('es interesante', 'es poco frecuente')}, con {notables[0]} y {notables[1]}.\r\n        |elif len(notables) = 3:\r\n            {OneOf('excepcional', 'muy destacable')}, con {notables[0]}, {notables[1]} y {notables[2]}.\r\n        }\r\n    }\r\n}\r\n\r\n}",
      "default": false,
      "name": "Star report",
      "description": "Function to report on the details of the contextual body"
    },
    "Star scanned": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'star')}\r\n{SetState('eddi_context_last_action', 'scan')}\r\n{SetState('eddi_context_star_system', system.name)}\r\n{SetState('eddi_context_star_star', event.name)}\r\n\r\n{Pause(1000)}\r\n\r\nCompletado escaneo de estrella clase {event.stellarclass}, llamada {event.name}.\r\n\r\n{set mainsequence to 0}\r\n. {OneOf('Es ','Se trata de ','Estamos ante ','Nos encontramos ante ')}\r\n{if event.stellarclass = \"O\":\r\n    una estrella de secuencia principal increiblemente rara\r\n    {set mainsequence to 1}\r\n|elif event.stellarclass = \"B\":\r\n    una estrella de secuencia principal muy rara\r\n    {set mainsequence to 1}\r\n|elif event.stellarclass = \"A\":\r\n    una rara estrella de secuencia principal\r\n    {set mainsequence to 1}\r\n|elif event.stellarclass = \"F\":\r\n    una estrella de secuencia principal poco común\r\n    {set mainsequence to 1}\r\n|elif event.stellarclass = \"G\":\r\n    una estrella común de secuencia principal\r\n    {set mainsequence to 1}\r\n|elif event.stellarclass = \"K\":\r\n    una estrella común de secuencia principal\r\n    {set mainsequence to 1}\r\n|elif event.stellarclass = \"M\":\r\n    una estrella muy común de secuencia principal\r\n    {set mainsequence to 1}\r\n|elif event.stellarclass = \"L\":\r\n    una enana marrón\r\n|elif event.stellarclass = \"T\":\r\n    una enana marrón\r\n|elif event.stellarclass = \"Y\":\r\n    una enana marrón\r\n|elif event.stellarclass = \"TTS\":\r\n    Una estrella T Tauri en proceso de contracción gravitacional\r\n|elif event.stellarclass = \"AeBe\":\r\n    una proto estrella muy joven aun por entrar en la secuencia principal {Occasionally(4, \"pero en proceso de convertirse en una estrella de clase A o B\")}\r\n|elif event.stellarclass = \"W\":\r\n    una vieja estrella {Occasionally(4, \"cerca del final de su ciclo de vida y que ya no quema hidrógeno\")}\r\n|elif event.stellarclass = \"WN\":\r\n    una vieja estrella {Occasionally(4, \"cerca del final de su ciclo de vida y que ya no quema hidrógeno\")}\r\n|elif event.stellarclass = \"WNC\":\r\n    una vieja estrella {Occasionally(4, \"cerca del final de su ciclo de vida y que ya no quema hidrógeno\")}\r\n|elif event.stellarclass = \"WC\":\r\n    una vieja estrella {Occasionally(4, \"cerca del final de su ciclo de vida y que ya no quema hidrógeno\")}\r\n|elif event.stellarclass = \"WO\":\r\n    una vieja estrella {Occasionally(4, \"cerca del final de su ciclo de vida y que ya no quema hidrógeno\")}\r\n|elif event.stellarclass = \"CS\":\r\n    una estrella de carbono\r\n|elif event.stellarclass = \"C\":\r\n    una  estrella de carbono {Occasionally(2, \"de secuencia tardía \")} {Occasionally(4, \"con una atmósfera dominada por carbono\")}\r\n|elif event.stellarclass = \"CN\":\r\n    una  estrella de carbono {Occasionally(2, \"de secuencia tardía \")} {Occasionally(4, \"con una atmósfera dominada por carbono\")}\r\n|elif event.stellarclass = \"CJ\":\r\n    una estrella de carbono {Occasionally(2, \"de secuencia tardía \")} {Occasionally(2, \"con altos niveles de carbono 13 en su atmósfera\")}\r\n|elif event.stellarclass = \"CH\":\r\n    una estrella de carbono {Occasionally(2, \"de secuencia tardía \")} {Occasionally(4, \"con una atmósfera dominada por carbono\")}\r\n|elif event.stellarclass = \"CHd\":\r\n    una estrella de carbono {Occasionally(2, \"de secuencia tardía \")} {Occasionally(4, \"con una atmósfera dominada por carbono\")}\r\n|elif event.stellarclass = \"MS\":\r\n    una estrella de secuencia tardía {Occasionally(4, \"que una vez fué una estrella de clase M y está en proceso de convertirse en una estrella de carbono\")}\r\n|elif event.stellarclass = \"S\":\r\n    una estrella de secuencia tardía {Occasionally(4, \"que una vez fue una estrella de clase M y se está convirtiendo en una estrella de carbono\")}\r\n|elif event.stellarclass = \"D\":\r\n    una enana blanca\r\n|elif event.stellarclass = \"DA\":\r\n    una enana blanca {Occasionally(4, \"con una atmósfera rica en hidrógeno\")}\r\n|elif event.stellarclass = \"DAB\":\r\n    una enana blanca {Occasionally(4, \"con una atmósfera rica en hidrógeno y helio\")}\r\n|elif event.stellarclass = \"DAO\":\r\n    una enana blanca\r\n|elif event.stellarclass = \"DAZ\":\r\n    una enana blanca\r\n|elif event.stellarclass = \"DAV\":\r\n    una enana blanca\r\n|elif event.stellarclass = \"DB\":\r\n    una enana blanca\r\n|elif event.stellarclass = \"DBZ\":\r\n    una enana blanca\r\n|elif event.stellarclass = \"DBV\":\r\n    una enana blanca\r\n|elif event.stellarclass = \"DO\":\r\n    una enana blanca\r\n|elif event.stellarclass = \"DOV\":\r\n    una enana blanca\r\n|elif event.stellarclass = \"DQ\":\r\n    una enana blanca\r\n|elif event.stellarclass = \"DC\":\r\n    una enana blanca\r\n|elif event.stellarclass = \"DCV\":\r\n    una enana blanca\r\n|elif event.stellarclass = \"DX\":\r\n    una enana blanca\r\n|elif event.stellarclass = \"N\":\r\n    una estrella de neutrones {Occasionally(4, \"con un peligroso núcleo de alta densidad\")}\r\n|elif event.stellarclass = \"H\":\r\n    un agujero negro\r\n|elif event.stellarclass = \"X\":\r\n    una entidad estelar exótica\r\n|elif event.stellarclass = \"SuperMassiveBlackHole\":\r\n     un agujero negro supermasivo\r\n|elif event.stellarclass = \"A_BlueWhiteSuperGiant\":\r\n    una supergigante blanco-azulada {Occasionally(4, \"que se está expandiendo para ser una supergigante roja\")}\r\n|elif event.stellarclass = \"F_WhiteSuperGiant\":\r\n    una supergigante blanco-amarilla {Occasionally(4, \"que se está expandiendo para ser una supergigante roja\")}\r\n|elif event.stellarclass = \"M_RedSuperGiant\":\r\n    una supergigante roja {Occasionally(4, \"en su fase de combustión de helio\")}\r\n|elif event.stellarclass = \"M_RedGiant\":\r\n    una gigante roja {Occasionally(4, \"que se está expandiendo para ser una supergigante roja\")}\r\n|elif event.stellarclass = \"K_OrangeGiant\":\r\n    una gigante naranja {Occasionally(4, \"que se está expandiendo a medida que avanza hacia el final de su vida\")}\r\n|elif event.stellarclass = \"RoguePlanet\":\r\n    un planeta errante\r\n|elif event.stellarclass = \"Nebula\":\r\n    una nebulosa\r\n|elif event.stellarclass = \"StellarRemnantNebula\":\r\n    un remanente de nebulosa\r\n}\r\n\r\n{OneOf(\" que ha estado aquí desde hace {event.age} años\",\r\n             \" que tiene {event.age} años de antigüedad.\",\r\n             \" de {event.age} años\",\r\n)}\r\n{if event.age < 1000000:\r\n    lo que la convierte en una de las estrellas más jóvenes de la galaxia.\r\n|elif event.age >14000000000:\r\n    lo que la convierte en una de las estrellas más antiguas de la galaxia.\r\n}.\r\n\r\n{if mainsequence = 1:\r\n   {if event.chromacity = \"blue\":\r\n       {Occasionally(2,\".Como puede ver, emite una luz azul.\")}\r\n   |elif event.chromacity = \"blue-white\":\r\n       {Occasionally(2,\".Como puede ver, emite una luz blanco azulada.\")}\r\n   |elif event.chromacity = \"white\":\r\n       {Occasionally(2,\".Como puede ver, emite una luz blanca.\")}\r\n   |elif event.chromacity = \"yellow-white\":\r\n       {Occasionally(2,\".Como puede ver, emite una luz blanco amarillenta.\")}\r\n   |elif event.chromacity = \"yellow-orange\":\r\n       {Occasionally(2,\".Como puede ver, emite una luz amarillo anaranjada.\")}\r\n   |elif event.chromacity = \"orange-red\":\r\n       {Occasionally(2,\".Como puede ver, emite una luz rojo anaranjada.\")}\r\n   }\r\n    {set notables to []}\r\n\r\n    {if event.massprobability < 0.01:\r\n        {set notables to cat(notables, [cat(\"una increiblemente baja masa solar de \", event.solarmass)])}\r\n    |elif event.massprobability <0.1:\r\n        {set notables to cat(notables, [cat(\"una extremadamente baja masa solar de \", event.solarmass)])}\r\n    |elif event.massprobability <1:\r\n        {set notables to cat(notables, [\"una infrecuentemente baja masa solar\"])}\r\n    |elif event.massprobability <10:\r\n        {set notables to cat(notables, [\"una masa solar por debajo de la media\"])}\r\n    |elif event.massprobability > 99.99:\r\n        {set notables to cat(notables, [cat(\"una increiblemente alta masa solar de \", event.solarmass)])}\r\n    |elif event.massprobability > 99.9:\r\n        {set notables to cat(notables, [cat(\"una extremadamente alta masa solar de \", event.solarmass)])}\r\n    |elif event.massprobability > 99:\r\n        {set notables to cat(notables, [\"una infrecuentemente alta masa solar\"])}\r\n    |elif event.massprobability > 90:\r\n        {set notables to cat(notables, [\"una masa solar por encima de la media\"])}\r\n    }\r\n\r\n    {if event.radiusprobability < 0.01:\r\n        {set notables to cat(notables, [cat(\"un increiblemente bajo radio solar de \", event.solarradius)])}\r\n    |elif event.radiusprobability <0.1:\r\n        {set notables to cat(notables, [cat(\"un extremadamente bajo radio solar de \", event.solarradius)])}\r\n    |elif event.radiusprobability <1:\r\n        {set notables to cat(notables, [\"un radio solar infrecuentemente bajo\"])}\r\n    |elif event.radiusprobability <10:\r\n        {set notables to cat(notables, [\"un radio solar por debajo de la media\"])}\r\n    |elif event.radiusprobability > 99.99:\r\n        {set notables to cat(notables, [cat(\"un extremadamente alto radio solar de \", event.solarradius)])}\r\n    |elif event.radiusprobability > 99.9:\r\n        {set notables to cat(notables, [cat(\"un increiblemente alto radio solar de \", event.solarradius)])}\r\n    |elif event.radiusprobability > 99:\r\n        {set notables to cat(notables, [\"un infrecuentemente alto radio solar\"])}\r\n    |elif event.radiusprobability > 90:\r\n        {set notables to cat(notables, [\"un radio solar por encima de la media\"])}\r\n    }\r\n\r\n    {if event.tempprobability < 0.01:\r\n        {set notables to cat(notables, [cat(\"una increiblemente baja temperatura superficial de \", event.temperature, \" grados kelvin\")])}\r\n    |elif event.tempprobability <0.1:\r\n        {set notables to cat(notables, [cat(\"una extremadamente baja temperatura superficial de \", event.temperature, \" grados kelvin\")])}\r\n    |elif event.tempprobability <1:\r\n        {set notables to cat(notables, [\"una temperatura superficial infrecuentemente baja\"])}\r\n    |elif event.tempprobability <10:\r\n        {set notables to cat(notables, [\"una temperatura superficial por debajo de la media\"])}\r\n    |elif event.tempprobability > 99.99:\r\n        {set notables to cat(notables, [cat(\"una extremadamente alta temperatura superficial de \", event.temperature, \" grados kelvin\")])}\r\n    |elif event.tempprobability > 99.9:\r\n        {set notables to cat(notables, [cat(\"una increiblemente alta temperatura superficial de \", event.temperature, \" grados kelvin\")])}\r\n    |elif event.tempprobability > 99:\r\n        {set notables to cat(notables, [\"una temperatura superficial infrecuentemente alta\"])}\r\n    |elif event.tempprobability > 90:\r\n        {set notables to cat(notables, [\"una temperatura superficial por encima de la media\"])}\r\n    }\r\n\r\n    {if len(notables) = 0:\r\n        {OneOf(\"\", \"Este es un ejemplo típico de este tipo de estrellas.\", \"No hay nada especialmente destacable en esta estrella.\", \"Es una muestra normal de este tipo de estrellas.\")}\r\n    |else:\r\n        {OneOf('comparada con otras estrellas de esta clase', 'En comparación con otras estrellas de clase {event.stellarclass}', 'En relación con otras estrellas de clase {event.stellarclass}')}, esta estrella  \r\n        {if len(notables) = 1:\r\n            destaca por tener {notables[0]}.\r\n        |elif len(notables) = 2:\r\n            {OneOf('es interesante', 'es poco frecuente')}, con {notables[0]} y {notables[1]}.\r\n        |elif len(notables) = 3:\r\n            {OneOf('excepcional', 'muy destacable')}, con {notables[0]}, {notables[1]} y {notables[2]}.\r\n        }\r\n    }\r\n}\r\n",
      "default": false,
      "name": "Star scanned",
      "description": "Triggered when you complete a scan of a stellar body"
    },
    "Station no fire zone entered": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Station no fire zone entered",
      "description": "Triggered when your ship enters a station's no fire zone"
    },
    "Station no fire zone exited": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Station no fire zone exited",
      "description": "Triggered when your ship exits a station's no fire zone"
    },
    "Station report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "No hay nada de interés aquí.",
      "default": false,
      "name": "Station report",
      "description": "Function to report on the details of the current station"
    },
    "Swapout check": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Function to find a given module in outfitting}\r\n{set outfitting(module) to:\r\n    {for outfittingmodule in station.outfitting:\r\n        {if outfittingmodule.EDDBID = module.EDDBID:\r\n            {return outfittingmodule}\r\n        }\r\n    }\r\n}\r\n\r\n{_ Function to report if a module is cheaper in outfitting that on the ship}\r\n{set reportIfCheaper(shipmodule) to:\r\n    {_ Only consider if this has no modifications}\r\n    {if !shipmodule.modified:\r\n        {set outfittingmodule to outfitting(shipmodule)}\r\n        {if outfittingmodule:\r\n            {if outfittingmodule.price < shipmodule.price:\r\n                {set saving to shipmodule.price - outfittingmodule.price}\r\n                {_ Only bother if it's a relatively good saving}\r\n                {if saving / cmdr.credits > 0.001:\r\n                    Puede ahorrar {saving} créditos cambiando su {shipmodule.name} aquí.\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n{reportIfCheaper(ship.powerplant)}\r\n{reportIfCheaper(ship.thrusters)}\r\n{reportIfCheaper(ship.frameshiftdrive)}\r\n{reportIfCheaper(ship.lifesupport)}\r\n{reportIfCheaper(ship.powerdistributor)}\r\n{reportIfCheaper(ship.sensors)}\r\n{for hardpoint in ship.hardpoints:\r\n    {if hardpoint.module:\r\n        {reportIfCheaper(hardpoint.module)}\r\n    }\r\n}\r\n{for compartment in ship.compartments:\r\n    {if compartment.module:\r\n        {reportIfCheaper(compartment.module)}\r\n    }\r\n}\r\n",
      "default": false,
      "name": "Swapout check",
      "description": "Check to see if any fitted modules are available more cheaply here"
    },
    "Synthesised": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Síntesis completada.",
      "default": false,
      "name": "Synthesised",
      "description": "Triggered when you synthesise something from materials"
    },
    "System distance report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch from context }\r\n{set reportsystem to SystemDetails(state.eddi_context_system_system)}\r\n\r\n{if !reportsystem.name || reportbody.name = \"\":\r\n    No estoy segura de a qué sistema se refiere, Comandante.\r\n|else:\r\n    La distancia hasta {reportsystem.name} es de {Distance(reportsystem.x, reportsystem.y, reportsystem.z, system.x, system.y, system.z)} años luz.\r\n}\r\n\r\n\r\n\r\n",
      "default": false,
      "name": "System distance report",
      "description": "Function to report on the distance to the contextual system"
    },
    "System faction changed": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "System faction changed",
      "description": "Triggered when there is a change in the controlling faction of a watched system"
    },
    "System report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "\r\n{SetState(\"altair_potencia\", system.power)}\r\n\r\n{OneOf(\"Este es\", \"Este sistema es\", \"el sistema {system.name} es\")}\r\n{if system.government=\"Anarchy\":\r\n    un sistema anárquico \r\n|elif system.government=\"Colony\":\r\n    una colonia \r\n|elif system.government=\"Communism\":\r\n    un sistema comunista \r\n|elif system.government=\"Confederacy\":\r\n    una confederación \r\n|elif system.government=\"Cooperative\":\r\n    una cooperativa \r\n|elif system.government=\"Corporate\":\r\n    un sistema corporativo \r\n|elif system.government=\"Democracy\":\r\n    una democracia \r\n|elif system.government=\"Dictatorship\":\r\n    una dictadura \r\n|elif system.government=\"Feudal\":\r\n    un sistema feudal    \r\n|elif system.government=\"Imperial\":\r\n    un sistema imperial \r\n|elif system.government=\"Patronage\":\r\n    un patronazgo \r\n|elif system.government=\"Prison Colony\":\r\n    una colonia penitenciaria \r\n|elif system.government=\"Theocracy\":\r\n    un sistema teocrático \r\n|elif system.government=\"Workshop\":\r\n    un sistema taller \r\n|elif system.government=\"Engineer\":\r\n    un sistema de ingeniero   \r\n|else:\r\n  un sistema \r\n}\r\n\r\n{if system.allegiance = \"Federation\":\r\n    de la Federación\r\n|elif system.allegiance = \"Empire\":\r\n    del imperio\r\n|elif system.allegiance = \"Alliance\":\r\n    de la alianza\r\n|elif system.allegiance = \"Independent\":\r\n    independiente\r\n|else:\r\n    no colonizado\r\n},\r\n{if (!system.population || system.population=0):\r\n    {OneOf(\"Completamente deshabitado\",\"Totalmente despoblado\",\"que carece de población humana\" )}\r\n|else:\r\n    {OneOf(\"con una población de\", \"hogar de\", \"que mantiene a\")} {system.population} {OneOf(\"personas\",   \"habitantes\")}\r\n}\r\n{if system.power:\r\n    , {OneOf(\"alineado con\", \"aliado con\", \"controlado por\")} {F(\"Altair nombres potencias\")}\r\n}.\r\n\r\n{if system.faction:\r\n  {OneOf(\"la potencia\", \"la facción\")} {system.faction} es la que {OneOf(\"tiene el control\", \"posee el control\")}.\r\n}\r\n\r\n{if len(system.stations) = 0:\r\n  No hay estaciones \r\n|else:\r\n    {if len(system.orbitalstations) = 0:\r\n        {if len(system.planetarystations) = 1:\r\n            Hay {OneOf(\"una única\", \"una solitaria\", \"solo una\", \"una\")} estación planetaria\r\n        |else:\r\n            Hay {len(system.planetarystations)} estaciones planetarias\r\n        }\r\n    |elif len(system.orbitalstations) = 1:\r\n        Hay {OneOf(\"una única\", \"una solitaria\", \"solo una\", \"una\")} estación orbital \r\n        {if len(system.planetarystations) = 1:\r\n            y {OneOf(\"una solitaria\", \"una única\", \"una\",\"solo una\")} estación planetaria\r\n        |elif len(system.planetarystations) > 1:\r\n            y {len(system.planetarystations)} estaciones planetarias \r\n        }\r\n    |else:\r\n        Hay {len(system.orbitalstations)} estaciones orbitales \r\n        {if len(system.planetarystations) = 1:\r\n            y {OneOf(\"una solitaria\", \"una única\", \"una\", \"solo una\")} estación planetaria\r\n        |elif len(system.planetarystations) > 1:\r\n            y {len(system.planetarystations)} estaciones planetarias \r\n        }\r\n    }\r\n}\r\n{OneOf(\"aquí\", \"en este sistema\")}.\r\n\r\n{if system.state = \"Boom\":\r\n    El sistema está en auge; {OneOf('por lo que podría obtener aquí buenos beneficios comerciales','por lo que puede haber buenas oportunidades comerciales aquí','puede haber interesantes oportunidades de negocio aquí')}.\r\n|elif system.state = \"Civil War\":\r\n    Este sistema está en guerra civil; debe tener cuidado.\r\n|elif system.state = \"Famine\":\r\n    Este sistema está sufriendo una hambruna; se recomienda precaución.\r\n|elif system.state = \"Lockdown\":\r\n    Este sistema está en quiebra; se recomienda precaución.\r\n|elif system.state = \"Outbreak\":\r\n    Este sistema está intentando contener una epidemia; se recomienda precaución.\r\n|elif system.state = \"War\":\r\n    Este sistema está en guerra; se recomienda precaución.\r\n|elif system.state = \"Expansion\":\r\n    Este sistema se está preparando para expandirse a otro sistema.\r\n|elif reportsystem.state = \"Bust\":\r\n    Este sistema está en quiebra financiera.\r\n|elif reportsystem.state = \"Election\":\r\n    Este sistema está eligiendo nuevos líderes.\r\n|elif reportsystem.state = \"Investment\":\r\n    Este sistema está realizando inversiones en sus infraestructuras.\r\n}\r\n\r\n",
      "default": false,
      "name": "System report",
      "description": "Function to report on the details of the current star system"
    },
    "System state changed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": false,
      "name": "System state changed",
      "description": "Triggered when there is a change in the state of a watched system"
    },
    "System state report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch from context }\r\n{set reportsystem to SystemDetails(state.eddi_context_system_system)}\r\n\r\n{if !reportsystem.name || reportbody.name = \"\":\r\n    No estoy segura de a qué sistema se refiere.\r\n|else:\r\n    {P(reportsystem.name)}\r\n    {if reportsystem.state = \"None\":\r\n      No está en ningun estado en especial.\r\n    |elif reportsystem.state = \"Retreat\":\r\n        está en retirada\r\n    |elif reportsystem.state = \"War\":\r\n        está en guerra; se recomienda precaución\r\n    |elif reportsystem.state = \"Boom\":\r\n        El sistema está en auge; {OneOf('por lo que podría obtener aquí buenos beneficios comerciales','por lo que puede haber buenas oportunidades comerciales aquí','puede haber interesantes oportunidades de negocio aquí')}.\r\n    |elif reportsystem.state = \"Civil War\":\r\n        Este sistema está en guerra civil; debe tener cuidado.\r\n    |elif reportsystem.state = \"Famine\":\r\n        Este sistema está sufriendo una hambruna; se recomienda precaución.\r\n    |elif reportsystem.state = \"Lockdown\":\r\n        Este sistema está en quiebra; se recomienda precaución.\r\n    |elif reportsystem.state = \"Outbreak\":\r\n        Este sistema está intentando contener una epidemia; se recomienda precaución.\r\n    |elif reportsystem.state = \"Expansion\":\r\n        Este sistema se está preparando para expandirse a otro sistema.\r\n    |elif reportsystem.state = \"Bust\":\r\n        Este sistema está en quiebra financiera.\r\n    |elif reportsystem.state = \"Election\":\r\n        Este sistema está eligiendo nuevos líderes.\r\n    |elif reportsystem.state = \"Investment\":\r\n        Este sistema está realizando inversiones en sus infraestructuras.\r\n    |else:\r\n    }\r\n    .\r\n}",
      "default": false,
      "name": "System state report",
      "description": "Report on the current state of the contextual system"
    },
    "Touchdown": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": "{set body to BodyDetails(state.eddi_context_body_name, state.eddi_context_system_name)}\r\n\r\n{if event.playercontrolled = true:\r\n  Hemos aterrizado en {body.name}.\r\n  {Pause(2000)}\r\n  Nuestras coordenadas son {round(event.longitude, 2)} grados de longitud, {round(event.latitude, 2)} grados de latitud.\r\n|else:\r\n  Nave aterrizando en {body.name}.\r\n}\r\n\r\n\r\n",
      "default": false,
      "name": "Touchdown",
      "description": "Triggered when your ship touches down on a planet's surface"
    },
    "Trade data purchased": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'tradedata')}\r\n{SetState('eddi_context_last_action', 'buy')}\r\n{SetState('eddi_context_tradedata_name', event.system)}\r\n\r\n{OneOf(\"Adquiridos datos de comercio de {event.system}\",\r\n            \"Datos comerciales de {event.system} disponibles\",\"Datos comerciales de {event.system} recibidos correctamente\"\r\n            \"Recibidos datos comerciales de {event.system} desde los servicios de la estación\",\r\n            \"Recepción de datos comerciales de {event.system} confirmada\")}.",
      "default": false,
      "name": "Trade data purchased",
      "description": "Triggered when you purchase trade data"
    },
    "Trade promotion": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Se ha reconocido su habilidad como comerciante comandante.",
      "default": false,
      "name": "Trade promotion",
      "description": "Triggered when your trade rank increases"
    },
    "Trade voucher redeemed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'trade_voucher')}\r\n{SetState('eddi_context_last_action', 'redeem')}\r\n{SetState('eddi_context_trade_voucher_amount', event.amount)}\r\n\r\nDevengados {event.amount} créditos en vales de comercio\r\n{Occasionally(2, \"\r\n  {if len(event.rewards) = 1:\r\n    por parte de la facción {event.rewards[0].faction}\r\n  |else:\r\n    por parte de \r\n    {set cur to 0}\r\n    {while cur < len(event.rewards):\r\n        {if cur = 0:\r\n        |elif cur < len(event.rewards) - 1:\r\n            , \r\n        |else:\r\n            y\r\n        }\r\n        {event.rewards[cur].faction}\r\n        {set cur to cur + 1}\r\n    }\r\n  }\r\n\")}.\r\n",
      "default": false,
      "name": "Trade voucher redeemed",
      "description": "Triggered when you redeem a trade voucher"
    },
    "Undocked": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": "{OneOf(\"Reestablecido control total de la nave\", \"Amarres liberados\", \"Desconectando de la red local\")}.\r\n\r\n{Pause(5000)}\r\n\r\n{F(\"Limpet check\")}\r\n",
      "default": false,
      "name": "Undocked",
      "description": "Triggered when your ship undocks from a station or outpost"
    }
  }
}
